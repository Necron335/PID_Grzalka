
Tempererereatura.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e31c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800e4f0  0800e4f0  0000f4f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea20  0800ea20  00010234  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea20  0800ea20  0000fa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea28  0800ea28  00010234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea28  0800ea28  0000fa28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ea2c  0800ea2c  0000fa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0800ea30  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000097c  20000234  0800ec64  00010234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb0  0800ec64  00010bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e401  00000000  00000000  00010264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e4  00000000  00000000  0002e665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  00032b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137e  00000000  00000000  00034470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b24a  00000000  00000000  000357ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022948  00000000  00000000  00060a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe4aa  00000000  00000000  00083380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018182a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e48  00000000  00000000  00181870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001896b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000234 	.word	0x20000234
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e4d4 	.word	0x0800e4d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000238 	.word	0x20000238
 800020c:	0800e4d4 	.word	0x0800e4d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <software_delay>:
/**
* Software busy delay
* @param[in] tick Number of ticks to wait
*/
static void software_delay(uint32_t tick)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	uint32_t delay;
	while(tick-->0)
 800102c:	e00c      	b.n	8001048 <software_delay+0x24>
	{
		for(delay=5; delay>0; delay--){
 800102e:	2305      	movs	r3, #5
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e006      	b.n	8001042 <software_delay+0x1e>
			asm("nop");
 8001034:	bf00      	nop
			asm("nop");
 8001036:	bf00      	nop
			asm("nop");
 8001038:	bf00      	nop
			asm("nop");
 800103a:	bf00      	nop
		for(delay=5; delay>0; delay--){
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3b01      	subs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f5      	bne.n	8001034 <software_delay+0x10>
	while(tick-->0)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1ed      	bne.n	800102e <software_delay+0xa>
		}
	}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LCD_init>:
/**
* Initialization of LCD display in 4 bits mode
* @details Before use initialize GPIOs
*/
void LCD_init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	@ 0x38
 8001064:	af00      	add	r7, sp, #0
	software_delay(1000000);
 8001066:	4854      	ldr	r0, [pc, #336]	@ (80011b8 <LCD_init+0x158>)
 8001068:	f7ff ffdc 	bl	8001024 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f8b9 	bl	80011e8 <LCD_send_4bits>
 8001076:	4850      	ldr	r0, [pc, #320]	@ (80011b8 <LCD_init+0x158>)
 8001078:	f7ff ffd4 	bl	8001024 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f8b1 	bl	80011e8 <LCD_send_4bits>
 8001086:	484c      	ldr	r0, [pc, #304]	@ (80011b8 <LCD_init+0x158>)
 8001088:	f7ff ffcc 	bl	8001024 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(400000);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f8a9 	bl	80011e8 <LCD_send_4bits>
 8001096:	4849      	ldr	r0, [pc, #292]	@ (80011bc <LCD_init+0x15c>)
 8001098:	f7ff ffc4 	bl	8001024 <software_delay>
	//Set 4-bit
	LCD_send_4bits(0x02,0,0);	software_delay(400000);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	2002      	movs	r0, #2
 80010a2:	f000 f8a1 	bl	80011e8 <LCD_send_4bits>
 80010a6:	4845      	ldr	r0, [pc, #276]	@ (80011bc <LCD_init+0x15c>)
 80010a8:	f7ff ffbc 	bl	8001024 <software_delay>

	//Function SET
	LCD_write_command(LCD_FUNCTION_INSTRUCTION | LCD_FUNCTION_DL_4BIT | LCD_FUNCTION_LINE_NUMBER_2 | LCD_FUNCTION_FONT_5x8); software_delay(50000);
 80010ac:	2028      	movs	r0, #40	@ 0x28
 80010ae:	f000 f934 	bl	800131a <LCD_write_command>
 80010b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010b6:	f7ff ffb5 	bl	8001024 <software_delay>
	//Display on
	LCD_write_command(LCD_DISPLAY_INSTRUCTION | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR_OFF | LCD_DISPLAY_BLINK_OFF);software_delay(100000);
 80010ba:	200c      	movs	r0, #12
 80010bc:	f000 f92d 	bl	800131a <LCD_write_command>
 80010c0:	483f      	ldr	r0, [pc, #252]	@ (80011c0 <LCD_init+0x160>)
 80010c2:	f7ff ffaf 	bl	8001024 <software_delay>
	//Display clear
	LCD_write_command(LCD_CLEAR_INSTRUCTION);software_delay(100000);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 f927 	bl	800131a <LCD_write_command>
 80010cc:	483c      	ldr	r0, [pc, #240]	@ (80011c0 <LCD_init+0x160>)
 80010ce:	f7ff ffa9 	bl	8001024 <software_delay>
	//Entry mode
	LCD_write_command(LCD_ENTRY_MODE_INSTRUCTION | LCD_ENTRY_MODE_INCREMENT | LCD_ENTRY_MODE_SHIFT_DISPLAY_OFF);software_delay(100000);
 80010d2:	2006      	movs	r0, #6
 80010d4:	f000 f921 	bl	800131a <LCD_write_command>
 80010d8:	4839      	ldr	r0, [pc, #228]	@ (80011c0 <LCD_init+0x160>)
 80010da:	f7ff ffa3 	bl	8001024 <software_delay>
	//Init end

	//Return home
	LCD_write_command(LCD_HOME_INSTRUCTION);	software_delay(100000);
 80010de:	2002      	movs	r0, #2
 80010e0:	f000 f91b 	bl	800131a <LCD_write_command>
 80010e4:	4836      	ldr	r0, [pc, #216]	@ (80011c0 <LCD_init+0x160>)
 80010e6:	f7ff ff9d 	bl	8001024 <software_delay>
	
	LCD_write_text("SM - lab");
 80010ea:	4836      	ldr	r0, [pc, #216]	@ (80011c4 <LCD_init+0x164>)
 80010ec:	f000 f950 	bl	8001390 <LCD_write_text>
	LCD_goto_line(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f000 f989 	bl	8001408 <LCD_goto_line>
	LCD_write_text("Projekt PID");
 80010f6:	4834      	ldr	r0, [pc, #208]	@ (80011c8 <LCD_init+0x168>)
 80010f8:	f000 f94a 	bl	8001390 <LCD_write_text>

	uint8_t custom_char1[] = LCD_CUSTOM_CHAR_ARROW_UP_PATERN;
 80010fc:	4a33      	ldr	r2, [pc, #204]	@ (80011cc <LCD_init+0x16c>)
 80010fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001102:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001106:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char1, 0);
 800110a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f987 	bl	8001424 <LCD_create_custom_character>
	uint8_t custom_char2[] = LCD_CUSTOM_CHAR_ARROW_DOWN_PATERN;
 8001116:	4a2e      	ldr	r2, [pc, #184]	@ (80011d0 <LCD_init+0x170>)
 8001118:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001120:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char2, 1);
 8001124:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001128:	2101      	movs	r1, #1
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f97a 	bl	8001424 <LCD_create_custom_character>
	uint8_t custom_char3[] = LCD_CUSTOM_CHAR_ARROW_OUT_PATERN;
 8001130:	4a28      	ldr	r2, [pc, #160]	@ (80011d4 <LCD_init+0x174>)
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113a:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char3, 2);
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2102      	movs	r1, #2
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f96d 	bl	8001424 <LCD_create_custom_character>
	uint8_t custom_char4[] = LCD_CUSTOM_CHAR_ARROW_INTO_PATERN;
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <LCD_init+0x178>)
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001154:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char4, 3);
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	2103      	movs	r1, #3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f960 	bl	8001424 <LCD_create_custom_character>
	uint8_t custom_char5[] = LCD_CUSTOM_CHAR_ARROW_ENTER_PATERN;
 8001164:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <LCD_init+0x17c>)
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char5, 4);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	2104      	movs	r1, #4
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f953 	bl	8001424 <LCD_create_custom_character>
	uint8_t custom_char6[] = LCD_CUSTOM_CHAR_ARROW_PLUS_MINUS_PATERN;
 800117e:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <LCD_init+0x180>)
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001188:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char6, 5);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	2105      	movs	r1, #5
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f946 	bl	8001424 <LCD_create_custom_character>

	uint8_t custom_char_7[] = LCD_CUSTOM_CHAR_DEGREE_PATTERN;
 8001198:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <LCD_init+0x184>)
 800119a:	463b      	mov	r3, r7
 800119c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011a0:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char_7, 6);
 80011a4:	463b      	mov	r3, r7
 80011a6:	2106      	movs	r1, #6
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f93b 	bl	8001424 <LCD_create_custom_character>


}
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	@ 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000f4240 	.word	0x000f4240
 80011bc:	00061a80 	.word	0x00061a80
 80011c0:	000186a0 	.word	0x000186a0
 80011c4:	0800e4f0 	.word	0x0800e4f0
 80011c8:	0800e4fc 	.word	0x0800e4fc
 80011cc:	0800e508 	.word	0x0800e508
 80011d0:	0800e510 	.word	0x0800e510
 80011d4:	0800e518 	.word	0x0800e518
 80011d8:	0800e520 	.word	0x0800e520
 80011dc:	0800e528 	.word	0x0800e528
 80011e0:	0800e530 	.word	0x0800e530
 80011e4:	0800e538 	.word	0x0800e538

080011e8 <LCD_send_4bits>:


void LCD_send_4bits(uint8_t data_to_send, char RS, char RW)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	460b      	mov	r3, r1
 80011f4:	71bb      	strb	r3, [r7, #6]
 80011f6:	4613      	mov	r3, r2
 80011f8:	717b      	strb	r3, [r7, #5]
	LCD_GPIO_SET_VALUE(LCD_GPIO_RS_Pin, RS, LCD_GPIO_RS_Port);
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d106      	bne.n	800120e <LCD_send_4bits+0x26>
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001206:	4835      	ldr	r0, [pc, #212]	@ (80012dc <LCD_send_4bits+0xf4>)
 8001208:	f003 fbd4 	bl	80049b4 <HAL_GPIO_WritePin>
 800120c:	e005      	b.n	800121a <LCD_send_4bits+0x32>
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001214:	4831      	ldr	r0, [pc, #196]	@ (80012dc <LCD_send_4bits+0xf4>)
 8001216:	f003 fbcd 	bl	80049b4 <HAL_GPIO_WritePin>
	//set RW to LOW (GND) by hardware

	if(data_to_send&(0x01<<0)){LCD_DATABIT_ON(4);}else{LCD_DATABIT_OFF(4);}
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <LCD_send_4bits+0x48>
 8001224:	2201      	movs	r2, #1
 8001226:	2110      	movs	r1, #16
 8001228:	482d      	ldr	r0, [pc, #180]	@ (80012e0 <LCD_send_4bits+0xf8>)
 800122a:	f003 fbc3 	bl	80049b4 <HAL_GPIO_WritePin>
 800122e:	e004      	b.n	800123a <LCD_send_4bits+0x52>
 8001230:	2200      	movs	r2, #0
 8001232:	2110      	movs	r1, #16
 8001234:	482a      	ldr	r0, [pc, #168]	@ (80012e0 <LCD_send_4bits+0xf8>)
 8001236:	f003 fbbd 	bl	80049b4 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<1)){LCD_DATABIT_ON(5);}else{LCD_DATABIT_OFF(5);}
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <LCD_send_4bits+0x68>
 8001244:	2201      	movs	r2, #1
 8001246:	2120      	movs	r1, #32
 8001248:	4825      	ldr	r0, [pc, #148]	@ (80012e0 <LCD_send_4bits+0xf8>)
 800124a:	f003 fbb3 	bl	80049b4 <HAL_GPIO_WritePin>
 800124e:	e004      	b.n	800125a <LCD_send_4bits+0x72>
 8001250:	2200      	movs	r2, #0
 8001252:	2120      	movs	r1, #32
 8001254:	4822      	ldr	r0, [pc, #136]	@ (80012e0 <LCD_send_4bits+0xf8>)
 8001256:	f003 fbad 	bl	80049b4 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<2)){LCD_DATABIT_ON(6);}else{LCD_DATABIT_OFF(6);}
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <LCD_send_4bits+0x88>
 8001264:	2201      	movs	r2, #1
 8001266:	2140      	movs	r1, #64	@ 0x40
 8001268:	481d      	ldr	r0, [pc, #116]	@ (80012e0 <LCD_send_4bits+0xf8>)
 800126a:	f003 fba3 	bl	80049b4 <HAL_GPIO_WritePin>
 800126e:	e004      	b.n	800127a <LCD_send_4bits+0x92>
 8001270:	2200      	movs	r2, #0
 8001272:	2140      	movs	r1, #64	@ 0x40
 8001274:	481a      	ldr	r0, [pc, #104]	@ (80012e0 <LCD_send_4bits+0xf8>)
 8001276:	f003 fb9d 	bl	80049b4 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<3)){LCD_DATABIT_ON(7);}else{LCD_DATABIT_OFF(7);}
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <LCD_send_4bits+0xa8>
 8001284:	2201      	movs	r2, #1
 8001286:	2180      	movs	r1, #128	@ 0x80
 8001288:	4815      	ldr	r0, [pc, #84]	@ (80012e0 <LCD_send_4bits+0xf8>)
 800128a:	f003 fb93 	bl	80049b4 <HAL_GPIO_WritePin>
 800128e:	e004      	b.n	800129a <LCD_send_4bits+0xb2>
 8001290:	2200      	movs	r2, #0
 8001292:	2180      	movs	r1, #128	@ 0x80
 8001294:	4812      	ldr	r0, [pc, #72]	@ (80012e0 <LCD_send_4bits+0xf8>)
 8001296:	f003 fb8d 	bl	80049b4 <HAL_GPIO_WritePin>
	software_delay(100);
 800129a:	2064      	movs	r0, #100	@ 0x64
 800129c:	f7ff fec2 	bl	8001024 <software_delay>
	
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2108      	movs	r1, #8
 80012a4:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <LCD_send_4bits+0xf8>)
 80012a6:	f003 fb85 	bl	80049b4 <HAL_GPIO_WritePin>
 80012aa:	2064      	movs	r0, #100	@ 0x64
 80012ac:	f7ff feba 	bl	8001024 <software_delay>
	LCD_GPIO_OFF(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2108      	movs	r1, #8
 80012b4:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <LCD_send_4bits+0xf8>)
 80012b6:	f003 fb7d 	bl	80049b4 <HAL_GPIO_WritePin>
 80012ba:	2064      	movs	r0, #100	@ 0x64
 80012bc:	f7ff feb2 	bl	8001024 <software_delay>
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(1000);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2108      	movs	r1, #8
 80012c4:	4806      	ldr	r0, [pc, #24]	@ (80012e0 <LCD_send_4bits+0xf8>)
 80012c6:	f003 fb75 	bl	80049b4 <HAL_GPIO_WritePin>
 80012ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ce:	f7ff fea9 	bl	8001024 <software_delay>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40020c00 	.word	0x40020c00

080012e4 <LCD_send_8bits_twice_4bits>:

void LCD_send_8bits_twice_4bits(uint8_t data, char RS, char RW)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	460b      	mov	r3, r1
 80012f0:	71bb      	strb	r3, [r7, #6]
 80012f2:	4613      	mov	r3, r2
 80012f4:	717b      	strb	r3, [r7, #5]
	LCD_send_4bits((data>>4), RS, RW);	//high part
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	797a      	ldrb	r2, [r7, #5]
 80012fe:	79b9      	ldrb	r1, [r7, #6]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff71 	bl	80011e8 <LCD_send_4bits>
	LCD_send_4bits(data, RS, RW);		//low part
 8001306:	797a      	ldrb	r2, [r7, #5]
 8001308:	79b9      	ldrb	r1, [r7, #6]
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff6b 	bl	80011e8 <LCD_send_4bits>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(command, 0, 0);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffda 	bl	80012e4 <LCD_send_8bits_twice_4bits>
	software_delay(10000);
 8001330:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001334:	f7ff fe76 	bl	8001024 <software_delay>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <LCD_write_data>:

void LCD_write_data(char byte_data)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(byte_data, 1, 0);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2200      	movs	r2, #0
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ffc7 	bl	80012e4 <LCD_send_8bits_twice_4bits>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <LCD_write_char>:

void LCD_write_char(char character)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	if(isprint(character))	LCD_write_data(character);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	3301      	adds	r3, #1
 800136e:	4a07      	ldr	r2, [pc, #28]	@ (800138c <LCD_write_char+0x2c>)
 8001370:	4413      	add	r3, r2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <LCD_write_char+0x24>
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffde 	bl	8001340 <LCD_write_data>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0800e650 	.word	0x0800e650

08001390 <LCD_write_text>:



void LCD_write_text(char* pText){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	while(*pText!='\0')
 8001398:	e007      	b.n	80013aa <LCD_write_text+0x1a>
	{
		LCD_write_char(*pText);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffde 	bl	8001360 <LCD_write_char>
		pText++;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
	while(*pText!='\0')
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f3      	bne.n	800139a <LCD_write_text+0xa>
	}
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <LCD_goto_xy>:

void LCD_goto_xy(uint8_t line, uint8_t y)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	4613      	mov	r3, r2
 80013ca:	71bb      	strb	r3, [r7, #6]
	switch(line){
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <LCD_goto_xy+0x1c>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d003      	beq.n	80013de <LCD_goto_xy+0x22>
 80013d6:	e005      	b.n	80013e4 <LCD_goto_xy+0x28>
		case 0: line=0x00; break;
 80013d8:	2300      	movs	r3, #0
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	e004      	b.n	80013e8 <LCD_goto_xy+0x2c>
		case 1: line=0x40; break;
 80013de:	2340      	movs	r3, #64	@ 0x40
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e001      	b.n	80013e8 <LCD_goto_xy+0x2c>
		default: line=0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	71fb      	strb	r3, [r7, #7]
	}
	LCD_write_command(LCD_DDRAM_ADDRESS | (line+y));
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	4413      	add	r3, r2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff8d 	bl	800131a <LCD_write_command>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <LCD_goto_line>:

void LCD_goto_line(uint8_t line)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	LCD_goto_xy(line, 0);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ffd0 	bl	80013bc <LCD_goto_xy>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <LCD_create_custom_character>:
	return length;
}


void LCD_create_custom_character(uint8_t* pPattern, uint8_t position)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	LCD_write_command(LCD_CGRAM_ADDRESS | (position*8));
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b25b      	sxtb	r3, r3
 8001438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800143c:	b25b      	sxtb	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff6a 	bl	800131a <LCD_write_command>
	for (uint8_t i=0; i<8; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e009      	b.n	8001460 <LCD_create_custom_character+0x3c>
		LCD_write_data(pPattern[i]);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff73 	bl	8001340 <LCD_write_data>
	for (uint8_t i=0; i<8; i++)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	3301      	adds	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b07      	cmp	r3, #7
 8001464:	d9f2      	bls.n	800144c <LCD_create_custom_character+0x28>
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fa47 	bl	800190c <null_ptr_check>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d117      	bne.n	80014ba <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	20d0      	movs	r0, #208	@ 0xd0
 8001492:	f000 f818 	bl	80014c6 <bmp2_get_regs>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10b      	bne.n	80014ba <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b58      	cmp	r3, #88	@ 0x58
 80014a8:	d105      	bne.n	80014b6 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fa79 	bl	80019a2 <get_calib_param>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e001      	b.n	80014ba <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 80014b6:	23fc      	movs	r3, #252	@ 0xfc
 80014b8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80014c6:	b590      	push	{r4, r7, lr}
 80014c8:	b087      	sub	sp, #28
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f000 fa18 	bl	800190c <null_ptr_check>
 80014dc:	4603      	mov	r3, r0
 80014de:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 80014e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11e      	bne.n	8001526 <bmp2_get_regs+0x60>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d01b      	beq.n	8001526 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d103      	bne.n	80014fe <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014fc:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68dc      	ldr	r4, [r3, #12]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	7bf8      	ldrb	r0, [r7, #15]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	47a0      	blx	r4
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001520:	23fe      	movs	r3, #254	@ 0xfe
 8001522:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001524:	e001      	b.n	800152a <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001526:	23ff      	movs	r3, #255	@ 0xff
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800152a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800152e:	4618      	mov	r0, r3
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001536:	b590      	push	{r4, r7, lr}
 8001538:	b08b      	sub	sp, #44	@ 0x2c
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b04      	cmp	r3, #4
 8001548:	d901      	bls.n	800154e <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 800154a:	2304      	movs	r3, #4
 800154c:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 800154e:	6838      	ldr	r0, [r7, #0]
 8001550:	f000 f9dc 	bl	800190c <null_ptr_check>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800155a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800155e:	2b00      	cmp	r3, #0
 8001560:	d150      	bne.n	8001604 <bmp2_set_regs+0xce>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d04d      	beq.n	8001604 <bmp2_set_regs+0xce>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d04a      	beq.n	8001604 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d043      	beq.n	80015fc <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d114      	bne.n	80015ac <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001582:	2300      	movs	r3, #0
 8001584:	77fb      	strb	r3, [r7, #31]
 8001586:	e00d      	b.n	80015a4 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001588:	7ffb      	ldrb	r3, [r7, #31]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4413      	add	r3, r2
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	7ffb      	ldrb	r3, [r7, #31]
 8001592:	68f9      	ldr	r1, [r7, #12]
 8001594:	440b      	add	r3, r1
 8001596:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	3301      	adds	r3, #1
 80015a2:	77fb      	strb	r3, [r7, #31]
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8ed      	bhi.n	8001588 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d90b      	bls.n	80015ca <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80015b2:	f107 0114 	add.w	r1, r7, #20
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 f9c6 	bl	800194c <interleave_data>
                temp_len = ((len * 2) - 1);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	3b01      	subs	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
 80015c8:	e001      	b.n	80015ce <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691c      	ldr	r4, [r3, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	7818      	ldrb	r0, [r3, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f107 0114 	add.w	r1, r7, #20
 80015de:	6a3a      	ldr	r2, [r7, #32]
 80015e0:	47a0      	blx	r4
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00b      	beq.n	800160c <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80015f4:	23fe      	movs	r3, #254	@ 0xfe
 80015f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80015fa:	e007      	b.n	800160c <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80015fc:	23fd      	movs	r3, #253	@ 0xfd
 80015fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 8001602:	e003      	b.n	800160c <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001604:	23ff      	movs	r3, #255	@ 0xff
 8001606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800160a:	e000      	b.n	800160e <bmp2_set_regs+0xd8>
        if (len > 0)
 800160c:	bf00      	nop
    }

    return rslt;
 800160e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001612:	4618      	mov	r0, r3
 8001614:	372c      	adds	r7, #44	@ 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}

0800161a <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8001622:	23e0      	movs	r3, #224	@ 0xe0
 8001624:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8001626:	23b6      	movs	r3, #182	@ 0xb6
 8001628:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800162a:	f107 010d 	add.w	r1, r7, #13
 800162e:	f107 000e 	add.w	r0, r7, #14
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f7ff ff7e 	bl	8001536 <bmp2_set_regs>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001654:	2300      	movs	r3, #0
 8001656:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02d      	beq.n	80016ba <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800165e:	f107 010c 	add.w	r1, r7, #12
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2202      	movs	r2, #2
 8001666:	20f4      	movs	r0, #244	@ 0xf4
 8001668:	f7ff ff2d 	bl	80014c6 <bmp2_get_regs>
 800166c:	4603      	mov	r3, r0
 800166e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d122      	bne.n	80016be <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001678:	7b3b      	ldrb	r3, [r7, #12]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	b2da      	uxtb	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001682:	7b3b      	ldrb	r3, [r7, #12]
 8001684:	109b      	asrs	r3, r3, #2
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	b2da      	uxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001692:	7b7b      	ldrb	r3, [r7, #13]
 8001694:	095b      	lsrs	r3, r3, #5
 8001696:	b2da      	uxtb	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 800169c:	7b7b      	ldrb	r3, [r7, #13]
 800169e:	109b      	asrs	r3, r3, #2
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80016ac:	7b7b      	ldrb	r3, [r7, #13]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	715a      	strb	r2, [r3, #5]
 80016b8:	e001      	b.n	80016be <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016ba:	23ff      	movs	r3, #255	@ 0xff
 80016bc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 f9fd 	bl	8001ad8 <conf_sensor>
 80016de:	4603      	mov	r3, r0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01b      	beq.n	8001730 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80016f8:	f107 010e 	add.w	r1, r7, #14
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2201      	movs	r2, #1
 8001700:	20f3      	movs	r0, #243	@ 0xf3
 8001702:	f7ff fee0 	bl	80014c6 <bmp2_get_regs>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d110      	bne.n	8001734 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	10db      	asrs	r3, r3, #3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8001722:	7bbb      	ldrb	r3, [r7, #14]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	705a      	strb	r2, [r3, #1]
 800172e:	e001      	b.n	8001734 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001730:	23ff      	movs	r3, #255	@ 0xff
 8001732:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001734:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f9bf 	bl	8001ad8 <conf_sensor>
 800175a:	4603      	mov	r3, r0
 800175c:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800175e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	2300      	movs	r3, #0
 800177a:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d024      	beq.n	80017d6 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 800178c:	f107 0110 	add.w	r1, r7, #16
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2206      	movs	r2, #6
 8001794:	20f7      	movs	r0, #247	@ 0xf7
 8001796:	f7ff fe96 	bl	80014c6 <bmp2_get_regs>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800179e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d119      	bne.n	80017da <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80017a6:	f107 0208 	add.w	r2, r7, #8
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fab9 	bl	8001d28 <parse_sensor_data>
 80017b6:	4603      	mov	r3, r0
 80017b8:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80017ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10b      	bne.n	80017da <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f80b 	bl	80017e6 <bmp2_compensate_data>
 80017d0:	4603      	mov	r3, r0
 80017d2:	75fb      	strb	r3, [r7, #23]
 80017d4:	e001      	b.n	80017da <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80017d6:	23ff      	movs	r3, #255	@ 0xff
 80017d8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80017da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f88a 	bl	800190c <null_ptr_check>
 80017f8:	4603      	mov	r3, r0
 80017fa:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80017fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d129      	bne.n	8001858 <bmp2_compensate_data+0x72>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d026      	beq.n	8001858 <bmp2_compensate_data+0x72>
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3308      	adds	r3, #8
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68f9      	ldr	r1, [r7, #12]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fabb 	bl	8001db0 <compensate_temperature>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800183e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10a      	bne.n	800185c <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fba7 	bl	8001fa0 <compensate_pressure>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001856:	e001      	b.n	800185c <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001858:	23ff      	movs	r3, #255	@ 0xff
 800185a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800185c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b092      	sub	sp, #72	@ 0x48
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001874:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <bmp2_compute_meas_time+0x9c>)
 8001876:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800187a:	461d      	mov	r5, r3
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001884:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <bmp2_compute_meas_time+0xa0>)
 8001886:	f107 0410 	add.w	r4, r7, #16
 800188a:	461d      	mov	r5, r3
 800188c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800188e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001890:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f837 	bl	800190c <null_ptr_check>
 800189e:	4603      	mov	r3, r0
 80018a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80018a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d122      	bne.n	80018f2 <bmp2_compute_meas_time+0x8a>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01f      	beq.n	80018f2 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7e1b      	ldrb	r3, [r3, #24]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d111      	bne.n	80018de <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	78db      	ldrb	r3, [r3, #3]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	3348      	adds	r3, #72	@ 0x48
 80018c2:	443b      	add	r3, r7
 80018c4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	789b      	ldrb	r3, [r3, #2]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	3348      	adds	r3, #72	@ 0x48
 80018d0:	443b      	add	r3, r7
 80018d2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80018d6:	441a      	add	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018dc:	e00c      	b.n	80018f8 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	78db      	ldrb	r3, [r3, #3]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	3348      	adds	r3, #72	@ 0x48
 80018e6:	443b      	add	r3, r7
 80018e8:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80018f0:	e002      	b.n	80018f8 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80018f2:	23ff      	movs	r3, #255	@ 0xff
 80018f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80018f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3748      	adds	r7, #72	@ 0x48
 8001900:	46bd      	mov	sp, r7
 8001902:	bdb0      	pop	{r4, r5, r7, pc}
 8001904:	0800e544 	.word	0x0800e544
 8001908:	0800e558 	.word	0x0800e558

0800190c <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <null_ptr_check+0x26>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <null_ptr_check+0x26>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <null_ptr_check+0x26>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 8001932:	23ff      	movs	r3, #255	@ 0xff
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e001      	b.n	800193c <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800195a:	2301      	movs	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e015      	b.n	800198c <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	441a      	add	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	3b01      	subs	r3, #1
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	440b      	add	r3, r1
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	441a      	add	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	440b      	add	r3, r1
 8001982:	7812      	ldrb	r2, [r2, #0]
 8001984:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d3e5      	bcc.n	8001960 <interleave_data+0x14>
    }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b08a      	sub	sp, #40	@ 0x28
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80019c0:	f107 010c 	add.w	r1, r7, #12
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2219      	movs	r2, #25
 80019c8:	2088      	movs	r0, #136	@ 0x88
 80019ca:	f7ff fd7c 	bl	80014c6 <bmp2_get_regs>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 80019d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d177      	bne.n	8001acc <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80019dc:	7b7b      	ldrb	r3, [r7, #13]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	7b3b      	ldrb	r3, [r7, #12]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8001a02:	7c7b      	ldrb	r3, [r7, #17]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	7c3b      	ldrb	r3, [r7, #16]
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001a14:	7cfb      	ldrb	r3, [r7, #19]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	7cbb      	ldrb	r3, [r7, #18]
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	7d3b      	ldrb	r3, [r7, #20]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	7dbb      	ldrb	r3, [r7, #22]
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001a4c:	7e7b      	ldrb	r3, [r7, #25]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	7e3b      	ldrb	r3, [r7, #24]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001a5e:	7efb      	ldrb	r3, [r7, #27]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	7ebb      	ldrb	r3, [r7, #26]
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001a70:	7f7b      	ldrb	r3, [r7, #29]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	7f3b      	ldrb	r3, [r7, #28]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	7fbb      	ldrb	r3, [r7, #30]
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001a94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ac4:	b25a      	sxtb	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 8001acc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3728      	adds	r7, #40	@ 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001aea:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 8001aee:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d074      	beq.n	8001be0 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001af6:	f107 0114 	add.w	r1, r7, #20
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	20f4      	movs	r0, #244	@ 0xf4
 8001b00:	f7ff fce1 	bl	80014c6 <bmp2_get_regs>
 8001b04:	4603      	mov	r3, r0
 8001b06:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d169      	bne.n	8001be4 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fd82 	bl	800161a <bmp2_soft_reset>
 8001b16:	4603      	mov	r3, r0
 8001b18:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d160      	bne.n	8001be4 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 f861 	bl	8001bf0 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001b2e:	7d7b      	ldrb	r3, [r7, #21]
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	b25a      	sxtb	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	789b      	ldrb	r3, [r3, #2]
 8001b3c:	015b      	lsls	r3, r3, #5
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001b48:	7d7b      	ldrb	r3, [r7, #21]
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	f023 031c 	bic.w	r3, r3, #28
 8001b50:	b25a      	sxtb	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	791b      	ldrb	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	f003 031c 	and.w	r3, r3, #28
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001b68:	7d7b      	ldrb	r3, [r7, #21]
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	b25a      	sxtb	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	795b      	ldrb	r3, [r3, #5]
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001b86:	f107 0114 	add.w	r1, r7, #20
 8001b8a:	f107 0010 	add.w	r0, r7, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f7ff fcd0 	bl	8001536 <bmp2_set_regs>
 8001b96:	4603      	mov	r3, r0
 8001b98:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d120      	bne.n	8001be4 <conf_sensor+0x10c>
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01d      	beq.n	8001be4 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001bae:	7d3b      	ldrb	r3, [r7, #20]
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	f023 0303 	bic.w	r3, r3, #3
 8001bb6:	b25a      	sxtb	r2, r3
 8001bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001bca:	f107 0114 	add.w	r1, r7, #20
 8001bce:	f107 0010 	add.w	r0, r7, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f7ff fcae 	bl	8001536 <bmp2_set_regs>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	75fb      	strb	r3, [r7, #23]
 8001bde:	e001      	b.n	8001be4 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001be0:	23ff      	movs	r3, #255	@ 0xff
 8001be2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	78db      	ldrb	r3, [r3, #3]
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	f200 808b 	bhi.w	8001d1a <set_os_mode+0x12a>
 8001c04:	a201      	add	r2, pc, #4	@ (adr r2, 8001c0c <set_os_mode+0x1c>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c21 	.word	0x08001c21
 8001c10:	08001c53 	.word	0x08001c53
 8001c14:	08001c85 	.word	0x08001c85
 8001c18:	08001cb7 	.word	0x08001cb7
 8001c1c:	08001ce9 	.word	0x08001ce9
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	f043 0320 	orr.w	r3, r3, #32
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	f023 031c 	bic.w	r3, r3, #28
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	701a      	strb	r2, [r3, #0]
            break;
 8001c50:	e064      	b.n	8001d1c <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	b25b      	sxtb	r3, r3
 8001c5e:	f043 0320 	orr.w	r3, r3, #32
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	f023 031c 	bic.w	r3, r3, #28
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	701a      	strb	r2, [r3, #0]
            break;
 8001c82:	e04b      	b.n	8001d1c <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	f043 0320 	orr.w	r3, r3, #32
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	f023 031c 	bic.w	r3, r3, #28
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	f043 030c 	orr.w	r3, r3, #12
 8001cac:	b25b      	sxtb	r3, r3
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	701a      	strb	r2, [r3, #0]
            break;
 8001cb4:	e032      	b.n	8001d1c <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	f043 0320 	orr.w	r3, r3, #32
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	f023 031c 	bic.w	r3, r3, #28
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	f043 0310 	orr.w	r3, r3, #16
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	701a      	strb	r2, [r3, #0]
            break;
 8001ce6:	e019      	b.n	8001d1c <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	f023 031c 	bic.w	r3, r3, #28
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	f043 0314 	orr.w	r3, r3, #20
 8001d10:	b25b      	sxtb	r3, r3
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	701a      	strb	r2, [r3, #0]
            break;
 8001d18:	e000      	b.n	8001d1c <set_os_mode+0x12c>
        default:
            break;
 8001d1a:	bf00      	nop
    }
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	031b      	lsls	r3, r3, #12
 8001d38:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3302      	adds	r3, #2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3303      	adds	r3, #3
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	031b      	lsls	r3, r3, #12
 8001d66:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3305      	adds	r3, #5
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4610      	mov	r0, r2
 8001d9a:	f000 fae5 	bl	8002368 <st_check_boundaries>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001da2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001db0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001db4:	b08c      	sub	sp, #48	@ 0x30
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbcb 	bl	8000564 <__aeabi_i2d>
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8001f84 <compensate_temperature+0x1d4>)
 8001dd4:	f7fe fd5a 	bl	800088c <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4614      	mov	r4, r2
 8001dde:	461d      	mov	r5, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	8b9b      	ldrh	r3, [r3, #28]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbad 	bl	8000544 <__aeabi_ui2d>
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	4b66      	ldr	r3, [pc, #408]	@ (8001f88 <compensate_temperature+0x1d8>)
 8001df0:	f7fe fd4c 	bl	800088c <__aeabi_ddiv>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4620      	mov	r0, r4
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	f7fe fa64 	bl	80002c8 <__aeabi_dsub>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4614      	mov	r4, r2
 8001e06:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fba8 	bl	8000564 <__aeabi_i2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f7fe fc0c 	bl	8000638 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb99 	bl	8000564 <__aeabi_i2d>
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001e3a:	f7fe fd27 	bl	800088c <__aeabi_ddiv>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4614      	mov	r4, r2
 8001e44:	461d      	mov	r5, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	8b9b      	ldrh	r3, [r3, #28]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb7a 	bl	8000544 <__aeabi_ui2d>
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b4d      	ldr	r3, [pc, #308]	@ (8001f8c <compensate_temperature+0x1dc>)
 8001e56:	f7fe fd19 	bl	800088c <__aeabi_ddiv>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4620      	mov	r0, r4
 8001e60:	4629      	mov	r1, r5
 8001e62:	f7fe fa31 	bl	80002c8 <__aeabi_dsub>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4614      	mov	r4, r2
 8001e6c:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb76 	bl	8000564 <__aeabi_i2d>
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001e80:	f7fe fd04 	bl	800088c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4690      	mov	r8, r2
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	8b9b      	ldrh	r3, [r3, #28]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb57 	bl	8000544 <__aeabi_ui2d>
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f8c <compensate_temperature+0x1dc>)
 8001e9c:	f7fe fcf6 	bl	800088c <__aeabi_ddiv>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4640      	mov	r0, r8
 8001ea6:	4649      	mov	r1, r9
 8001ea8:	f7fe fa0e 	bl	80002c8 <__aeabi_dsub>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	f7fe fbc0 	bl	8000638 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb4c 	bl	8000564 <__aeabi_i2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
    var2 =
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	f7fe fbb0 	bl	8000638 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001ee0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ee4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ee8:	f7fe f9f0 	bl	80002cc <__adddf3>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fe50 	bl	8000b98 <__aeabi_d2iz>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f06:	f7fe f9e1 	bl	80002cc <__adddf3>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <compensate_temperature+0x1e0>)
 8001f18:	f7fe fcb8 	bl	800088c <__aeabi_ddiv>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <compensate_temperature+0x1e4>)
 8001f2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f2e:	f7fe fdf5 	bl	8000b1c <__aeabi_dcmplt>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <compensate_temperature+0x1e4>)
 8001f3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <compensate_temperature+0x1e8>)
 8001f4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f52:	f7fe fe01 	bl	8000b58 <__aeabi_dcmpgt>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <compensate_temperature+0x1e8>)
 8001f62:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f72:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001f76:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3730      	adds	r7, #48	@ 0x30
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f84:	40d00000 	.word	0x40d00000
 8001f88:	40900000 	.word	0x40900000
 8001f8c:	40c00000 	.word	0x40c00000
 8001f90:	40b40000 	.word	0x40b40000
 8001f94:	c0440000 	.word	0xc0440000
 8001f98:	40554000 	.word	0x40554000
 8001f9c:	00000000 	.word	0x00000000

08001fa0 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b08c      	sub	sp, #48	@ 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe face 	bl	8000564 <__aeabi_i2d>
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fd0:	f7fe fc5c 	bl	800088c <__aeabi_ddiv>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4bcb      	ldr	r3, [pc, #812]	@ (8002310 <compensate_pressure+0x370>)
 8001fe2:	f7fe f971 	bl	80002c8 <__aeabi_dsub>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001fee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ff6:	f7fe fb1f 	bl	8000638 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4614      	mov	r4, r2
 8002000:	461d      	mov	r5, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe faab 	bl	8000564 <__aeabi_i2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4620      	mov	r0, r4
 8002014:	4629      	mov	r1, r5
 8002016:	f7fe fb0f 	bl	8000638 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4bbb      	ldr	r3, [pc, #748]	@ (8002314 <compensate_pressure+0x374>)
 8002028:	f7fe fc30 	bl	800088c <__aeabi_ddiv>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa92 	bl	8000564 <__aeabi_i2d>
 8002040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002044:	f7fe faf8 	bl	8000638 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	f7fe f93a 	bl	80002cc <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002060:	f7fe f934 	bl	80002cc <__adddf3>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	4ba9      	ldr	r3, [pc, #676]	@ (8002318 <compensate_pressure+0x378>)
 8002072:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002076:	f7fe fc09 	bl	800088c <__aeabi_ddiv>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4614      	mov	r4, r2
 8002080:	461d      	mov	r5, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa6b 	bl	8000564 <__aeabi_i2d>
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	4ba2      	ldr	r3, [pc, #648]	@ (800231c <compensate_pressure+0x37c>)
 8002094:	f7fe fad0 	bl	8000638 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe f914 	bl	80002cc <__adddf3>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa56 	bl	8000564 <__aeabi_i2d>
 80020b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020bc:	f7fe fabc 	bl	8000638 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020cc:	f7fe fab4 	bl	8000638 <__aeabi_dmul>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	4b90      	ldr	r3, [pc, #576]	@ (8002320 <compensate_pressure+0x380>)
 80020de:	f7fe fbd5 	bl	800088c <__aeabi_ddiv>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4614      	mov	r4, r2
 80020e8:	461d      	mov	r5, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fa37 	bl	8000564 <__aeabi_i2d>
 80020f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020fa:	f7fe fa9d 	bl	8000638 <__aeabi_dmul>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4620      	mov	r0, r4
 8002104:	4629      	mov	r1, r5
 8002106:	f7fe f8e1 	bl	80002cc <__adddf3>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	4b82      	ldr	r3, [pc, #520]	@ (8002320 <compensate_pressure+0x380>)
 8002118:	f7fe fbb8 	bl	800088c <__aeabi_ddiv>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4b7a      	ldr	r3, [pc, #488]	@ (8002314 <compensate_pressure+0x374>)
 800212a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800212e:	f7fe fbad 	bl	800088c <__aeabi_ddiv>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	4b79      	ldr	r3, [pc, #484]	@ (8002324 <compensate_pressure+0x384>)
 8002140:	f7fe f8c4 	bl	80002cc <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4614      	mov	r4, r2
 800214a:	461d      	mov	r5, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f9f7 	bl	8000544 <__aeabi_ui2d>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe fa6b 	bl	8000638 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002176:	f7fe fcd1 	bl	8000b1c <__aeabi_dcmplt>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10b      	bne.n	8002198 <compensate_pressure+0x1f8>
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800218c:	f7fe fce4 	bl	8000b58 <__aeabi_dcmpgt>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80de 	beq.w	8002354 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9d1 	bl	8000544 <__aeabi_ui2d>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	f04f 0000 	mov.w	r0, #0
 80021aa:	495f      	ldr	r1, [pc, #380]	@ (8002328 <compensate_pressure+0x388>)
 80021ac:	f7fe f88c 	bl	80002c8 <__aeabi_dsub>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	4b5b      	ldr	r3, [pc, #364]	@ (800232c <compensate_pressure+0x38c>)
 80021be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021c2:	f7fe fb63 	bl	800088c <__aeabi_ddiv>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021ce:	f7fe f87b 	bl	80002c8 <__aeabi_dsub>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	a347      	add	r3, pc, #284	@ (adr r3, 80022f8 <compensate_pressure+0x358>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fe fa2a 	bl	8000638 <__aeabi_dmul>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f0:	f7fe fb4c 	bl	800088c <__aeabi_ddiv>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f9ae 	bl	8000564 <__aeabi_i2d>
 8002208:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800220c:	f7fe fa14 	bl	8000638 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800221c:	f7fe fa0c 	bl	8000638 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	4b40      	ldr	r3, [pc, #256]	@ (8002330 <compensate_pressure+0x390>)
 800222e:	f7fe fb2d 	bl	800088c <__aeabi_ddiv>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f98f 	bl	8000564 <__aeabi_i2d>
 8002246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800224a:	f7fe f9f5 	bl	8000638 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	4b2e      	ldr	r3, [pc, #184]	@ (8002314 <compensate_pressure+0x374>)
 800225c:	f7fe fb16 	bl	800088c <__aeabi_ddiv>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8002268:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800226c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002270:	f7fe f82c 	bl	80002cc <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4614      	mov	r4, r2
 800227a:	461d      	mov	r5, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f96e 	bl	8000564 <__aeabi_i2d>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4620      	mov	r0, r4
 800228e:	4629      	mov	r1, r5
 8002290:	f7fe f81c 	bl	80002cc <__adddf3>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <compensate_pressure+0x394>)
 80022a2:	f7fe faf3 	bl	800088c <__aeabi_ddiv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022ae:	f7fe f80d 	bl	80002cc <__adddf3>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 80022ba:	a311      	add	r3, pc, #68	@ (adr r3, 8002300 <compensate_pressure+0x360>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022c4:	f7fe fc2a 	bl	8000b1c <__aeabi_dcmplt>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 80022ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8002300 <compensate_pressure+0x360>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 80022d8:	2303      	movs	r3, #3
 80022da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 80022de:	a30a      	add	r3, pc, #40	@ (adr r3, 8002308 <compensate_pressure+0x368>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022e8:	f7fe fc36 	bl	8000b58 <__aeabi_dcmpgt>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	e022      	b.n	8002338 <compensate_pressure+0x398>
 80022f2:	bf00      	nop
 80022f4:	f3af 8000 	nop.w
 80022f8:	00000000 	.word	0x00000000
 80022fc:	40b86a00 	.word	0x40b86a00
 8002300:	00000000 	.word	0x00000000
 8002304:	40dd4c00 	.word	0x40dd4c00
 8002308:	00000000 	.word	0x00000000
 800230c:	40fadb00 	.word	0x40fadb00
 8002310:	40ef4000 	.word	0x40ef4000
 8002314:	40e00000 	.word	0x40e00000
 8002318:	40100000 	.word	0x40100000
 800231c:	40f00000 	.word	0x40f00000
 8002320:	41200000 	.word	0x41200000
 8002324:	3ff00000 	.word	0x3ff00000
 8002328:	41300000 	.word	0x41300000
 800232c:	40b00000 	.word	0x40b00000
 8002330:	41e00000 	.word	0x41e00000
 8002334:	40300000 	.word	0x40300000
 8002338:	d007      	beq.n	800234a <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 800233a:	a309      	add	r3, pc, #36	@ (adr r3, 8002360 <compensate_pressure+0x3c0>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8002344:	2304      	movs	r3, #4
 8002346:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 800234a:	68f9      	ldr	r1, [r7, #12]
 800234c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002350:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8002354:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8002358:	4618      	mov	r0, r3
 800235a:	3730      	adds	r7, #48	@ 0x30
 800235c:	46bd      	mov	sp, r7
 800235e:	bdb0      	pop	{r4, r5, r7, pc}
 8002360:	00000000 	.word	0x00000000
 8002364:	40fadb00 	.word	0x40fadb00

08002368 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db03      	blt.n	8002384 <st_check_boundaries+0x1c>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4a1c      	ldr	r2, [pc, #112]	@ (80023f0 <st_check_boundaries+0x88>)
 8002380:	4293      	cmp	r3, r2
 8002382:	dd09      	ble.n	8002398 <st_check_boundaries+0x30>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db06      	blt.n	8002398 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a18      	ldr	r2, [pc, #96]	@ (80023f0 <st_check_boundaries+0x88>)
 800238e:	4293      	cmp	r3, r2
 8002390:	dc02      	bgt.n	8002398 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8002392:	23fa      	movs	r3, #250	@ 0xfa
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e023      	b.n	80023e0 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db03      	blt.n	80023a6 <st_check_boundaries+0x3e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <st_check_boundaries+0x88>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	dd09      	ble.n	80023ba <st_check_boundaries+0x52>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db06      	blt.n	80023ba <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4a10      	ldr	r2, [pc, #64]	@ (80023f0 <st_check_boundaries+0x88>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	dc02      	bgt.n	80023ba <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 80023b4:	23fb      	movs	r3, #251	@ 0xfb
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e012      	b.n	80023e0 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db03      	blt.n	80023c8 <st_check_boundaries+0x60>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4a0b      	ldr	r2, [pc, #44]	@ (80023f0 <st_check_boundaries+0x88>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	dd09      	ble.n	80023dc <st_check_boundaries+0x74>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db03      	blt.n	80023d6 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <st_check_boundaries+0x88>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	dd02      	ble.n	80023dc <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80023d6:	23f9      	movs	r3, #249	@ 0xf9
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e001      	b.n	80023e0 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	000ffff0 	.word	0x000ffff0

080023f4 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff f837 	bl	8001470 <bmp2_init>
 8002402:	4603      	mov	r3, r0
 8002404:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f91c 	bl	800164a <bmp2_get_config>
 8002412:	4603      	mov	r3, r0
 8002414:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8002416:	2303      	movs	r3, #3
 8002418:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 800241a:	2300      	movs	r3, #0
 800241c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 800241e:	2303      	movs	r3, #3
 8002420:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8002422:	f107 0308 	add.w	r3, r7, #8
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff f94e 	bl	80016ca <bmp2_set_config>
 800242e:	4603      	mov	r3, r0
 8002430:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4619      	mov	r1, r3
 800243a:	2003      	movs	r0, #3
 800243c:	f7ff f980 	bl	8001740 <bmp2_set_power_mode>
 8002440:	4603      	mov	r3, r0
 8002442:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8002444:	f107 0108 	add.w	r1, r7, #8
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fa0a 	bl	8001868 <bmp2_compute_meas_time>
 8002454:	4603      	mov	r3, r0
 8002456:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002458:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	4603      	mov	r3, r0
 8002472:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	6858      	ldr	r0, [r3, #4]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	891b      	ldrh	r3, [r3, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	4619      	mov	r1, r3
 800248c:	f002 fa92 	bl	80049b4 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	f107 010f 	add.w	r1, r7, #15
 8002498:	2305      	movs	r3, #5
 800249a:	2201      	movs	r2, #1
 800249c:	f003 fe87 	bl	80061ae <HAL_SPI_Transmit>
 80024a0:	4603      	mov	r3, r0
 80024a2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	2305      	movs	r3, #5
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	f003 fff2 	bl	8006498 <HAL_SPI_Receive>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	7dbb      	ldrb	r3, [r7, #22]
 80024ba:	4413      	add	r3, r2
 80024bc:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6858      	ldr	r0, [r3, #4]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	891b      	ldrh	r3, [r3, #8]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4619      	mov	r1, r3
 80024ca:	f002 fa73 	bl	80049b4 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80024ce:	7dbb      	ldrb	r3, [r7, #22]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <bmp2_spi_read+0x74>
    iError = -1;
 80024d4:	23ff      	movs	r3, #255	@ 0xff
 80024d6:	75fb      	strb	r3, [r7, #23]

  return iError;
 80024d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	6858      	ldr	r0, [r3, #4]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	891b      	ldrh	r3, [r3, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	4619      	mov	r1, r3
 800250c:	f002 fa52 	bl	80049b4 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	f107 010f 	add.w	r1, r7, #15
 8002518:	2305      	movs	r3, #5
 800251a:	2201      	movs	r2, #1
 800251c:	f003 fe47 	bl	80061ae <HAL_SPI_Transmit>
 8002520:	4603      	mov	r3, r0
 8002522:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	b29a      	uxth	r2, r3
 800252c:	2305      	movs	r3, #5
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	f003 fe3d 	bl	80061ae <HAL_SPI_Transmit>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	7dbb      	ldrb	r3, [r7, #22]
 800253a:	4413      	add	r3, r2
 800253c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	6858      	ldr	r0, [r3, #4]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	891b      	ldrh	r3, [r3, #8]
 8002546:	2201      	movs	r2, #1
 8002548:	4619      	mov	r1, r3
 800254a:	f002 fa33 	bl	80049b4 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800254e:	7dbb      	ldrb	r3, [r7, #22]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <bmp2_spi_write+0x74>
    iError = -1;
 8002554:	23ff      	movs	r3, #255	@ 0xff
 8002556:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002558:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a05      	ldr	r2, [pc, #20]	@ (8002588 <bmp2_delay_us+0x24>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	099b      	lsrs	r3, r3, #6
 8002578:	4618      	mov	r0, r3
 800257a:	f001 fb2f 	bl	8003bdc <HAL_Delay>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	10624dd3 	.word	0x10624dd3

0800258c <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b08b      	sub	sp, #44	@ 0x2c
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002598:	23ff      	movs	r3, #255	@ 0xff
 800259a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	899b      	ldrh	r3, [r3, #12]
 80025a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80025a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f89a 	bl	80016e8 <bmp2_get_status>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80025ba:	f107 0310 	add.w	r3, r7, #16
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f8d2 	bl	800176a <bmp2_get_sensor_data>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 80025cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80025d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <BMP2_ReadData+0xc4>)
 80025e0:	f7fe f954 	bl	800088c <__aeabi_ddiv>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 80025ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80025fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <BMP2_ReadData+0x80>
 8002604:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002608:	2b00      	cmp	r3, #0
 800260a:	dccd      	bgt.n	80025a8 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	68f9      	ldr	r1, [r7, #12]
 8002614:	684c      	ldr	r4, [r1, #4]
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	f7fe fb05 	bl	8000c28 <__aeabi_d2f>
 800261e:	4603      	mov	r3, r0
 8002620:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	68f9      	ldr	r1, [r7, #12]
 800262a:	684c      	ldr	r4, [r1, #4]
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	f7fe fafa 	bl	8000c28 <__aeabi_d2f>
 8002634:	4603      	mov	r3, r0
 8002636:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002640:	729a      	strb	r2, [r3, #10]

  return rslt;
 8002642:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 8002646:	4618      	mov	r0, r3
 8002648:	372c      	adds	r7, #44	@ 0x2c
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	bf00      	nop
 8002650:	40590000 	.word	0x40590000

08002654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <MX_DMA_Init+0x2c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <MX_DMA_Init+0x2c>)
 8002660:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <MX_DMA_Init+0x2c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]

}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	@ 0x30
 8002688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800269a:	4b82      	ldr	r3, [pc, #520]	@ (80028a4 <MX_GPIO_Init+0x220>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a81      	ldr	r2, [pc, #516]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026a0:	f043 0310 	orr.w	r3, r3, #16
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b7f      	ldr	r3, [pc, #508]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b2:	4b7c      	ldr	r3, [pc, #496]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	4a7b      	ldr	r2, [pc, #492]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026b8:	f043 0304 	orr.w	r3, r3, #4
 80026bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026be:	4b79      	ldr	r3, [pc, #484]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ca:	4b76      	ldr	r3, [pc, #472]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a75      	ldr	r2, [pc, #468]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b73      	ldr	r3, [pc, #460]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b70      	ldr	r3, [pc, #448]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a6f      	ldr	r2, [pc, #444]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b6d      	ldr	r3, [pc, #436]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <MX_GPIO_Init+0x220>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	4a69      	ldr	r2, [pc, #420]	@ (80028a4 <MX_GPIO_Init+0x220>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6313      	str	r3, [r2, #48]	@ 0x30
 8002706:	4b67      	ldr	r3, [pc, #412]	@ (80028a4 <MX_GPIO_Init+0x220>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002712:	4b64      	ldr	r3, [pc, #400]	@ (80028a4 <MX_GPIO_Init+0x220>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a63      	ldr	r2, [pc, #396]	@ (80028a4 <MX_GPIO_Init+0x220>)
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b61      	ldr	r3, [pc, #388]	@ (80028a4 <MX_GPIO_Init+0x220>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800272a:	4b5e      	ldr	r3, [pc, #376]	@ (80028a4 <MX_GPIO_Init+0x220>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a5d      	ldr	r2, [pc, #372]	@ (80028a4 <MX_GPIO_Init+0x220>)
 8002730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b5b      	ldr	r3, [pc, #364]	@ (80028a4 <MX_GPIO_Init+0x220>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP2_CSB_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002748:	4857      	ldr	r0, [pc, #348]	@ (80028a8 <MX_GPIO_Init+0x224>)
 800274a:	f002 f933 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002754:	4855      	ldr	r0, [pc, #340]	@ (80028ac <MX_GPIO_Init+0x228>)
 8002756:	f002 f92d 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	2140      	movs	r1, #64	@ 0x40
 800275e:	4854      	ldr	r0, [pc, #336]	@ (80028b0 <MX_GPIO_Init+0x22c>)
 8002760:	f002 f928 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Enable_Pin|LCD_DATA4_Pin|LCD_DATA5_Pin|LCD_DATA6_Pin
 8002764:	2200      	movs	r2, #0
 8002766:	21f8      	movs	r1, #248	@ 0xf8
 8002768:	4852      	ldr	r0, [pc, #328]	@ (80028b4 <MX_GPIO_Init+0x230>)
 800276a:	f002 f923 	bl	80049b4 <HAL_GPIO_WritePin>
                          |LCD_DATA7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BMP2_CSB_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin|LCD_RS_Pin;
 800276e:	f241 0310 	movw	r3, #4112	@ 0x1010
 8002772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002774:	2301      	movs	r3, #1
 8002776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	4619      	mov	r1, r3
 8002786:	4848      	ldr	r0, [pc, #288]	@ (80028a8 <MX_GPIO_Init+0x224>)
 8002788:	f001 ff68 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800278c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002792:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800279c:	f107 031c 	add.w	r3, r7, #28
 80027a0:	4619      	mov	r1, r3
 80027a2:	4845      	ldr	r0, [pc, #276]	@ (80028b8 <MX_GPIO_Init+0x234>)
 80027a4:	f001 ff5a 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80027a8:	2332      	movs	r3, #50	@ 0x32
 80027aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027b8:	230b      	movs	r3, #11
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	483d      	ldr	r0, [pc, #244]	@ (80028b8 <MX_GPIO_Init+0x234>)
 80027c4:	f001 ff4a 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80027c8:	2386      	movs	r3, #134	@ 0x86
 80027ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027d8:	230b      	movs	r3, #11
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	4619      	mov	r1, r3
 80027e2:	4836      	ldr	r0, [pc, #216]	@ (80028bc <MX_GPIO_Init+0x238>)
 80027e4:	f001 ff3a 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80027e8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80027ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	4619      	mov	r1, r3
 8002800:	482a      	ldr	r0, [pc, #168]	@ (80028ac <MX_GPIO_Init+0x228>)
 8002802:	f001 ff2b 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800280a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002818:	230b      	movs	r3, #11
 800281a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	4822      	ldr	r0, [pc, #136]	@ (80028ac <MX_GPIO_Init+0x228>)
 8002824:	f001 ff1a 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002828:	2340      	movs	r3, #64	@ 0x40
 800282a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282c:	2301      	movs	r3, #1
 800282e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002834:	2300      	movs	r3, #0
 8002836:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	4619      	mov	r1, r3
 800283e:	481c      	ldr	r0, [pc, #112]	@ (80028b0 <MX_GPIO_Init+0x22c>)
 8002840:	f001 ff0c 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4816      	ldr	r0, [pc, #88]	@ (80028b0 <MX_GPIO_Init+0x22c>)
 8002858:	f001 ff00 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Enable_Pin LCD_DATA4_Pin LCD_DATA5_Pin LCD_DATA6_Pin
                           LCD_DATA7_Pin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin|LCD_DATA4_Pin|LCD_DATA5_Pin|LCD_DATA6_Pin
 800285c:	23f8      	movs	r3, #248	@ 0xf8
 800285e:	61fb      	str	r3, [r7, #28]
                          |LCD_DATA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002860:	2301      	movs	r3, #1
 8002862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	4619      	mov	r1, r3
 8002872:	4810      	ldr	r0, [pc, #64]	@ (80028b4 <MX_GPIO_Init+0x230>)
 8002874:	f001 fef2 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002878:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800287c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800288a:	230b      	movs	r3, #11
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	4806      	ldr	r0, [pc, #24]	@ (80028b0 <MX_GPIO_Init+0x22c>)
 8002896:	f001 fee1 	bl	800465c <HAL_GPIO_Init>

}
 800289a:	bf00      	nop
 800289c:	3730      	adds	r7, #48	@ 0x30
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40021800 	.word	0x40021800
 80028b4:	40020c00 	.word	0x40020c00
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020000 	.word	0x40020000

080028c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002938 <MX_I2C1_Init+0x78>)
 80028c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80028ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028cc:	4a1b      	ldr	r2, [pc, #108]	@ (800293c <MX_I2C1_Init+0x7c>)
 80028ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028d0:	4b18      	ldr	r3, [pc, #96]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028d6:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028d8:	2201      	movs	r2, #1
 80028da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028dc:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028e2:	4b14      	ldr	r3, [pc, #80]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028e8:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028fa:	480e      	ldr	r0, [pc, #56]	@ (8002934 <MX_I2C1_Init+0x74>)
 80028fc:	f002 f874 	bl	80049e8 <HAL_I2C_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002906:	f000 fb8d 	bl	8003024 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800290a:	2100      	movs	r1, #0
 800290c:	4809      	ldr	r0, [pc, #36]	@ (8002934 <MX_I2C1_Init+0x74>)
 800290e:	f002 f907 	bl	8004b20 <HAL_I2CEx_ConfigAnalogFilter>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002918:	f000 fb84 	bl	8003024 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800291c:	2100      	movs	r1, #0
 800291e:	4805      	ldr	r0, [pc, #20]	@ (8002934 <MX_I2C1_Init+0x74>)
 8002920:	f002 f949 	bl	8004bb6 <HAL_I2CEx_ConfigDigitalFilter>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800292a:	f000 fb7b 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000250 	.word	0x20000250
 8002938:	40005400 	.word	0x40005400
 800293c:	00808cd2 	.word	0x00808cd2

08002940 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0aa      	sub	sp, #168	@ 0xa8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	2284      	movs	r2, #132	@ 0x84
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f009 f86a 	bl	800ba3a <memset>
  if(i2cHandle->Instance==I2C1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a22      	ldr	r2, [pc, #136]	@ (80029f4 <HAL_I2C_MspInit+0xb4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d13c      	bne.n	80029ea <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002970:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002974:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002976:	2300      	movs	r3, #0
 8002978:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800297a:	f107 0310 	add.w	r3, r7, #16
 800297e:	4618      	mov	r0, r3
 8002980:	f002 ff7a 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800298a:	f000 fb4b 	bl	8003024 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800298e:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <HAL_I2C_MspInit+0xb8>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	4a19      	ldr	r2, [pc, #100]	@ (80029f8 <HAL_I2C_MspInit+0xb8>)
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	6313      	str	r3, [r2, #48]	@ 0x30
 800299a:	4b17      	ldr	r3, [pc, #92]	@ (80029f8 <HAL_I2C_MspInit+0xb8>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ae:	2312      	movs	r3, #18
 80029b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029c0:	2304      	movs	r3, #4
 80029c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80029ca:	4619      	mov	r1, r3
 80029cc:	480b      	ldr	r0, [pc, #44]	@ (80029fc <HAL_I2C_MspInit+0xbc>)
 80029ce:	f001 fe45 	bl	800465c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029d2:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_I2C_MspInit+0xb8>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <HAL_I2C_MspInit+0xb8>)
 80029d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_I2C_MspInit+0xb8>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029ea:	bf00      	nop
 80029ec:	37a8      	adds	r7, #168	@ 0xa8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40005400 	.word	0x40005400
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020400 	.word	0x40020400

08002a00 <calculate_PID>:
	float prev_u_I;

};


float calculate_PID(struct Controller *PID, float set_temp, float meas_temp){
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b08a      	sub	sp, #40	@ 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a0c:	edc7 0a01 	vstr	s1, [r7, #4]
	float u = 0;
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
	float error;
	float u_P, u_I , u_D;

	error = set_temp - meas_temp;
 8002a16:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a22:	edc7 7a08 	vstr	s15, [r7, #32]

	// Proportional
	u_P = PID->Kp * error;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a34:	edc7 7a07 	vstr	s15, [r7, #28]

	// Integral
	u_I = PID->Ki * PID->Tp / 2.0 * (error + PID->prev_error) + PID->prev_u_I;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a48:	ee17 0a90 	vmov	r0, s15
 8002a4c:	f7fd fd9c 	bl	8000588 <__aeabi_f2d>
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a58:	f7fd ff18 	bl	800088c <__aeabi_ddiv>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4614      	mov	r4, r2
 8002a62:	461d      	mov	r5, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	ee17 0a90 	vmov	r0, s15
 8002a76:	f7fd fd87 	bl	8000588 <__aeabi_f2d>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4620      	mov	r0, r4
 8002a80:	4629      	mov	r1, r5
 8002a82:	f7fd fdd9 	bl	8000638 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4614      	mov	r4, r2
 8002a8c:	461d      	mov	r5, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fd78 	bl	8000588 <__aeabi_f2d>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	f7fd fc14 	bl	80002cc <__adddf3>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f8bc 	bl	8000c28 <__aeabi_d2f>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	61bb      	str	r3, [r7, #24]
	PID->prev_u_I = u_I;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	615a      	str	r2, [r3, #20]

	// Derivative
	u_D = (error - PID->prev_error) / PID->Tp;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ac0:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ac4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad2:	edc7 7a05 	vstr	s15, [r7, #20]

	PID->prev_error = error;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a3a      	ldr	r2, [r7, #32]
 8002ada:	611a      	str	r2, [r3, #16]

	// Sum of P, I and D components
	u = u_P + u_I + u_D;
 8002adc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ae0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return u;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	ee07 3a90 	vmov	s15, r3
}
 8002afa:	eeb0 0a67 	vmov.f32	s0, s15
 8002afe:	3728      	adds	r7, #40	@ 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}

08002b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b04:	b5b0      	push	{r4, r5, r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b0a:	f001 f80a 	bl	8003b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b0e:	f000 f91b 	bl	8002d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b12:	f7ff fdb7 	bl	8002684 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b16:	f7ff fd9d 	bl	8002654 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b1a:	f7ff fed1 	bl	80028c0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002b1e:	f000 fe6d 	bl	80037fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002b22:	f000 ff2d 	bl	8003980 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8002b26:	f000 fc61 	bl	80033ec <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b2a:	f000 fd0b 	bl	8003544 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b2e:	f000 fd59 	bl	80035e4 <MX_TIM4_Init>
  MX_SPI4_Init();
 8002b32:	f000 fa7d 	bl	8003030 <MX_SPI4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002b36:	f000 f96f 	bl	8002e18 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // TIM1 used used for controlling MOSFET with PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	486a      	ldr	r0, [pc, #424]	@ (8002ce8 <main+0x1e4>)
 8002b3e:	f004 fc4f 	bl	80073e0 <HAL_TIM_PWM_Start>

  // TIM3 used for sampling temperature and PID controller
  HAL_TIM_Base_Start_IT(&htim3);
 8002b42:	486a      	ldr	r0, [pc, #424]	@ (8002cec <main+0x1e8>)
 8002b44:	f004 fb72 	bl	800722c <HAL_TIM_Base_Start_IT>

  // TIM4 used for encoder
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002b48:	213c      	movs	r1, #60	@ 0x3c
 8002b4a:	4869      	ldr	r0, [pc, #420]	@ (8002cf0 <main+0x1ec>)
 8002b4c:	f004 fde8 	bl	8007720 <HAL_TIM_Encoder_Start>

  // BMP280 (temperature sensor) init
  BMP2_Init(&bmp2dev);
 8002b50:	4868      	ldr	r0, [pc, #416]	@ (8002cf4 <main+0x1f0>)
 8002b52:	f7ff fc4f 	bl	80023f4 <BMP2_Init>

  // Prevents from bugging set_temp_f when encoder counter value goes through 0
  htim4.Instance->CNT = 65535 / 2;
 8002b56:	4b66      	ldr	r3, [pc, #408]	@ (8002cf0 <main+0x1ec>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24

  LCD_init();
 8002b60:	f7fe fa7e 	bl	8001060 <LCD_init>
  LCD_write_command(LCD_CLEAR_INSTRUCTION);
 8002b64:	2001      	movs	r0, #1
 8002b66:	f7fe fbd8 	bl	800131a <LCD_write_command>
  LCD_write_command(LCD_HOME_INSTRUCTION);
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f7fe fbd5 	bl	800131a <LCD_write_command>
  HAL_Delay(2000);
 8002b70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b74:	f001 f832 	bl	8003bdc <HAL_Delay>

  // Initialize PID Controller parameters and init data
  PID1.Kp = 0.03928;
 8002b78:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf8 <main+0x1f4>)
 8002b7a:	4a60      	ldr	r2, [pc, #384]	@ (8002cfc <main+0x1f8>)
 8002b7c:	601a      	str	r2, [r3, #0]
  PID1.Ki = 0.0002692;
 8002b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf8 <main+0x1f4>)
 8002b80:	4a5f      	ldr	r2, [pc, #380]	@ (8002d00 <main+0x1fc>)
 8002b82:	605a      	str	r2, [r3, #4]
  PID1.Kd = 0.01957;
 8002b84:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf8 <main+0x1f4>)
 8002b86:	4a5f      	ldr	r2, [pc, #380]	@ (8002d04 <main+0x200>)
 8002b88:	609a      	str	r2, [r3, #8]
  PID1.Tp = 1;
 8002b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf8 <main+0x1f4>)
 8002b8c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b90:	60da      	str	r2, [r3, #12]
  PID1.prev_error = 0;
 8002b92:	4b59      	ldr	r3, [pc, #356]	@ (8002cf8 <main+0x1f4>)
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  PID1.prev_u_I = 0;
 8002b9a:	4b57      	ldr	r3, [pc, #348]	@ (8002cf8 <main+0x1f4>)
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	615a      	str	r2, [r3, #20]

  // Get setpoint value from user
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)get_UART, 10);
 8002ba2:	220a      	movs	r2, #10
 8002ba4:	4958      	ldr	r1, [pc, #352]	@ (8002d08 <main+0x204>)
 8002ba6:	4859      	ldr	r0, [pc, #356]	@ (8002d0c <main+0x208>)
 8002ba8:	f007 f842 	bl	8009c30 <HAL_UARTEx_ReceiveToIdle_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // ENCODER
	  enc_uint = __HAL_TIM_GET_COUNTER(&htim4);	// enc_uint = htim4.Instance->CNT;
 8002bac:	4b50      	ldr	r3, [pc, #320]	@ (8002cf0 <main+0x1ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	4a57      	ldr	r2, [pc, #348]	@ (8002d10 <main+0x20c>)
 8002bb4:	6013      	str	r3, [r2, #0]
	  enc_diff_int = enc_uint - prev_enc_uint;
 8002bb6:	4b56      	ldr	r3, [pc, #344]	@ (8002d10 <main+0x20c>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b56      	ldr	r3, [pc, #344]	@ (8002d14 <main+0x210>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b55      	ldr	r3, [pc, #340]	@ (8002d18 <main+0x214>)
 8002bc4:	601a      	str	r2, [r3, #0]
	  if(enc_diff_int >= 2 || enc_diff_int <= -2){
 8002bc6:	4b54      	ldr	r3, [pc, #336]	@ (8002d18 <main+0x214>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	dc04      	bgt.n	8002bd8 <main+0xd4>
 8002bce:	4b52      	ldr	r3, [pc, #328]	@ (8002d18 <main+0x214>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	da42      	bge.n	8002c5e <main+0x15a>
		  enc_diff_int /= 2;
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002d18 <main+0x214>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	da00      	bge.n	8002be2 <main+0xde>
 8002be0:	3301      	adds	r3, #1
 8002be2:	105b      	asrs	r3, r3, #1
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b4c      	ldr	r3, [pc, #304]	@ (8002d18 <main+0x214>)
 8002be8:	601a      	str	r2, [r3, #0]
		  set_temp_f += 0.5 * enc_diff_int;
 8002bea:	4b4c      	ldr	r3, [pc, #304]	@ (8002d1c <main+0x218>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fcca 	bl	8000588 <__aeabi_f2d>
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	460d      	mov	r5, r1
 8002bf8:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <main+0x214>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fcb1 	bl	8000564 <__aeabi_i2d>
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	4b46      	ldr	r3, [pc, #280]	@ (8002d20 <main+0x21c>)
 8002c08:	f7fd fd16 	bl	8000638 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4620      	mov	r0, r4
 8002c12:	4629      	mov	r1, r5
 8002c14:	f7fd fb5a 	bl	80002cc <__adddf3>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f7fe f802 	bl	8000c28 <__aeabi_d2f>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4a3d      	ldr	r2, [pc, #244]	@ (8002d1c <main+0x218>)
 8002c28:	6013      	str	r3, [r2, #0]
		  if(set_temp_f > 65) set_temp_f = 65;
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d1c <main+0x218>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002d24 <main+0x220>
 8002c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	dd02      	ble.n	8002c44 <main+0x140>
 8002c3e:	4b37      	ldr	r3, [pc, #220]	@ (8002d1c <main+0x218>)
 8002c40:	4a39      	ldr	r2, [pc, #228]	@ (8002d28 <main+0x224>)
 8002c42:	601a      	str	r2, [r3, #0]
		  if(set_temp_f < 20) set_temp_f = 20;
 8002c44:	4b35      	ldr	r3, [pc, #212]	@ (8002d1c <main+0x218>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c56:	d502      	bpl.n	8002c5e <main+0x15a>
 8002c58:	4b30      	ldr	r3, [pc, #192]	@ (8002d1c <main+0x218>)
 8002c5a:	4a34      	ldr	r2, [pc, #208]	@ (8002d2c <main+0x228>)
 8002c5c:	601a      	str	r2, [r3, #0]
	  }
	  prev_enc_uint = enc_uint;
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d10 <main+0x20c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2c      	ldr	r2, [pc, #176]	@ (8002d14 <main+0x210>)
 8002c64:	6013      	str	r3, [r2, #0]

	  // LCD
	  snprintf(current_temp_ch_LCD, LCD_MAXIMUM_LINE_LENGTH, "Temp:  %.2f", current_temp_f);
 8002c66:	4b32      	ldr	r3, [pc, #200]	@ (8002d30 <main+0x22c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc8c 	bl	8000588 <__aeabi_f2d>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	e9cd 2300 	strd	r2, r3, [sp]
 8002c78:	4a2e      	ldr	r2, [pc, #184]	@ (8002d34 <main+0x230>)
 8002c7a:	2110      	movs	r1, #16
 8002c7c:	482e      	ldr	r0, [pc, #184]	@ (8002d38 <main+0x234>)
 8002c7e:	f008 fe45 	bl	800b90c <sniprintf>
	  LCD_write_text(current_temp_ch_LCD);
 8002c82:	482d      	ldr	r0, [pc, #180]	@ (8002d38 <main+0x234>)
 8002c84:	f7fe fb84 	bl	8001390 <LCD_write_text>
	  LCD_write_data(LCD_CHAR_DEGREE);
 8002c88:	2006      	movs	r0, #6
 8002c8a:	f7fe fb59 	bl	8001340 <LCD_write_data>
	  LCD_write_char('C');
 8002c8e:	2043      	movs	r0, #67	@ 0x43
 8002c90:	f7fe fb66 	bl	8001360 <LCD_write_char>
	  snprintf(set_temp_ch_LCD, LCD_MAXIMUM_LINE_LENGTH, "Set T: %.2f", set_temp_f);
 8002c94:	4b21      	ldr	r3, [pc, #132]	@ (8002d1c <main+0x218>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fc75 	bl	8000588 <__aeabi_f2d>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	e9cd 2300 	strd	r2, r3, [sp]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	@ (8002d3c <main+0x238>)
 8002ca8:	2110      	movs	r1, #16
 8002caa:	4825      	ldr	r0, [pc, #148]	@ (8002d40 <main+0x23c>)
 8002cac:	f008 fe2e 	bl	800b90c <sniprintf>
	  LCD_goto_line(1);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7fe fba9 	bl	8001408 <LCD_goto_line>
	  LCD_write_text(set_temp_ch_LCD);
 8002cb6:	4822      	ldr	r0, [pc, #136]	@ (8002d40 <main+0x23c>)
 8002cb8:	f7fe fb6a 	bl	8001390 <LCD_write_text>
	  LCD_write_data(LCD_CHAR_DEGREE);
 8002cbc:	2006      	movs	r0, #6
 8002cbe:	f7fe fb3f 	bl	8001340 <LCD_write_data>
	  LCD_write_char('C');
 8002cc2:	2043      	movs	r0, #67	@ 0x43
 8002cc4:	f7fe fb4c 	bl	8001360 <LCD_write_char>
	  HAL_Delay(100);
 8002cc8:	2064      	movs	r0, #100	@ 0x64
 8002cca:	f000 ff87 	bl	8003bdc <HAL_Delay>
	  LCD_write_text("                ");
 8002cce:	481d      	ldr	r0, [pc, #116]	@ (8002d44 <main+0x240>)
 8002cd0:	f7fe fb5e 	bl	8001390 <LCD_write_text>
	  LCD_write_command(LCD_HOME_INSTRUCTION);
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f7fe fb20 	bl	800131a <LCD_write_command>

	  // Reset data from UART
	  memset(get_UART, 0, 10);
 8002cda:	220a      	movs	r2, #10
 8002cdc:	2100      	movs	r1, #0
 8002cde:	480a      	ldr	r0, [pc, #40]	@ (8002d08 <main+0x204>)
 8002ce0:	f008 feab 	bl	800ba3a <memset>
	  enc_uint = __HAL_TIM_GET_COUNTER(&htim4);	// enc_uint = htim4.Instance->CNT;
 8002ce4:	e762      	b.n	8002bac <main+0xa8>
 8002ce6:	bf00      	nop
 8002ce8:	200003b4 	.word	0x200003b4
 8002cec:	20000400 	.word	0x20000400
 8002cf0:	2000044c 	.word	0x2000044c
 8002cf4:	20000018 	.word	0x20000018
 8002cf8:	20000334 	.word	0x20000334
 8002cfc:	3d20e411 	.word	0x3d20e411
 8002d00:	398d236a 	.word	0x398d236a
 8002d04:	3ca05144 	.word	0x3ca05144
 8002d08:	20000328 	.word	0x20000328
 8002d0c:	20000498 	.word	0x20000498
 8002d10:	2000031c 	.word	0x2000031c
 8002d14:	20000058 	.word	0x20000058
 8002d18:	20000320 	.word	0x20000320
 8002d1c:	20000054 	.word	0x20000054
 8002d20:	3fe00000 	.word	0x3fe00000
 8002d24:	42820000 	.word	0x42820000
 8002d28:	42820000 	.word	0x42820000
 8002d2c:	41a00000 	.word	0x41a00000
 8002d30:	200002a4 	.word	0x200002a4
 8002d34:	0800e578 	.word	0x0800e578
 8002d38:	200002c8 	.word	0x200002c8
 8002d3c:	0800e584 	.word	0x0800e584
 8002d40:	20000300 	.word	0x20000300
 8002d44:	0800e590 	.word	0x0800e590

08002d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b094      	sub	sp, #80	@ 0x50
 8002d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d4e:	f107 0320 	add.w	r3, r7, #32
 8002d52:	2230      	movs	r2, #48	@ 0x30
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f008 fe6f 	bl	800ba3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d5c:	f107 030c 	add.w	r3, r7, #12
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d6c:	f002 f8aa 	bl	8004ec4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b27      	ldr	r3, [pc, #156]	@ (8002e10 <SystemClock_Config+0xc8>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	4a26      	ldr	r2, [pc, #152]	@ (8002e10 <SystemClock_Config+0xc8>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7c:	4b24      	ldr	r3, [pc, #144]	@ (8002e10 <SystemClock_Config+0xc8>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d88:	4b22      	ldr	r3, [pc, #136]	@ (8002e14 <SystemClock_Config+0xcc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002d90:	4a20      	ldr	r2, [pc, #128]	@ (8002e14 <SystemClock_Config+0xcc>)
 8002d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <SystemClock_Config+0xcc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002da8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dae:	2302      	movs	r3, #2
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002db2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002db8:	2304      	movs	r3, #4
 8002dba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002dbc:	2348      	movs	r3, #72	@ 0x48
 8002dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc8:	f107 0320 	add.w	r3, r7, #32
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 f889 	bl	8004ee4 <HAL_RCC_OscConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002dd8:	f000 f924 	bl	8003024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ddc:	230f      	movs	r3, #15
 8002dde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002de0:	2302      	movs	r3, #2
 8002de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 fb17 	bl	800542c <HAL_RCC_ClockConfig>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002e04:	f000 f90e 	bl	8003024 <Error_Handler>
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3750      	adds	r7, #80	@ 0x50
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40007000 	.word	0x40007000

08002e18 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	2027      	movs	r0, #39	@ 0x27
 8002e22:	f000 ffda 	bl	8003dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e26:	2027      	movs	r0, #39	@ 0x27
 8002e28:	f000 fff3 	bl	8003e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	200c      	movs	r0, #12
 8002e32:	f000 ffd2 	bl	8003dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002e36:	200c      	movs	r0, #12
 8002e38:	f000 ffeb 	bl	8003e12 <HAL_NVIC_EnableIRQ>
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// TIMERS callback handling
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	ed2d 8b02 	vpush	{d8}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a40      	ldr	r2, [pc, #256]	@ (8002f54 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d178      	bne.n	8002f48 <HAL_TIM_PeriodElapsedCallback+0x108>
		// TEMPERATURE
		BMP2_ReadData(&bmp2dev, &pressure, &current_temp_f);
 8002e56:	4a40      	ldr	r2, [pc, #256]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002e58:	4940      	ldr	r1, [pc, #256]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002e5a:	4841      	ldr	r0, [pc, #260]	@ (8002f60 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002e5c:	f7ff fb96 	bl	800258c <BMP2_ReadData>
		current_temp_f=20;
 8002e60:	4b3d      	ldr	r3, [pc, #244]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002e62:	4a40      	ldr	r2, [pc, #256]	@ (8002f64 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002e64:	601a      	str	r2, [r3, #0]
		sprintf(current_temp_ch_UART, "Current temperature: %.2f\n\r", current_temp_f);
 8002e66:	4b3c      	ldr	r3, [pc, #240]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fb8c 	bl	8000588 <__aeabi_f2d>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	493c      	ldr	r1, [pc, #240]	@ (8002f68 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002e76:	483d      	ldr	r0, [pc, #244]	@ (8002f6c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002e78:	f008 fd7c 	bl	800b974 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)current_temp_ch_UART, sizeof(current_temp_ch_UART)-1, 1000);
 8002e7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e80:	221c      	movs	r2, #28
 8002e82:	493a      	ldr	r1, [pc, #232]	@ (8002f6c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002e84:	483a      	ldr	r0, [pc, #232]	@ (8002f70 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002e86:	f005 fd29 	bl	80088dc <HAL_UART_Transmit>

		sprintf((char*)set_temp_ch_UART, "Set temperature: %.2f\n\r", set_temp_f);
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f74 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb7a 	bl	8000588 <__aeabi_f2d>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4937      	ldr	r1, [pc, #220]	@ (8002f78 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002e9a:	4838      	ldr	r0, [pc, #224]	@ (8002f7c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002e9c:	f008 fd6a 	bl	800b974 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)set_temp_ch_UART, strlen(set_temp_ch_UART), 1000);
 8002ea0:	4836      	ldr	r0, [pc, #216]	@ (8002f7c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002ea2:	f7fd fa05 	bl	80002b0 <strlen>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eae:	4933      	ldr	r1, [pc, #204]	@ (8002f7c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002eb0:	482f      	ldr	r0, [pc, #188]	@ (8002f70 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002eb2:	f005 fd13 	bl	80088dc <HAL_UART_Transmit>

		pwm_duty_f = (htim1.Init.Period * calculate_PID(&PID1, set_temp_f, current_temp_f));
 8002eb6:	4b32      	ldr	r3, [pc, #200]	@ (8002f80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8002f74 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002eca:	ed93 7a00 	vldr	s14, [r3]
 8002ece:	eef0 0a47 	vmov.f32	s1, s14
 8002ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed6:	482b      	ldr	r0, [pc, #172]	@ (8002f84 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002ed8:	f7ff fd92 	bl	8002a00 <calculate_PID>
 8002edc:	eef0 7a40 	vmov.f32	s15, s0
 8002ee0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002ee4:	4b28      	ldr	r3, [pc, #160]	@ (8002f88 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002ee6:	edc3 7a00 	vstr	s15, [r3]

		// Saturation
		if(pwm_duty_f < 0.0) pwm_duty_u = 0;
 8002eea:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef8:	d503      	bpl.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0xc2>
 8002efa:	4b24      	ldr	r3, [pc, #144]	@ (8002f8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	e01d      	b.n	8002f3e <HAL_TIM_PeriodElapsedCallback+0xfe>
		else if(pwm_duty_f > htim1.Init.Period) pwm_duty_u = htim1.Init.Period;
 8002f02:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1c:	d505      	bpl.n	8002f2a <HAL_TIM_PeriodElapsedCallback+0xea>
 8002f1e:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	e009      	b.n	8002f3e <HAL_TIM_PeriodElapsedCallback+0xfe>
		else pwm_duty_u = (uint16_t) pwm_duty_f;
 8002f2a:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f34:	ee17 3a90 	vmov	r3, s15
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b14      	ldr	r3, [pc, #80]	@ (8002f8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002f3c:	801a      	strh	r2, [r3, #0]

//		pwm_duty_u = htim1.Init.Period;		// 100% PWM duty for creating model
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty_u);
 8002f3e:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	635a      	str	r2, [r3, #52]	@ 0x34

	}

}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	ecbd 8b02 	vpop	{d8}
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40000400 	.word	0x40000400
 8002f58:	200002a4 	.word	0x200002a4
 8002f5c:	20000318 	.word	0x20000318
 8002f60:	20000018 	.word	0x20000018
 8002f64:	41a00000 	.word	0x41a00000
 8002f68:	0800e5a4 	.word	0x0800e5a4
 8002f6c:	200002a8 	.word	0x200002a8
 8002f70:	20000498 	.word	0x20000498
 8002f74:	20000054 	.word	0x20000054
 8002f78:	0800e5c0 	.word	0x0800e5c0
 8002f7c:	200002e8 	.word	0x200002e8
 8002f80:	200003b4 	.word	0x200003b4
 8002f84:	20000334 	.word	0x20000334
 8002f88:	20000324 	.word	0x20000324
 8002f8c:	2000005c 	.word	0x2000005c

08002f90 <HAL_UARTEx_RxEventCallback>:

// UART callback handling
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART3){
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <HAL_UARTEx_RxEventCallback+0x78>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d12c      	bne.n	8003000 <HAL_UARTEx_RxEventCallback+0x70>
		float tmp = atof(get_UART);
 8002fa6:	4819      	ldr	r0, [pc, #100]	@ (800300c <HAL_UARTEx_RxEventCallback+0x7c>)
 8002fa8:	f007 f985 	bl	800a2b6 <atof>
 8002fac:	ec53 2b10 	vmov	r2, r3, d0
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fd fe38 	bl	8000c28 <__aeabi_d2f>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	60fb      	str	r3, [r7, #12]
		if(tmp < 20) set_temp_f = 20;
 8002fbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fc0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	d503      	bpl.n	8002fd6 <HAL_UARTEx_RxEventCallback+0x46>
 8002fce:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <HAL_UARTEx_RxEventCallback+0x80>)
 8002fd0:	4a10      	ldr	r2, [pc, #64]	@ (8003014 <HAL_UARTEx_RxEventCallback+0x84>)
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e00f      	b.n	8002ff6 <HAL_UARTEx_RxEventCallback+0x66>
		else if(tmp > 65) set_temp_f = 65;
 8002fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fda:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003018 <HAL_UARTEx_RxEventCallback+0x88>
 8002fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe6:	dd03      	ble.n	8002ff0 <HAL_UARTEx_RxEventCallback+0x60>
 8002fe8:	4b09      	ldr	r3, [pc, #36]	@ (8003010 <HAL_UARTEx_RxEventCallback+0x80>)
 8002fea:	4a0c      	ldr	r2, [pc, #48]	@ (800301c <HAL_UARTEx_RxEventCallback+0x8c>)
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e002      	b.n	8002ff6 <HAL_UARTEx_RxEventCallback+0x66>
		else set_temp_f = tmp;
 8002ff0:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <HAL_UARTEx_RxEventCallback+0x80>)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6013      	str	r3, [r2, #0]

		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)get_UART, 10);
 8002ff6:	220a      	movs	r2, #10
 8002ff8:	4904      	ldr	r1, [pc, #16]	@ (800300c <HAL_UARTEx_RxEventCallback+0x7c>)
 8002ffa:	4809      	ldr	r0, [pc, #36]	@ (8003020 <HAL_UARTEx_RxEventCallback+0x90>)
 8002ffc:	f006 fe18 	bl	8009c30 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40004800 	.word	0x40004800
 800300c:	20000328 	.word	0x20000328
 8003010:	20000054 	.word	0x20000054
 8003014:	41a00000 	.word	0x41a00000
 8003018:	42820000 	.word	0x42820000
 800301c:	42820000 	.word	0x42820000
 8003020:	20000498 	.word	0x20000498

08003024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003028:	b672      	cpsid	i
}
 800302a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <Error_Handler+0x8>

08003030 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003034:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <MX_SPI4_Init+0x74>)
 8003036:	4a1c      	ldr	r2, [pc, #112]	@ (80030a8 <MX_SPI4_Init+0x78>)
 8003038:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800303a:	4b1a      	ldr	r3, [pc, #104]	@ (80030a4 <MX_SPI4_Init+0x74>)
 800303c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003040:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003042:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <MX_SPI4_Init+0x74>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003048:	4b16      	ldr	r3, [pc, #88]	@ (80030a4 <MX_SPI4_Init+0x74>)
 800304a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800304e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003050:	4b14      	ldr	r3, [pc, #80]	@ (80030a4 <MX_SPI4_Init+0x74>)
 8003052:	2202      	movs	r2, #2
 8003054:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003056:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <MX_SPI4_Init+0x74>)
 8003058:	2201      	movs	r2, #1
 800305a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <MX_SPI4_Init+0x74>)
 800305e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003062:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003064:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <MX_SPI4_Init+0x74>)
 8003066:	2210      	movs	r2, #16
 8003068:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800306a:	4b0e      	ldr	r3, [pc, #56]	@ (80030a4 <MX_SPI4_Init+0x74>)
 800306c:	2200      	movs	r2, #0
 800306e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003070:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <MX_SPI4_Init+0x74>)
 8003072:	2200      	movs	r2, #0
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003076:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <MX_SPI4_Init+0x74>)
 8003078:	2200      	movs	r2, #0
 800307a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <MX_SPI4_Init+0x74>)
 800307e:	2207      	movs	r2, #7
 8003080:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003082:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <MX_SPI4_Init+0x74>)
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <MX_SPI4_Init+0x74>)
 800308a:	2200      	movs	r2, #0
 800308c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800308e:	4805      	ldr	r0, [pc, #20]	@ (80030a4 <MX_SPI4_Init+0x74>)
 8003090:	f002 ffe2 	bl	8006058 <HAL_SPI_Init>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800309a:	f7ff ffc3 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	2000034c 	.word	0x2000034c
 80030a8:	40013400 	.word	0x40013400

080030ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <HAL_SPI_MspInit+0x8c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d12f      	bne.n	800312e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80030ce:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <HAL_SPI_MspInit+0x90>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <HAL_SPI_MspInit+0x90>)
 80030d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030da:	4b18      	ldr	r3, [pc, #96]	@ (800313c <HAL_SPI_MspInit+0x90>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030e6:	4b15      	ldr	r3, [pc, #84]	@ (800313c <HAL_SPI_MspInit+0x90>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	4a14      	ldr	r2, [pc, #80]	@ (800313c <HAL_SPI_MspInit+0x90>)
 80030ec:	f043 0310 	orr.w	r3, r3, #16
 80030f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f2:	4b12      	ldr	r3, [pc, #72]	@ (800313c <HAL_SPI_MspInit+0x90>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP2_SCK_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 80030fe:	2364      	movs	r3, #100	@ 0x64
 8003100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310a:	2303      	movs	r3, #3
 800310c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800310e:	2305      	movs	r3, #5
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	4619      	mov	r1, r3
 8003118:	4809      	ldr	r0, [pc, #36]	@ (8003140 <HAL_SPI_MspInit+0x94>)
 800311a:	f001 fa9f 	bl	800465c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	2054      	movs	r0, #84	@ 0x54
 8003124:	f000 fe59 	bl	8003dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003128:	2054      	movs	r0, #84	@ 0x54
 800312a:	f000 fe72 	bl	8003e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800312e:	bf00      	nop
 8003130:	3728      	adds	r7, #40	@ 0x28
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40013400 	.word	0x40013400
 800313c:	40023800 	.word	0x40023800
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <HAL_MspInit+0x44>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	4a0e      	ldr	r2, [pc, #56]	@ (8003188 <HAL_MspInit+0x44>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	@ 0x40
 8003156:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <HAL_MspInit+0x44>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003162:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <HAL_MspInit+0x44>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	4a08      	ldr	r2, [pc, #32]	@ (8003188 <HAL_MspInit+0x44>)
 8003168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800316c:	6453      	str	r3, [r2, #68]	@ 0x44
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_MspInit+0x44>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <NMI_Handler+0x4>

08003194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <HardFault_Handler+0x4>

0800319c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <MemManage_Handler+0x4>

080031a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <BusFault_Handler+0x4>

080031ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <UsageFault_Handler+0x4>

080031b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e2:	f000 fcdb 	bl	8003b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80031f0:	4802      	ldr	r0, [pc, #8]	@ (80031fc <DMA1_Stream1_IRQHandler+0x10>)
 80031f2:	f000 ffc9 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000520 	.word	0x20000520

08003200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003204:	4802      	ldr	r0, [pc, #8]	@ (8003210 <TIM3_IRQHandler+0x10>)
 8003206:	f004 fb19 	bl	800783c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000400 	.word	0x20000400

08003214 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003218:	4802      	ldr	r0, [pc, #8]	@ (8003224 <USART3_IRQHandler+0x10>)
 800321a:	f005 fbe9 	bl	80089f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000498 	.word	0x20000498

08003228 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800322c:	4802      	ldr	r0, [pc, #8]	@ (8003238 <SPI4_IRQHandler+0x10>)
 800322e:	f003 fc8d 	bl	8006b4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	2000034c 	.word	0x2000034c

0800323c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return 1;
 8003240:	2301      	movs	r3, #1
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_kill>:

int _kill(int pid, int sig)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003256:	f008 fc55 	bl	800bb04 <__errno>
 800325a:	4603      	mov	r3, r0
 800325c:	2216      	movs	r2, #22
 800325e:	601a      	str	r2, [r3, #0]
  return -1;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <_exit>:

void _exit (int status)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003274:	f04f 31ff 	mov.w	r1, #4294967295
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ffe7 	bl	800324c <_kill>
  while (1) {}    /* Make sure we hang here */
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <_exit+0x12>

08003282 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e00a      	b.n	80032aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003294:	f3af 8000 	nop.w
 8003298:	4601      	mov	r1, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	60ba      	str	r2, [r7, #8]
 80032a0:	b2ca      	uxtb	r2, r1
 80032a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3301      	adds	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	dbf0      	blt.n	8003294 <_read+0x12>
  }

  return len;
 80032b2:	687b      	ldr	r3, [r7, #4]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e009      	b.n	80032e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	60ba      	str	r2, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3301      	adds	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	dbf1      	blt.n	80032ce <_write+0x12>
  }
  return len;
 80032ea:	687b      	ldr	r3, [r7, #4]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_close>:

int _close(int file)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800331c:	605a      	str	r2, [r3, #4]
  return 0;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <_isatty>:

int _isatty(int file)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003334:	2301      	movs	r3, #1
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003364:	4a14      	ldr	r2, [pc, #80]	@ (80033b8 <_sbrk+0x5c>)
 8003366:	4b15      	ldr	r3, [pc, #84]	@ (80033bc <_sbrk+0x60>)
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003370:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <_sbrk+0x64>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003378:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <_sbrk+0x64>)
 800337a:	4a12      	ldr	r2, [pc, #72]	@ (80033c4 <_sbrk+0x68>)
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800337e:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <_sbrk+0x64>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	429a      	cmp	r2, r3
 800338a:	d207      	bcs.n	800339c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800338c:	f008 fbba 	bl	800bb04 <__errno>
 8003390:	4603      	mov	r3, r0
 8003392:	220c      	movs	r2, #12
 8003394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	e009      	b.n	80033b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800339c:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <_sbrk+0x64>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <_sbrk+0x64>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	4a05      	ldr	r2, [pc, #20]	@ (80033c0 <_sbrk+0x64>)
 80033ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20050000 	.word	0x20050000
 80033bc:	00000400 	.word	0x00000400
 80033c0:	200003b0 	.word	0x200003b0
 80033c4:	20000bb0 	.word	0x20000bb0

080033c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <SystemInit+0x20>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d2:	4a05      	ldr	r2, [pc, #20]	@ (80033e8 <SystemInit+0x20>)
 80033d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b09a      	sub	sp, #104	@ 0x68
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003400:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800340c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
 800341c:	615a      	str	r2, [r3, #20]
 800341e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	222c      	movs	r2, #44	@ 0x2c
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f008 fb07 	bl	800ba3a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800342c:	4b43      	ldr	r3, [pc, #268]	@ (800353c <MX_TIM1_Init+0x150>)
 800342e:	4a44      	ldr	r2, [pc, #272]	@ (8003540 <MX_TIM1_Init+0x154>)
 8003430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8003432:	4b42      	ldr	r3, [pc, #264]	@ (800353c <MX_TIM1_Init+0x150>)
 8003434:	2247      	movs	r2, #71	@ 0x47
 8003436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003438:	4b40      	ldr	r3, [pc, #256]	@ (800353c <MX_TIM1_Init+0x150>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800343e:	4b3f      	ldr	r3, [pc, #252]	@ (800353c <MX_TIM1_Init+0x150>)
 8003440:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003446:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <MX_TIM1_Init+0x150>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800344c:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <MX_TIM1_Init+0x150>)
 800344e:	2200      	movs	r2, #0
 8003450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003452:	4b3a      	ldr	r3, [pc, #232]	@ (800353c <MX_TIM1_Init+0x150>)
 8003454:	2280      	movs	r2, #128	@ 0x80
 8003456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003458:	4838      	ldr	r0, [pc, #224]	@ (800353c <MX_TIM1_Init+0x150>)
 800345a:	f003 fe8f 	bl	800717c <HAL_TIM_Base_Init>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003464:	f7ff fdde 	bl	8003024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800346c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800346e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003472:	4619      	mov	r1, r3
 8003474:	4831      	ldr	r0, [pc, #196]	@ (800353c <MX_TIM1_Init+0x150>)
 8003476:	f004 fbfd 	bl	8007c74 <HAL_TIM_ConfigClockSource>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003480:	f7ff fdd0 	bl	8003024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003484:	482d      	ldr	r0, [pc, #180]	@ (800353c <MX_TIM1_Init+0x150>)
 8003486:	f003 ff49 	bl	800731c <HAL_TIM_PWM_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003490:	f7ff fdc8 	bl	8003024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003494:	2300      	movs	r3, #0
 8003496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003498:	2300      	movs	r3, #0
 800349a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80034a4:	4619      	mov	r1, r3
 80034a6:	4825      	ldr	r0, [pc, #148]	@ (800353c <MX_TIM1_Init+0x150>)
 80034a8:	f005 f8a0 	bl	80085ec <HAL_TIMEx_MasterConfigSynchronization>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80034b2:	f7ff fdb7 	bl	8003024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b6:	2360      	movs	r3, #96	@ 0x60
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034be:	2300      	movs	r3, #0
 80034c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034c2:	2300      	movs	r3, #0
 80034c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034ce:	2300      	movs	r3, #0
 80034d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80034d6:	2200      	movs	r2, #0
 80034d8:	4619      	mov	r1, r3
 80034da:	4818      	ldr	r0, [pc, #96]	@ (800353c <MX_TIM1_Init+0x150>)
 80034dc:	f004 fab6 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80034e6:	f7ff fd9d 	bl	8003024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003502:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800350c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003516:	2300      	movs	r3, #0
 8003518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4807      	ldr	r0, [pc, #28]	@ (800353c <MX_TIM1_Init+0x150>)
 8003520:	f005 f8f2 	bl	8008708 <HAL_TIMEx_ConfigBreakDeadTime>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800352a:	f7ff fd7b 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800352e:	4803      	ldr	r0, [pc, #12]	@ (800353c <MX_TIM1_Init+0x150>)
 8003530:	f000 f92c 	bl	800378c <HAL_TIM_MspPostInit>

}
 8003534:	bf00      	nop
 8003536:	3768      	adds	r7, #104	@ 0x68
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	200003b4 	.word	0x200003b4
 8003540:	40010000 	.word	0x40010000

08003544 <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800354a:	f107 0310 	add.w	r3, r7, #16
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003562:	4b1e      	ldr	r3, [pc, #120]	@ (80035dc <MX_TIM3_Init+0x98>)
 8003564:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <MX_TIM3_Init+0x9c>)
 8003566:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 8003568:	4b1c      	ldr	r3, [pc, #112]	@ (80035dc <MX_TIM3_Init+0x98>)
 800356a:	f242 527f 	movw	r2, #9599	@ 0x257f
 800356e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003570:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <MX_TIM3_Init+0x98>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8003576:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <MX_TIM3_Init+0x98>)
 8003578:	f242 720f 	movw	r2, #9999	@ 0x270f
 800357c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800357e:	4b17      	ldr	r3, [pc, #92]	@ (80035dc <MX_TIM3_Init+0x98>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003584:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <MX_TIM3_Init+0x98>)
 8003586:	2280      	movs	r2, #128	@ 0x80
 8003588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800358a:	4814      	ldr	r0, [pc, #80]	@ (80035dc <MX_TIM3_Init+0x98>)
 800358c:	f003 fdf6 	bl	800717c <HAL_TIM_Base_Init>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8003596:	f7ff fd45 	bl	8003024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800359a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800359e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035a0:	f107 0310 	add.w	r3, r7, #16
 80035a4:	4619      	mov	r1, r3
 80035a6:	480d      	ldr	r0, [pc, #52]	@ (80035dc <MX_TIM3_Init+0x98>)
 80035a8:	f004 fb64 	bl	8007c74 <HAL_TIM_ConfigClockSource>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80035b2:	f7ff fd37 	bl	8003024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4806      	ldr	r0, [pc, #24]	@ (80035dc <MX_TIM3_Init+0x98>)
 80035c4:	f005 f812 	bl	80085ec <HAL_TIMEx_MasterConfigSynchronization>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80035ce:	f7ff fd29 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000400 	.word	0x20000400
 80035e0:	40000400 	.word	0x40000400

080035e4 <MX_TIM4_Init>:

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08c      	sub	sp, #48	@ 0x30
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035ea:	f107 030c 	add.w	r3, r7, #12
 80035ee:	2224      	movs	r2, #36	@ 0x24
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f008 fa21 	bl	800ba3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f8:	463b      	mov	r3, r7
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003602:	4b21      	ldr	r3, [pc, #132]	@ (8003688 <MX_TIM4_Init+0xa4>)
 8003604:	4a21      	ldr	r2, [pc, #132]	@ (800368c <MX_TIM4_Init+0xa8>)
 8003606:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003608:	4b1f      	ldr	r3, [pc, #124]	@ (8003688 <MX_TIM4_Init+0xa4>)
 800360a:	2200      	movs	r2, #0
 800360c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800360e:	4b1e      	ldr	r3, [pc, #120]	@ (8003688 <MX_TIM4_Init+0xa4>)
 8003610:	2200      	movs	r2, #0
 8003612:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003614:	4b1c      	ldr	r3, [pc, #112]	@ (8003688 <MX_TIM4_Init+0xa4>)
 8003616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800361a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361c:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <MX_TIM4_Init+0xa4>)
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003622:	4b19      	ldr	r3, [pc, #100]	@ (8003688 <MX_TIM4_Init+0xa4>)
 8003624:	2280      	movs	r2, #128	@ 0x80
 8003626:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003628:	2303      	movs	r3, #3
 800362a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003630:	2301      	movs	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8003638:	230f      	movs	r3, #15
 800363a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800363c:	2300      	movs	r3, #0
 800363e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003640:	2301      	movs	r3, #1
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003644:	2300      	movs	r3, #0
 8003646:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8003648:	230f      	movs	r3, #15
 800364a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	4619      	mov	r1, r3
 8003652:	480d      	ldr	r0, [pc, #52]	@ (8003688 <MX_TIM4_Init+0xa4>)
 8003654:	f003 ffbe 	bl	80075d4 <HAL_TIM_Encoder_Init>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800365e:	f7ff fce1 	bl	8003024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003662:	2300      	movs	r3, #0
 8003664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800366a:	463b      	mov	r3, r7
 800366c:	4619      	mov	r1, r3
 800366e:	4806      	ldr	r0, [pc, #24]	@ (8003688 <MX_TIM4_Init+0xa4>)
 8003670:	f004 ffbc 	bl	80085ec <HAL_TIMEx_MasterConfigSynchronization>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800367a:	f7ff fcd3 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800367e:	bf00      	nop
 8003680:	3730      	adds	r7, #48	@ 0x30
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	2000044c 	.word	0x2000044c
 800368c:	40000800 	.word	0x40000800

08003690 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a16      	ldr	r2, [pc, #88]	@ (80036f8 <HAL_TIM_Base_MspInit+0x68>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036a2:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <HAL_TIM_Base_MspInit+0x6c>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	4a15      	ldr	r2, [pc, #84]	@ (80036fc <HAL_TIM_Base_MspInit+0x6c>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ae:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <HAL_TIM_Base_MspInit+0x6c>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80036ba:	e018      	b.n	80036ee <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003700 <HAL_TIM_Base_MspInit+0x70>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d113      	bne.n	80036ee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <HAL_TIM_Base_MspInit+0x6c>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	4a0c      	ldr	r2, [pc, #48]	@ (80036fc <HAL_TIM_Base_MspInit+0x6c>)
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036d2:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <HAL_TIM_Base_MspInit+0x6c>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036de:	2200      	movs	r2, #0
 80036e0:	2100      	movs	r1, #0
 80036e2:	201d      	movs	r0, #29
 80036e4:	f000 fb79 	bl	8003dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036e8:	201d      	movs	r0, #29
 80036ea:	f000 fb92 	bl	8003e12 <HAL_NVIC_EnableIRQ>
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40023800 	.word	0x40023800
 8003700:	40000400 	.word	0x40000400

08003704 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	@ 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 0314 	add.w	r3, r7, #20
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a17      	ldr	r2, [pc, #92]	@ (8003780 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d128      	bne.n	8003778 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003726:	4b17      	ldr	r3, [pc, #92]	@ (8003784 <HAL_TIM_Encoder_MspInit+0x80>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	4a16      	ldr	r2, [pc, #88]	@ (8003784 <HAL_TIM_Encoder_MspInit+0x80>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6413      	str	r3, [r2, #64]	@ 0x40
 8003732:	4b14      	ldr	r3, [pc, #80]	@ (8003784 <HAL_TIM_Encoder_MspInit+0x80>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800373e:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <HAL_TIM_Encoder_MspInit+0x80>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	4a10      	ldr	r2, [pc, #64]	@ (8003784 <HAL_TIM_Encoder_MspInit+0x80>)
 8003744:	f043 0308 	orr.w	r3, r3, #8
 8003748:	6313      	str	r3, [r2, #48]	@ 0x30
 800374a:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <HAL_TIM_Encoder_MspInit+0x80>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DT_Pin;
 8003756:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800375a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003764:	2300      	movs	r3, #0
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003768:	2302      	movs	r3, #2
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4619      	mov	r1, r3
 8003772:	4805      	ldr	r0, [pc, #20]	@ (8003788 <HAL_TIM_Encoder_MspInit+0x84>)
 8003774:	f000 ff72 	bl	800465c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003778:	bf00      	nop
 800377a:	3728      	adds	r7, #40	@ 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40000800 	.word	0x40000800
 8003784:	40023800 	.word	0x40023800
 8003788:	40020c00 	.word	0x40020c00

0800378c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 030c 	add.w	r3, r7, #12
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a11      	ldr	r2, [pc, #68]	@ (80037f0 <HAL_TIM_MspPostInit+0x64>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d11c      	bne.n	80037e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_TIM_MspPostInit+0x68>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	4a10      	ldr	r2, [pc, #64]	@ (80037f4 <HAL_TIM_MspPostInit+0x68>)
 80037b4:	f043 0310 	orr.w	r3, r3, #16
 80037b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ba:	4b0e      	ldr	r3, [pc, #56]	@ (80037f4 <HAL_TIM_MspPostInit+0x68>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037d8:	2301      	movs	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037dc:	f107 030c 	add.w	r3, r7, #12
 80037e0:	4619      	mov	r1, r3
 80037e2:	4805      	ldr	r0, [pc, #20]	@ (80037f8 <HAL_TIM_MspPostInit+0x6c>)
 80037e4:	f000 ff3a 	bl	800465c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037e8:	bf00      	nop
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40021000 	.word	0x40021000

080037fc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003800:	4b14      	ldr	r3, [pc, #80]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 8003802:	4a15      	ldr	r2, [pc, #84]	@ (8003858 <MX_USART3_UART_Init+0x5c>)
 8003804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003806:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 8003808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800380c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800380e:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003814:	4b0f      	ldr	r3, [pc, #60]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800381a:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003820:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 8003822:	220c      	movs	r2, #12
 8003824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003832:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 8003834:	2200      	movs	r2, #0
 8003836:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 800383a:	2200      	movs	r2, #0
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800383e:	4805      	ldr	r0, [pc, #20]	@ (8003854 <MX_USART3_UART_Init+0x58>)
 8003840:	f004 fffe 	bl	8008840 <HAL_UART_Init>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800384a:	f7ff fbeb 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000498 	.word	0x20000498
 8003858:	40004800 	.word	0x40004800

0800385c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b0aa      	sub	sp, #168	@ 0xa8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003874:	f107 0310 	add.w	r3, r7, #16
 8003878:	2284      	movs	r2, #132	@ 0x84
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f008 f8dc 	bl	800ba3a <memset>
  if(uartHandle->Instance==USART3)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a39      	ldr	r2, [pc, #228]	@ (800396c <HAL_UART_MspInit+0x110>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d16a      	bne.n	8003962 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800388c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003890:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003892:	2300      	movs	r3, #0
 8003894:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003896:	f107 0310 	add.w	r3, r7, #16
 800389a:	4618      	mov	r0, r3
 800389c:	f001 ffec 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80038a6:	f7ff fbbd 	bl	8003024 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80038aa:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <HAL_UART_MspInit+0x114>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	4a30      	ldr	r2, [pc, #192]	@ (8003970 <HAL_UART_MspInit+0x114>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003970 <HAL_UART_MspInit+0x114>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003970 <HAL_UART_MspInit+0x114>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003970 <HAL_UART_MspInit+0x114>)
 80038c8:	f043 0308 	orr.w	r3, r3, #8
 80038cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ce:	4b28      	ldr	r3, [pc, #160]	@ (8003970 <HAL_UART_MspInit+0x114>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ee:	2303      	movs	r3, #3
 80038f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038f4:	2307      	movs	r3, #7
 80038f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038fa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80038fe:	4619      	mov	r1, r3
 8003900:	481c      	ldr	r0, [pc, #112]	@ (8003974 <HAL_UART_MspInit+0x118>)
 8003902:	f000 feab 	bl	800465c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003906:	4b1c      	ldr	r3, [pc, #112]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 8003908:	4a1c      	ldr	r2, [pc, #112]	@ (800397c <HAL_UART_MspInit+0x120>)
 800390a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800390c:	4b1a      	ldr	r3, [pc, #104]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 800390e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003912:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003914:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800391a:	4b17      	ldr	r3, [pc, #92]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003920:	4b15      	ldr	r3, [pc, #84]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 8003922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003926:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003928:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 800392a:	2200      	movs	r2, #0
 800392c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800392e:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 8003930:	2200      	movs	r2, #0
 8003932:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003934:	4b10      	ldr	r3, [pc, #64]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 8003936:	2200      	movs	r2, #0
 8003938:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800393a:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 800393c:	2200      	movs	r2, #0
 800393e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003940:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 8003942:	2200      	movs	r2, #0
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003946:	480c      	ldr	r0, [pc, #48]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 8003948:	f000 fa7e 	bl	8003e48 <HAL_DMA_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8003952:	f7ff fb67 	bl	8003024 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a07      	ldr	r2, [pc, #28]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 800395a:	675a      	str	r2, [r3, #116]	@ 0x74
 800395c:	4a06      	ldr	r2, [pc, #24]	@ (8003978 <HAL_UART_MspInit+0x11c>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003962:	bf00      	nop
 8003964:	37a8      	adds	r7, #168	@ 0xa8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40004800 	.word	0x40004800
 8003970:	40023800 	.word	0x40023800
 8003974:	40020c00 	.word	0x40020c00
 8003978:	20000520 	.word	0x20000520
 800397c:	40026028 	.word	0x40026028

08003980 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003984:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003986:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800398a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800398e:	2206      	movs	r2, #6
 8003990:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003992:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003994:	2202      	movs	r2, #2
 8003996:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003998:	4b0f      	ldr	r3, [pc, #60]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800399a:	2200      	movs	r2, #0
 800399c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800399e:	4b0e      	ldr	r3, [pc, #56]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039a0:	2202      	movs	r2, #2
 80039a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80039b0:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80039b6:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80039bc:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039be:	2200      	movs	r2, #0
 80039c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80039c2:	4805      	ldr	r0, [pc, #20]	@ (80039d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c4:	f001 f943 	bl	8004c4e <HAL_PCD_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80039ce:	f7ff fb29 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000580 	.word	0x20000580

080039dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b0ac      	sub	sp, #176	@ 0xb0
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039f4:	f107 0318 	add.w	r3, r7, #24
 80039f8:	2284      	movs	r2, #132	@ 0x84
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f008 f81c 	bl	800ba3a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a0a:	d159      	bne.n	8003ac0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003a0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003a10:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a18:	f107 0318 	add.w	r3, r7, #24
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 ff2b 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003a28:	f7ff fafc 	bl	8003024 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2c:	4b26      	ldr	r3, [pc, #152]	@ (8003ac8 <HAL_PCD_MspInit+0xec>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	4a25      	ldr	r2, [pc, #148]	@ (8003ac8 <HAL_PCD_MspInit+0xec>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a38:	4b23      	ldr	r3, [pc, #140]	@ (8003ac8 <HAL_PCD_MspInit+0xec>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003a44:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a5e:	230a      	movs	r3, #10
 8003a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4818      	ldr	r0, [pc, #96]	@ (8003acc <HAL_PCD_MspInit+0xf0>)
 8003a6c:	f000 fdf6 	bl	800465c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003a70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4810      	ldr	r0, [pc, #64]	@ (8003acc <HAL_PCD_MspInit+0xf0>)
 8003a8c:	f000 fde6 	bl	800465c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_PCD_MspInit+0xec>)
 8003a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a94:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac8 <HAL_PCD_MspInit+0xec>)
 8003a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a9a:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <HAL_PCD_MspInit+0xec>)
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <HAL_PCD_MspInit+0xec>)
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aac:	4a06      	ldr	r2, [pc, #24]	@ (8003ac8 <HAL_PCD_MspInit+0xec>)
 8003aae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ab2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ab4:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <HAL_PCD_MspInit+0xec>)
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	37b0      	adds	r7, #176	@ 0xb0
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40020000 	.word	0x40020000

08003ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ad4:	f7ff fc78 	bl	80033c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ad8:	480c      	ldr	r0, [pc, #48]	@ (8003b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ada:	490d      	ldr	r1, [pc, #52]	@ (8003b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003adc:	4a0d      	ldr	r2, [pc, #52]	@ (8003b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae0:	e002      	b.n	8003ae8 <LoopCopyDataInit>

08003ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ae6:	3304      	adds	r3, #4

08003ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aec:	d3f9      	bcc.n	8003ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aee:	4a0a      	ldr	r2, [pc, #40]	@ (8003b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003af0:	4c0a      	ldr	r4, [pc, #40]	@ (8003b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af4:	e001      	b.n	8003afa <LoopFillZerobss>

08003af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af8:	3204      	adds	r2, #4

08003afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003afc:	d3fb      	bcc.n	8003af6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003afe:	f008 f807 	bl	800bb10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b02:	f7fe ffff 	bl	8002b04 <main>
  bx  lr    
 8003b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b08:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b10:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8003b14:	0800ea30 	.word	0x0800ea30
  ldr r2, =_sbss
 8003b18:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8003b1c:	20000bb0 	.word	0x20000bb0

08003b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC_IRQHandler>

08003b22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b26:	2003      	movs	r0, #3
 8003b28:	f000 f94c 	bl	8003dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f000 f805 	bl	8003b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b32:	f7ff fb07 	bl	8003144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b44:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <HAL_InitTick+0x54>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b12      	ldr	r3, [pc, #72]	@ (8003b94 <HAL_InitTick+0x58>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f967 	bl	8003e2e <HAL_SYSTICK_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e00e      	b.n	8003b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b0f      	cmp	r3, #15
 8003b6e:	d80a      	bhi.n	8003b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b70:	2200      	movs	r2, #0
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	f000 f92f 	bl	8003dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b7c:	4a06      	ldr	r2, [pc, #24]	@ (8003b98 <HAL_InitTick+0x5c>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000060 	.word	0x20000060
 8003b94:	20000068 	.word	0x20000068
 8003b98:	20000064 	.word	0x20000064

08003b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ba0:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <HAL_IncTick+0x20>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b06      	ldr	r3, [pc, #24]	@ (8003bc0 <HAL_IncTick+0x24>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4413      	add	r3, r2
 8003bac:	4a04      	ldr	r2, [pc, #16]	@ (8003bc0 <HAL_IncTick+0x24>)
 8003bae:	6013      	str	r3, [r2, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000068 	.word	0x20000068
 8003bc0:	20000a60 	.word	0x20000a60

08003bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	@ (8003bd8 <HAL_GetTick+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000a60 	.word	0x20000a60

08003bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003be4:	f7ff ffee 	bl	8003bc4 <HAL_GetTick>
 8003be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d005      	beq.n	8003c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <HAL_Delay+0x44>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c02:	bf00      	nop
 8003c04:	f7ff ffde 	bl	8003bc4 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d8f7      	bhi.n	8003c04 <HAL_Delay+0x28>
  {
  }
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000068 	.word	0x20000068

08003c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c34:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <__NVIC_SetPriorityGrouping+0x40>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c40:	4013      	ands	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <__NVIC_SetPriorityGrouping+0x44>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c52:	4a04      	ldr	r2, [pc, #16]	@ (8003c64 <__NVIC_SetPriorityGrouping+0x40>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00
 8003c68:	05fa0000 	.word	0x05fa0000

08003c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <__NVIC_GetPriorityGrouping+0x18>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 0307 	and.w	r3, r3, #7
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	db0b      	blt.n	8003cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	f003 021f 	and.w	r2, r3, #31
 8003ca0:	4907      	ldr	r1, [pc, #28]	@ (8003cc0 <__NVIC_EnableIRQ+0x38>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2001      	movs	r0, #1
 8003caa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	e000e100 	.word	0xe000e100

08003cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	db0a      	blt.n	8003cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	490c      	ldr	r1, [pc, #48]	@ (8003d10 <__NVIC_SetPriority+0x4c>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	0112      	lsls	r2, r2, #4
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cec:	e00a      	b.n	8003d04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4908      	ldr	r1, [pc, #32]	@ (8003d14 <__NVIC_SetPriority+0x50>)
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3b04      	subs	r3, #4
 8003cfc:	0112      	lsls	r2, r2, #4
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	440b      	add	r3, r1
 8003d02:	761a      	strb	r2, [r3, #24]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000e100 	.word	0xe000e100
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	@ 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f1c3 0307 	rsb	r3, r3, #7
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	bf28      	it	cs
 8003d36:	2304      	movcs	r3, #4
 8003d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d902      	bls.n	8003d48 <NVIC_EncodePriority+0x30>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3b03      	subs	r3, #3
 8003d46:	e000      	b.n	8003d4a <NVIC_EncodePriority+0x32>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d60:	f04f 31ff 	mov.w	r1, #4294967295
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	43d9      	mvns	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	4313      	orrs	r3, r2
         );
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	@ 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d90:	d301      	bcc.n	8003d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00f      	b.n	8003db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d96:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc0 <SysTick_Config+0x40>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9e:	210f      	movs	r1, #15
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	f7ff ff8e 	bl	8003cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da8:	4b05      	ldr	r3, [pc, #20]	@ (8003dc0 <SysTick_Config+0x40>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dae:	4b04      	ldr	r3, [pc, #16]	@ (8003dc0 <SysTick_Config+0x40>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000e010 	.word	0xe000e010

08003dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff29 	bl	8003c24 <__NVIC_SetPriorityGrouping>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4603      	mov	r3, r0
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dec:	f7ff ff3e 	bl	8003c6c <__NVIC_GetPriorityGrouping>
 8003df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f7ff ff8e 	bl	8003d18 <NVIC_EncodePriority>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff5d 	bl	8003cc4 <__NVIC_SetPriority>
}
 8003e0a:	bf00      	nop
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	4603      	mov	r3, r0
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff31 	bl	8003c88 <__NVIC_EnableIRQ>
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffa2 	bl	8003d80 <SysTick_Config>
 8003e3c:	4603      	mov	r3, r0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e54:	f7ff feb6 	bl	8003bc4 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e099      	b.n	8003f98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e84:	e00f      	b.n	8003ea6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e86:	f7ff fe9d 	bl	8003bc4 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d908      	bls.n	8003ea6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e078      	b.n	8003f98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e8      	bne.n	8003e86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4b38      	ldr	r3, [pc, #224]	@ (8003fa0 <HAL_DMA_Init+0x158>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d107      	bne.n	8003f10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f023 0307 	bic.w	r3, r3, #7
 8003f26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d117      	bne.n	8003f6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00e      	beq.n	8003f6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fb09 	bl	8004564 <DMA_CheckFifoParam>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2240      	movs	r2, #64	@ 0x40
 8003f5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f66:	2301      	movs	r3, #1
 8003f68:	e016      	b.n	8003f98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fac0 	bl	80044f8 <DMA_CalcBaseAndBitshift>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f80:	223f      	movs	r2, #63	@ 0x3f
 8003f82:	409a      	lsls	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	f010803f 	.word	0xf010803f

08003fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_DMA_Start_IT+0x26>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e048      	b.n	800405c <HAL_DMA_Start_IT+0xb8>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d137      	bne.n	800404e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fa52 	bl	800449c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffc:	223f      	movs	r2, #63	@ 0x3f
 8003ffe:	409a      	lsls	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0216 	orr.w	r2, r2, #22
 8004012:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004022:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0208 	orr.w	r2, r2, #8
 800403a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e005      	b.n	800405a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004070:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004072:	f7ff fda7 	bl	8003bc4 <HAL_GetTick>
 8004076:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d008      	beq.n	8004096 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2280      	movs	r2, #128	@ 0x80
 8004088:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e052      	b.n	800413c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0216 	bic.w	r2, r2, #22
 80040a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d103      	bne.n	80040c6 <HAL_DMA_Abort+0x62>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0208 	bic.w	r2, r2, #8
 80040d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e6:	e013      	b.n	8004110 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040e8:	f7ff fd6c 	bl	8003bc4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d90c      	bls.n	8004110 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2203      	movs	r2, #3
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e015      	b.n	800413c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e4      	bne.n	80040e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004122:	223f      	movs	r2, #63	@ 0x3f
 8004124:	409a      	lsls	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d004      	beq.n	8004162 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2280      	movs	r2, #128	@ 0x80
 800415c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e00c      	b.n	800417c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2205      	movs	r2, #5
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004194:	4b8e      	ldr	r3, [pc, #568]	@ (80043d0 <HAL_DMA_IRQHandler+0x248>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a8e      	ldr	r2, [pc, #568]	@ (80043d4 <HAL_DMA_IRQHandler+0x24c>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0a9b      	lsrs	r3, r3, #10
 80041a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b2:	2208      	movs	r2, #8
 80041b4:	409a      	lsls	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01a      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0204 	bic.w	r2, r2, #4
 80041da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e0:	2208      	movs	r2, #8
 80041e2:	409a      	lsls	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	f043 0201 	orr.w	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f8:	2201      	movs	r2, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d012      	beq.n	800422a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004216:	2201      	movs	r2, #1
 8004218:	409a      	lsls	r2, r3
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004222:	f043 0202 	orr.w	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422e:	2204      	movs	r2, #4
 8004230:	409a      	lsls	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d012      	beq.n	8004260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424c:	2204      	movs	r2, #4
 800424e:	409a      	lsls	r2, r3
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004258:	f043 0204 	orr.w	r2, r3, #4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004264:	2210      	movs	r2, #16
 8004266:	409a      	lsls	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d043      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d03c      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	2210      	movs	r2, #16
 8004284:	409a      	lsls	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d018      	beq.n	80042ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d024      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
 80042b6:	e01f      	b.n	80042f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01b      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
 80042c8:	e016      	b.n	80042f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0208 	bic.w	r2, r2, #8
 80042e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fc:	2220      	movs	r2, #32
 80042fe:	409a      	lsls	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 808f 	beq.w	8004428 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8087 	beq.w	8004428 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431e:	2220      	movs	r2, #32
 8004320:	409a      	lsls	r2, r3
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b05      	cmp	r3, #5
 8004330:	d136      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0216 	bic.w	r2, r2, #22
 8004340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <HAL_DMA_IRQHandler+0x1da>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0208 	bic.w	r2, r2, #8
 8004370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004376:	223f      	movs	r2, #63	@ 0x3f
 8004378:	409a      	lsls	r2, r3
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d07e      	beq.n	8004494 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
        }
        return;
 800439e:	e079      	b.n	8004494 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01d      	beq.n	80043ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10d      	bne.n	80043d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d031      	beq.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
 80043cc:	e02c      	b.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
 80043ce:	bf00      	nop
 80043d0:	20000060 	.word	0x20000060
 80043d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d023      	beq.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
 80043e8:	e01e      	b.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10f      	bne.n	8004418 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0210 	bic.w	r2, r2, #16
 8004406:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442c:	2b00      	cmp	r3, #0
 800442e:	d032      	beq.n	8004496 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d022      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2205      	movs	r2, #5
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	3301      	adds	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	429a      	cmp	r2, r3
 800445e:	d307      	bcc.n	8004470 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f2      	bne.n	8004454 <HAL_DMA_IRQHandler+0x2cc>
 800446e:	e000      	b.n	8004472 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004470:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
 8004492:	e000      	b.n	8004496 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004494:	bf00      	nop
    }
  }
}
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b40      	cmp	r3, #64	@ 0x40
 80044c8:	d108      	bne.n	80044dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044da:	e007      	b.n	80044ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	3b10      	subs	r3, #16
 8004508:	4a13      	ldr	r2, [pc, #76]	@ (8004558 <DMA_CalcBaseAndBitshift+0x60>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004512:	4a12      	ldr	r2, [pc, #72]	@ (800455c <DMA_CalcBaseAndBitshift+0x64>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d908      	bls.n	8004538 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <DMA_CalcBaseAndBitshift+0x68>)
 800452e:	4013      	ands	r3, r2
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	659a      	str	r2, [r3, #88]	@ 0x58
 8004536:	e006      	b.n	8004546 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <DMA_CalcBaseAndBitshift+0x68>)
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	aaaaaaab 	.word	0xaaaaaaab
 800455c:	0800e5f0 	.word	0x0800e5f0
 8004560:	fffffc00 	.word	0xfffffc00

08004564 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11f      	bne.n	80045be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d856      	bhi.n	8004632 <DMA_CheckFifoParam+0xce>
 8004584:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <DMA_CheckFifoParam+0x28>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	0800459d 	.word	0x0800459d
 8004590:	080045af 	.word	0x080045af
 8004594:	0800459d 	.word	0x0800459d
 8004598:	08004633 	.word	0x08004633
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d046      	beq.n	8004636 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ac:	e043      	b.n	8004636 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045b6:	d140      	bne.n	800463a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045bc:	e03d      	b.n	800463a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045c6:	d121      	bne.n	800460c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d837      	bhi.n	800463e <DMA_CheckFifoParam+0xda>
 80045ce:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <DMA_CheckFifoParam+0x70>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	080045eb 	.word	0x080045eb
 80045dc:	080045e5 	.word	0x080045e5
 80045e0:	080045fd 	.word	0x080045fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
      break;
 80045e8:	e030      	b.n	800464c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d025      	beq.n	8004642 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045fa:	e022      	b.n	8004642 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004604:	d11f      	bne.n	8004646 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800460a:	e01c      	b.n	8004646 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d903      	bls.n	800461a <DMA_CheckFifoParam+0xb6>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d003      	beq.n	8004620 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004618:	e018      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      break;
 800461e:	e015      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00e      	beq.n	800464a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      break;
 8004630:	e00b      	b.n	800464a <DMA_CheckFifoParam+0xe6>
      break;
 8004632:	bf00      	nop
 8004634:	e00a      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 8004636:	bf00      	nop
 8004638:	e008      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 800463a:	bf00      	nop
 800463c:	e006      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 800463e:	bf00      	nop
 8004640:	e004      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 8004642:	bf00      	nop
 8004644:	e002      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;   
 8004646:	bf00      	nop
 8004648:	e000      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 800464a:	bf00      	nop
    }
  } 
  
  return status; 
 800464c:	7bfb      	ldrb	r3, [r7, #15]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop

0800465c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800465c:	b480      	push	{r7}
 800465e:	b089      	sub	sp, #36	@ 0x24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e175      	b.n	8004968 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800467c:	2201      	movs	r2, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	429a      	cmp	r2, r3
 8004696:	f040 8164 	bne.w	8004962 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d005      	beq.n	80046b2 <HAL_GPIO_Init+0x56>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d130      	bne.n	8004714 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	2203      	movs	r2, #3
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046e8:	2201      	movs	r2, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 0201 	and.w	r2, r3, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b03      	cmp	r3, #3
 800471e:	d017      	beq.n	8004750 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	2203      	movs	r2, #3
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d123      	bne.n	80047a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	08da      	lsrs	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3208      	adds	r2, #8
 8004764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	220f      	movs	r2, #15
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	69b9      	ldr	r1, [r7, #24]
 80047a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0203 	and.w	r2, r3, #3
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80be 	beq.w	8004962 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e6:	4b66      	ldr	r3, [pc, #408]	@ (8004980 <HAL_GPIO_Init+0x324>)
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	4a65      	ldr	r2, [pc, #404]	@ (8004980 <HAL_GPIO_Init+0x324>)
 80047ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80047f2:	4b63      	ldr	r3, [pc, #396]	@ (8004980 <HAL_GPIO_Init+0x324>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047fe:	4a61      	ldr	r2, [pc, #388]	@ (8004984 <HAL_GPIO_Init+0x328>)
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	089b      	lsrs	r3, r3, #2
 8004804:	3302      	adds	r3, #2
 8004806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	220f      	movs	r2, #15
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a58      	ldr	r2, [pc, #352]	@ (8004988 <HAL_GPIO_Init+0x32c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d037      	beq.n	800489a <HAL_GPIO_Init+0x23e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a57      	ldr	r2, [pc, #348]	@ (800498c <HAL_GPIO_Init+0x330>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d031      	beq.n	8004896 <HAL_GPIO_Init+0x23a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a56      	ldr	r2, [pc, #344]	@ (8004990 <HAL_GPIO_Init+0x334>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d02b      	beq.n	8004892 <HAL_GPIO_Init+0x236>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a55      	ldr	r2, [pc, #340]	@ (8004994 <HAL_GPIO_Init+0x338>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d025      	beq.n	800488e <HAL_GPIO_Init+0x232>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a54      	ldr	r2, [pc, #336]	@ (8004998 <HAL_GPIO_Init+0x33c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01f      	beq.n	800488a <HAL_GPIO_Init+0x22e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a53      	ldr	r2, [pc, #332]	@ (800499c <HAL_GPIO_Init+0x340>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d019      	beq.n	8004886 <HAL_GPIO_Init+0x22a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a52      	ldr	r2, [pc, #328]	@ (80049a0 <HAL_GPIO_Init+0x344>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_GPIO_Init+0x226>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a51      	ldr	r2, [pc, #324]	@ (80049a4 <HAL_GPIO_Init+0x348>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00d      	beq.n	800487e <HAL_GPIO_Init+0x222>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a50      	ldr	r2, [pc, #320]	@ (80049a8 <HAL_GPIO_Init+0x34c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d007      	beq.n	800487a <HAL_GPIO_Init+0x21e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4f      	ldr	r2, [pc, #316]	@ (80049ac <HAL_GPIO_Init+0x350>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d101      	bne.n	8004876 <HAL_GPIO_Init+0x21a>
 8004872:	2309      	movs	r3, #9
 8004874:	e012      	b.n	800489c <HAL_GPIO_Init+0x240>
 8004876:	230a      	movs	r3, #10
 8004878:	e010      	b.n	800489c <HAL_GPIO_Init+0x240>
 800487a:	2308      	movs	r3, #8
 800487c:	e00e      	b.n	800489c <HAL_GPIO_Init+0x240>
 800487e:	2307      	movs	r3, #7
 8004880:	e00c      	b.n	800489c <HAL_GPIO_Init+0x240>
 8004882:	2306      	movs	r3, #6
 8004884:	e00a      	b.n	800489c <HAL_GPIO_Init+0x240>
 8004886:	2305      	movs	r3, #5
 8004888:	e008      	b.n	800489c <HAL_GPIO_Init+0x240>
 800488a:	2304      	movs	r3, #4
 800488c:	e006      	b.n	800489c <HAL_GPIO_Init+0x240>
 800488e:	2303      	movs	r3, #3
 8004890:	e004      	b.n	800489c <HAL_GPIO_Init+0x240>
 8004892:	2302      	movs	r3, #2
 8004894:	e002      	b.n	800489c <HAL_GPIO_Init+0x240>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_GPIO_Init+0x240>
 800489a:	2300      	movs	r3, #0
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	f002 0203 	and.w	r2, r2, #3
 80048a2:	0092      	lsls	r2, r2, #2
 80048a4:	4093      	lsls	r3, r2
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048ac:	4935      	ldr	r1, [pc, #212]	@ (8004984 <HAL_GPIO_Init+0x328>)
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	3302      	adds	r3, #2
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ba:	4b3d      	ldr	r3, [pc, #244]	@ (80049b0 <HAL_GPIO_Init+0x354>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048de:	4a34      	ldr	r2, [pc, #208]	@ (80049b0 <HAL_GPIO_Init+0x354>)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048e4:	4b32      	ldr	r3, [pc, #200]	@ (80049b0 <HAL_GPIO_Init+0x354>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004908:	4a29      	ldr	r2, [pc, #164]	@ (80049b0 <HAL_GPIO_Init+0x354>)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800490e:	4b28      	ldr	r3, [pc, #160]	@ (80049b0 <HAL_GPIO_Init+0x354>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	43db      	mvns	r3, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004932:	4a1f      	ldr	r2, [pc, #124]	@ (80049b0 <HAL_GPIO_Init+0x354>)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004938:	4b1d      	ldr	r3, [pc, #116]	@ (80049b0 <HAL_GPIO_Init+0x354>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800495c:	4a14      	ldr	r2, [pc, #80]	@ (80049b0 <HAL_GPIO_Init+0x354>)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3301      	adds	r3, #1
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b0f      	cmp	r3, #15
 800496c:	f67f ae86 	bls.w	800467c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	3724      	adds	r7, #36	@ 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	40013800 	.word	0x40013800
 8004988:	40020000 	.word	0x40020000
 800498c:	40020400 	.word	0x40020400
 8004990:	40020800 	.word	0x40020800
 8004994:	40020c00 	.word	0x40020c00
 8004998:	40021000 	.word	0x40021000
 800499c:	40021400 	.word	0x40021400
 80049a0:	40021800 	.word	0x40021800
 80049a4:	40021c00 	.word	0x40021c00
 80049a8:	40022000 	.word	0x40022000
 80049ac:	40022400 	.word	0x40022400
 80049b0:	40013c00 	.word	0x40013c00

080049b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	807b      	strh	r3, [r7, #2]
 80049c0:	4613      	mov	r3, r2
 80049c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049c4:	787b      	ldrb	r3, [r7, #1]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80049d0:	e003      	b.n	80049da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	041a      	lsls	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	619a      	str	r2, [r3, #24]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e08b      	b.n	8004b12 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fd ff96 	bl	8002940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	@ 0x24
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0201 	bic.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d107      	bne.n	8004a62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a5e:	609a      	str	r2, [r3, #8]
 8004a60:	e006      	b.n	8004a70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004a6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d108      	bne.n	8004a8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	e007      	b.n	8004a9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6859      	ldr	r1, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b1c <HAL_I2C_Init+0x134>)
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ab8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69d9      	ldr	r1, [r3, #28]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1a      	ldr	r2, [r3, #32]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	02008000 	.word	0x02008000

08004b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d138      	bne.n	8004ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e032      	b.n	8004baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	@ 0x24
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e000      	b.n	8004baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d139      	bne.n	8004c40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e033      	b.n	8004c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2224      	movs	r2, #36	@ 0x24
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af02      	add	r7, sp, #8
 8004c54:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e108      	b.n	8004e72 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fe feae 	bl	80039dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2203      	movs	r2, #3
 8004c84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c8e:	d102      	bne.n	8004c96 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f005 f876 	bl	8009d8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7c1a      	ldrb	r2, [r3, #16]
 8004ca8:	f88d 2000 	strb.w	r2, [sp]
 8004cac:	3304      	adds	r3, #4
 8004cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cb0:	f005 f812 	bl	8009cd8 <USB_CoreInit>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e0d5      	b.n	8004e72 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f005 f86e 	bl	8009dae <USB_SetCurrentMode>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0c6      	b.n	8004e72 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e04a      	b.n	8004d80 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cea:	7bfa      	ldrb	r2, [r7, #15]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3315      	adds	r3, #21
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cfe:	7bfa      	ldrb	r2, [r7, #15]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	3314      	adds	r3, #20
 8004d0e:	7bfa      	ldrb	r2, [r7, #15]
 8004d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d12:	7bfa      	ldrb	r2, [r7, #15]
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	b298      	uxth	r0, r3
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	332e      	adds	r3, #46	@ 0x2e
 8004d26:	4602      	mov	r2, r0
 8004d28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d2a:	7bfa      	ldrb	r2, [r7, #15]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3318      	adds	r3, #24
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d3e:	7bfa      	ldrb	r2, [r7, #15]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	331c      	adds	r3, #28
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d52:	7bfa      	ldrb	r2, [r7, #15]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	3320      	adds	r3, #32
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d66:	7bfa      	ldrb	r2, [r7, #15]
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	3324      	adds	r3, #36	@ 0x24
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	791b      	ldrb	r3, [r3, #4]
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d3af      	bcc.n	8004cea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	e044      	b.n	8004e1a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d90:	7bfa      	ldrb	r2, [r7, #15]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004da6:	7bfa      	ldrb	r2, [r7, #15]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004dd2:	7bfa      	ldrb	r2, [r7, #15]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004de8:	7bfa      	ldrb	r2, [r7, #15]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	3301      	adds	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	791b      	ldrb	r3, [r3, #4]
 8004e1e:	7bfa      	ldrb	r2, [r7, #15]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d3b5      	bcc.n	8004d90 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	7c1a      	ldrb	r2, [r3, #16]
 8004e2c:	f88d 2000 	strb.w	r2, [sp]
 8004e30:	3304      	adds	r3, #4
 8004e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e34:	f005 f808 	bl	8009e48 <USB_DevInit>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e013      	b.n	8004e72 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7b1b      	ldrb	r3, [r3, #12]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d102      	bne.n	8004e66 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f80b 	bl	8004e7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f005 f9c3 	bl	800a1f6 <USB_DevDisconnect>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	10000003 	.word	0x10000003

08004ec4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec8:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a04      	ldr	r2, [pc, #16]	@ (8004ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed2:	6013      	str	r3, [r2, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40007000 	.word	0x40007000

08004ee4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004eec:	2300      	movs	r3, #0
 8004eee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e291      	b.n	800541e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 8087 	beq.w	8005016 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f08:	4b96      	ldr	r3, [pc, #600]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 030c 	and.w	r3, r3, #12
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d00c      	beq.n	8004f2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f14:	4b93      	ldr	r3, [pc, #588]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 030c 	and.w	r3, r3, #12
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d112      	bne.n	8004f46 <HAL_RCC_OscConfig+0x62>
 8004f20:	4b90      	ldr	r3, [pc, #576]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f2c:	d10b      	bne.n	8004f46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2e:	4b8d      	ldr	r3, [pc, #564]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d06c      	beq.n	8005014 <HAL_RCC_OscConfig+0x130>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d168      	bne.n	8005014 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e26b      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4e:	d106      	bne.n	8004f5e <HAL_RCC_OscConfig+0x7a>
 8004f50:	4b84      	ldr	r3, [pc, #528]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a83      	ldr	r2, [pc, #524]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	e02e      	b.n	8004fbc <HAL_RCC_OscConfig+0xd8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCC_OscConfig+0x9c>
 8004f66:	4b7f      	ldr	r3, [pc, #508]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4b7c      	ldr	r3, [pc, #496]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a7b      	ldr	r2, [pc, #492]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e01d      	b.n	8004fbc <HAL_RCC_OscConfig+0xd8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0xc0>
 8004f8a:	4b76      	ldr	r3, [pc, #472]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a75      	ldr	r2, [pc, #468]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	4b73      	ldr	r3, [pc, #460]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a72      	ldr	r2, [pc, #456]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	e00b      	b.n	8004fbc <HAL_RCC_OscConfig+0xd8>
 8004fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a6b      	ldr	r2, [pc, #428]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d013      	beq.n	8004fec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fe fdfe 	bl	8003bc4 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fcc:	f7fe fdfa 	bl	8003bc4 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	@ 0x64
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e21f      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fde:	4b61      	ldr	r3, [pc, #388]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0xe8>
 8004fea:	e014      	b.n	8005016 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fe fdea 	bl	8003bc4 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fe fde6 	bl	8003bc4 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	@ 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e20b      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005006:	4b57      	ldr	r3, [pc, #348]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x110>
 8005012:	e000      	b.n	8005016 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d069      	beq.n	80050f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005022:	4b50      	ldr	r3, [pc, #320]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800502e:	4b4d      	ldr	r3, [pc, #308]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b08      	cmp	r3, #8
 8005038:	d11c      	bne.n	8005074 <HAL_RCC_OscConfig+0x190>
 800503a:	4b4a      	ldr	r3, [pc, #296]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d116      	bne.n	8005074 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005046:	4b47      	ldr	r3, [pc, #284]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_RCC_OscConfig+0x17a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d001      	beq.n	800505e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e1df      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505e:	4b41      	ldr	r3, [pc, #260]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	493d      	ldr	r1, [pc, #244]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800506e:	4313      	orrs	r3, r2
 8005070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005072:	e040      	b.n	80050f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d023      	beq.n	80050c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800507c:	4b39      	ldr	r3, [pc, #228]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a38      	ldr	r2, [pc, #224]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fe fd9c 	bl	8003bc4 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005090:	f7fe fd98 	bl	8003bc4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e1bd      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	4b30      	ldr	r3, [pc, #192]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	4929      	ldr	r1, [pc, #164]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]
 80050c2:	e018      	b.n	80050f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c4:	4b27      	ldr	r3, [pc, #156]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a26      	ldr	r2, [pc, #152]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fe fd78 	bl	8003bc4 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d8:	f7fe fd74 	bl	8003bc4 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e199      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d038      	beq.n	8005174 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d019      	beq.n	800513e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800510a:	4b16      	ldr	r3, [pc, #88]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800510c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510e:	4a15      	ldr	r2, [pc, #84]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fe fd55 	bl	8003bc4 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800511e:	f7fe fd51 	bl	8003bc4 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e176      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005130:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <HAL_RCC_OscConfig+0x23a>
 800513c:	e01a      	b.n	8005174 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800513e:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005142:	4a08      	ldr	r2, [pc, #32]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514a:	f7fe fd3b 	bl	8003bc4 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005150:	e00a      	b.n	8005168 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005152:	f7fe fd37 	bl	8003bc4 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d903      	bls.n	8005168 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e15c      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
 8005164:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005168:	4b91      	ldr	r3, [pc, #580]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 800516a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1ee      	bne.n	8005152 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80a4 	beq.w	80052ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005182:	4b8b      	ldr	r3, [pc, #556]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800518e:	4b88      	ldr	r3, [pc, #544]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	4a87      	ldr	r2, [pc, #540]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005198:	6413      	str	r3, [r2, #64]	@ 0x40
 800519a:	4b85      	ldr	r3, [pc, #532]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a6:	2301      	movs	r3, #1
 80051a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051aa:	4b82      	ldr	r3, [pc, #520]	@ (80053b4 <HAL_RCC_OscConfig+0x4d0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d118      	bne.n	80051e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80051b6:	4b7f      	ldr	r3, [pc, #508]	@ (80053b4 <HAL_RCC_OscConfig+0x4d0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a7e      	ldr	r2, [pc, #504]	@ (80053b4 <HAL_RCC_OscConfig+0x4d0>)
 80051bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c2:	f7fe fcff 	bl	8003bc4 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ca:	f7fe fcfb 	bl	8003bc4 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b64      	cmp	r3, #100	@ 0x64
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e120      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051dc:	4b75      	ldr	r3, [pc, #468]	@ (80053b4 <HAL_RCC_OscConfig+0x4d0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d106      	bne.n	80051fe <HAL_RCC_OscConfig+0x31a>
 80051f0:	4b6f      	ldr	r3, [pc, #444]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f4:	4a6e      	ldr	r2, [pc, #440]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80051fc:	e02d      	b.n	800525a <HAL_RCC_OscConfig+0x376>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10c      	bne.n	8005220 <HAL_RCC_OscConfig+0x33c>
 8005206:	4b6a      	ldr	r3, [pc, #424]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520a:	4a69      	ldr	r2, [pc, #420]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6713      	str	r3, [r2, #112]	@ 0x70
 8005212:	4b67      	ldr	r3, [pc, #412]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005216:	4a66      	ldr	r2, [pc, #408]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	6713      	str	r3, [r2, #112]	@ 0x70
 800521e:	e01c      	b.n	800525a <HAL_RCC_OscConfig+0x376>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2b05      	cmp	r3, #5
 8005226:	d10c      	bne.n	8005242 <HAL_RCC_OscConfig+0x35e>
 8005228:	4b61      	ldr	r3, [pc, #388]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	4a60      	ldr	r2, [pc, #384]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 800522e:	f043 0304 	orr.w	r3, r3, #4
 8005232:	6713      	str	r3, [r2, #112]	@ 0x70
 8005234:	4b5e      	ldr	r3, [pc, #376]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005238:	4a5d      	ldr	r2, [pc, #372]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005240:	e00b      	b.n	800525a <HAL_RCC_OscConfig+0x376>
 8005242:	4b5b      	ldr	r3, [pc, #364]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005246:	4a5a      	ldr	r2, [pc, #360]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	6713      	str	r3, [r2, #112]	@ 0x70
 800524e:	4b58      	ldr	r3, [pc, #352]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005252:	4a57      	ldr	r2, [pc, #348]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005254:	f023 0304 	bic.w	r3, r3, #4
 8005258:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d015      	beq.n	800528e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005262:	f7fe fcaf 	bl	8003bc4 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005268:	e00a      	b.n	8005280 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fe fcab 	bl	8003bc4 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e0ce      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005280:	4b4b      	ldr	r3, [pc, #300]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ee      	beq.n	800526a <HAL_RCC_OscConfig+0x386>
 800528c:	e014      	b.n	80052b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528e:	f7fe fc99 	bl	8003bc4 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005294:	e00a      	b.n	80052ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005296:	f7fe fc95 	bl	8003bc4 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e0b8      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ac:	4b40      	ldr	r3, [pc, #256]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1ee      	bne.n	8005296 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d105      	bne.n	80052ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052be:	4b3c      	ldr	r3, [pc, #240]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	4a3b      	ldr	r2, [pc, #236]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 80052c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80a4 	beq.w	800541c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d4:	4b36      	ldr	r3, [pc, #216]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d06b      	beq.n	80053b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d149      	bne.n	800537c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e8:	4b31      	ldr	r3, [pc, #196]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a30      	ldr	r2, [pc, #192]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 80052ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fe fc66 	bl	8003bc4 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fe fc62 	bl	8003bc4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e087      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	4b28      	ldr	r3, [pc, #160]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	019b      	lsls	r3, r3, #6
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	3b01      	subs	r3, #1
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	061b      	lsls	r3, r3, #24
 800533e:	4313      	orrs	r3, r2
 8005340:	4a1b      	ldr	r2, [pc, #108]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005342:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005346:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005348:	4b19      	ldr	r3, [pc, #100]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a18      	ldr	r2, [pc, #96]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 800534e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fe fc36 	bl	8003bc4 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535c:	f7fe fc32 	bl	8003bc4 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e057      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800536e:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0x478>
 800537a:	e04f      	b.n	800541c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537c:	4b0c      	ldr	r3, [pc, #48]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0b      	ldr	r2, [pc, #44]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 8005382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fe fc1c 	bl	8003bc4 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005390:	f7fe fc18 	bl	8003bc4 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e03d      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a2:	4b03      	ldr	r3, [pc, #12]	@ (80053b0 <HAL_RCC_OscConfig+0x4cc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f0      	bne.n	8005390 <HAL_RCC_OscConfig+0x4ac>
 80053ae:	e035      	b.n	800541c <HAL_RCC_OscConfig+0x538>
 80053b0:	40023800 	.word	0x40023800
 80053b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80053b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <HAL_RCC_OscConfig+0x544>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d028      	beq.n	8005418 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d121      	bne.n	8005418 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053de:	429a      	cmp	r2, r3
 80053e0:	d11a      	bne.n	8005418 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053e8:	4013      	ands	r3, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d111      	bne.n	8005418 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	3b01      	subs	r3, #1
 8005402:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005404:	429a      	cmp	r2, r3
 8005406:	d107      	bne.n	8005418 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005414:	429a      	cmp	r2, r3
 8005416:	d001      	beq.n	800541c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800

0800542c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0d0      	b.n	80055e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b6a      	ldr	r3, [pc, #424]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d910      	bls.n	8005474 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b67      	ldr	r3, [pc, #412]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 020f 	bic.w	r2, r3, #15
 800545a:	4965      	ldr	r1, [pc, #404]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	4b63      	ldr	r3, [pc, #396]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0b8      	b.n	80055e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d020      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800548c:	4b59      	ldr	r3, [pc, #356]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4a58      	ldr	r2, [pc, #352]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005492:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005496:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054a4:	4b53      	ldr	r3, [pc, #332]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a52      	ldr	r2, [pc, #328]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b0:	4b50      	ldr	r3, [pc, #320]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	494d      	ldr	r1, [pc, #308]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d040      	beq.n	8005550 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d107      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d6:	4b47      	ldr	r3, [pc, #284]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d115      	bne.n	800550e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e07f      	b.n	80055e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ee:	4b41      	ldr	r3, [pc, #260]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e073      	b.n	80055e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fe:	4b3d      	ldr	r3, [pc, #244]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e06b      	b.n	80055e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800550e:	4b39      	ldr	r3, [pc, #228]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f023 0203 	bic.w	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	4936      	ldr	r1, [pc, #216]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 800551c:	4313      	orrs	r3, r2
 800551e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005520:	f7fe fb50 	bl	8003bc4 <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005526:	e00a      	b.n	800553e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005528:	f7fe fb4c 	bl	8003bc4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e053      	b.n	80055e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553e:	4b2d      	ldr	r3, [pc, #180]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 020c 	and.w	r2, r3, #12
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	429a      	cmp	r2, r3
 800554e:	d1eb      	bne.n	8005528 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005550:	4b27      	ldr	r3, [pc, #156]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d210      	bcs.n	8005580 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b24      	ldr	r3, [pc, #144]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 020f 	bic.w	r2, r3, #15
 8005566:	4922      	ldr	r1, [pc, #136]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b20      	ldr	r3, [pc, #128]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e032      	b.n	80055e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800558c:	4b19      	ldr	r3, [pc, #100]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4916      	ldr	r1, [pc, #88]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 800559a:	4313      	orrs	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055aa:	4b12      	ldr	r3, [pc, #72]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	490e      	ldr	r1, [pc, #56]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055be:	f000 f821 	bl	8005604 <HAL_RCC_GetSysClockFreq>
 80055c2:	4602      	mov	r2, r0
 80055c4:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	490a      	ldr	r1, [pc, #40]	@ (80055f8 <HAL_RCC_ClockConfig+0x1cc>)
 80055d0:	5ccb      	ldrb	r3, [r1, r3]
 80055d2:	fa22 f303 	lsr.w	r3, r2, r3
 80055d6:	4a09      	ldr	r2, [pc, #36]	@ (80055fc <HAL_RCC_ClockConfig+0x1d0>)
 80055d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055da:	4b09      	ldr	r3, [pc, #36]	@ (8005600 <HAL_RCC_ClockConfig+0x1d4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe faac 	bl	8003b3c <HAL_InitTick>

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40023c00 	.word	0x40023c00
 80055f4:	40023800 	.word	0x40023800
 80055f8:	0800e5d8 	.word	0x0800e5d8
 80055fc:	20000060 	.word	0x20000060
 8005600:	20000064 	.word	0x20000064

08005604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005608:	b094      	sub	sp, #80	@ 0x50
 800560a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005610:	2300      	movs	r3, #0
 8005612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005614:	2300      	movs	r3, #0
 8005616:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800561c:	4b79      	ldr	r3, [pc, #484]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x200>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 030c 	and.w	r3, r3, #12
 8005624:	2b08      	cmp	r3, #8
 8005626:	d00d      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0x40>
 8005628:	2b08      	cmp	r3, #8
 800562a:	f200 80e1 	bhi.w	80057f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <HAL_RCC_GetSysClockFreq+0x34>
 8005632:	2b04      	cmp	r3, #4
 8005634:	d003      	beq.n	800563e <HAL_RCC_GetSysClockFreq+0x3a>
 8005636:	e0db      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005638:	4b73      	ldr	r3, [pc, #460]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x204>)
 800563a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800563c:	e0db      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800563e:	4b73      	ldr	r3, [pc, #460]	@ (800580c <HAL_RCC_GetSysClockFreq+0x208>)
 8005640:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005642:	e0d8      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005644:	4b6f      	ldr	r3, [pc, #444]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x200>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800564c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800564e:	4b6d      	ldr	r3, [pc, #436]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x200>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d063      	beq.n	8005722 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800565a:	4b6a      	ldr	r3, [pc, #424]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x200>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	099b      	lsrs	r3, r3, #6
 8005660:	2200      	movs	r2, #0
 8005662:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005664:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566c:	633b      	str	r3, [r7, #48]	@ 0x30
 800566e:	2300      	movs	r3, #0
 8005670:	637b      	str	r3, [r7, #52]	@ 0x34
 8005672:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005676:	4622      	mov	r2, r4
 8005678:	462b      	mov	r3, r5
 800567a:	f04f 0000 	mov.w	r0, #0
 800567e:	f04f 0100 	mov.w	r1, #0
 8005682:	0159      	lsls	r1, r3, #5
 8005684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005688:	0150      	lsls	r0, r2, #5
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4621      	mov	r1, r4
 8005690:	1a51      	subs	r1, r2, r1
 8005692:	6139      	str	r1, [r7, #16]
 8005694:	4629      	mov	r1, r5
 8005696:	eb63 0301 	sbc.w	r3, r3, r1
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056a8:	4659      	mov	r1, fp
 80056aa:	018b      	lsls	r3, r1, #6
 80056ac:	4651      	mov	r1, sl
 80056ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056b2:	4651      	mov	r1, sl
 80056b4:	018a      	lsls	r2, r1, #6
 80056b6:	4651      	mov	r1, sl
 80056b8:	ebb2 0801 	subs.w	r8, r2, r1
 80056bc:	4659      	mov	r1, fp
 80056be:	eb63 0901 	sbc.w	r9, r3, r1
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056d6:	4690      	mov	r8, r2
 80056d8:	4699      	mov	r9, r3
 80056da:	4623      	mov	r3, r4
 80056dc:	eb18 0303 	adds.w	r3, r8, r3
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	462b      	mov	r3, r5
 80056e4:	eb49 0303 	adc.w	r3, r9, r3
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056f6:	4629      	mov	r1, r5
 80056f8:	024b      	lsls	r3, r1, #9
 80056fa:	4621      	mov	r1, r4
 80056fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005700:	4621      	mov	r1, r4
 8005702:	024a      	lsls	r2, r1, #9
 8005704:	4610      	mov	r0, r2
 8005706:	4619      	mov	r1, r3
 8005708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800570a:	2200      	movs	r2, #0
 800570c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800570e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005714:	f7fb fad8 	bl	8000cc8 <__aeabi_uldivmod>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4613      	mov	r3, r2
 800571e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005720:	e058      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005722:	4b38      	ldr	r3, [pc, #224]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x200>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	2200      	movs	r2, #0
 800572a:	4618      	mov	r0, r3
 800572c:	4611      	mov	r1, r2
 800572e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005732:	623b      	str	r3, [r7, #32]
 8005734:	2300      	movs	r3, #0
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24
 8005738:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	f04f 0000 	mov.w	r0, #0
 8005744:	f04f 0100 	mov.w	r1, #0
 8005748:	0159      	lsls	r1, r3, #5
 800574a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800574e:	0150      	lsls	r0, r2, #5
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4641      	mov	r1, r8
 8005756:	ebb2 0a01 	subs.w	sl, r2, r1
 800575a:	4649      	mov	r1, r9
 800575c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800576c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005774:	ebb2 040a 	subs.w	r4, r2, sl
 8005778:	eb63 050b 	sbc.w	r5, r3, fp
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	f04f 0300 	mov.w	r3, #0
 8005784:	00eb      	lsls	r3, r5, #3
 8005786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800578a:	00e2      	lsls	r2, r4, #3
 800578c:	4614      	mov	r4, r2
 800578e:	461d      	mov	r5, r3
 8005790:	4643      	mov	r3, r8
 8005792:	18e3      	adds	r3, r4, r3
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	464b      	mov	r3, r9
 8005798:	eb45 0303 	adc.w	r3, r5, r3
 800579c:	607b      	str	r3, [r7, #4]
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057aa:	4629      	mov	r1, r5
 80057ac:	028b      	lsls	r3, r1, #10
 80057ae:	4621      	mov	r1, r4
 80057b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057b4:	4621      	mov	r1, r4
 80057b6:	028a      	lsls	r2, r1, #10
 80057b8:	4610      	mov	r0, r2
 80057ba:	4619      	mov	r1, r3
 80057bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057be:	2200      	movs	r2, #0
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	61fa      	str	r2, [r7, #28]
 80057c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057c8:	f7fb fa7e 	bl	8000cc8 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4613      	mov	r3, r2
 80057d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80057d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	0c1b      	lsrs	r3, r3, #16
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	3301      	adds	r3, #1
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80057e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057ee:	e002      	b.n	80057f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057f0:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x204>)
 80057f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3750      	adds	r7, #80	@ 0x50
 80057fc:	46bd      	mov	sp, r7
 80057fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800
 8005808:	00f42400 	.word	0x00f42400
 800580c:	007a1200 	.word	0x007a1200

08005810 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005814:	4b03      	ldr	r3, [pc, #12]	@ (8005824 <HAL_RCC_GetHCLKFreq+0x14>)
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	4618      	mov	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000060 	.word	0x20000060

08005828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800582c:	f7ff fff0 	bl	8005810 <HAL_RCC_GetHCLKFreq>
 8005830:	4602      	mov	r2, r0
 8005832:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	0a9b      	lsrs	r3, r3, #10
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	4903      	ldr	r1, [pc, #12]	@ (800584c <HAL_RCC_GetPCLK1Freq+0x24>)
 800583e:	5ccb      	ldrb	r3, [r1, r3]
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40023800 	.word	0x40023800
 800584c:	0800e5e8 	.word	0x0800e5e8

08005850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005854:	f7ff ffdc 	bl	8005810 <HAL_RCC_GetHCLKFreq>
 8005858:	4602      	mov	r2, r0
 800585a:	4b05      	ldr	r3, [pc, #20]	@ (8005870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	0b5b      	lsrs	r3, r3, #13
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	4903      	ldr	r1, [pc, #12]	@ (8005874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005866:	5ccb      	ldrb	r3, [r1, r3]
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800586c:	4618      	mov	r0, r3
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40023800 	.word	0x40023800
 8005874:	0800e5e8 	.word	0x0800e5e8

08005878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d012      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058a0:	4b69      	ldr	r3, [pc, #420]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4a68      	ldr	r2, [pc, #416]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80058aa:	6093      	str	r3, [r2, #8]
 80058ac:	4b66      	ldr	r3, [pc, #408]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b4:	4964      	ldr	r1, [pc, #400]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80058c2:	2301      	movs	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e0:	4959      	ldr	r1, [pc, #356]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058f0:	d101      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80058f2:	2301      	movs	r3, #1
 80058f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80058fe:	2301      	movs	r3, #1
 8005900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d017      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800590e:	4b4e      	ldr	r3, [pc, #312]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005914:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591c:	494a      	ldr	r1, [pc, #296]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800592c:	d101      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800592e:	2301      	movs	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800593a:	2301      	movs	r3, #1
 800593c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800594a:	2301      	movs	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 808b 	beq.w	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800595c:	4b3a      	ldr	r3, [pc, #232]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	4a39      	ldr	r2, [pc, #228]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005966:	6413      	str	r3, [r2, #64]	@ 0x40
 8005968:	4b37      	ldr	r3, [pc, #220]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005974:	4b35      	ldr	r3, [pc, #212]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a34      	ldr	r2, [pc, #208]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800597a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800597e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005980:	f7fe f920 	bl	8003bc4 <HAL_GetTick>
 8005984:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005986:	e008      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005988:	f7fe f91c 	bl	8003bc4 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	@ 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e357      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800599a:	4b2c      	ldr	r3, [pc, #176]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059a6:	4b28      	ldr	r3, [pc, #160]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d035      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d02e      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059c4:	4b20      	ldr	r3, [pc, #128]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059da:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059de:	4a1a      	ldr	r2, [pc, #104]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80059e6:	4a18      	ldr	r2, [pc, #96]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059ec:	4b16      	ldr	r3, [pc, #88]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d114      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fe f8e4 	bl	8003bc4 <HAL_GetTick>
 80059fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fe:	e00a      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a00:	f7fe f8e0 	bl	8003bc4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e319      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a16:	4b0c      	ldr	r3, [pc, #48]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0ee      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a2e:	d111      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005a30:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a3e:	400b      	ands	r3, r1
 8005a40:	4901      	ldr	r1, [pc, #4]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
 8005a46:	e00b      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	0ffffcff 	.word	0x0ffffcff
 8005a54:	4baa      	ldr	r3, [pc, #680]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	4aa9      	ldr	r2, [pc, #676]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a5e:	6093      	str	r3, [r2, #8]
 8005a60:	4ba7      	ldr	r3, [pc, #668]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6c:	49a4      	ldr	r1, [pc, #656]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a7e:	4ba0      	ldr	r3, [pc, #640]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a84:	4a9e      	ldr	r2, [pc, #632]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a90:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a98:	4999      	ldr	r1, [pc, #612]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aac:	4b94      	ldr	r3, [pc, #592]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aba:	4991      	ldr	r1, [pc, #580]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ace:	4b8c      	ldr	r3, [pc, #560]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005adc:	4988      	ldr	r1, [pc, #544]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005af0:	4b83      	ldr	r3, [pc, #524]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005afe:	4980      	ldr	r1, [pc, #512]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b12:	4b7b      	ldr	r3, [pc, #492]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b18:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b20:	4977      	ldr	r1, [pc, #476]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b34:	4b72      	ldr	r3, [pc, #456]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3a:	f023 0203 	bic.w	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	496f      	ldr	r1, [pc, #444]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b56:	4b6a      	ldr	r3, [pc, #424]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5c:	f023 020c 	bic.w	r2, r3, #12
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b64:	4966      	ldr	r1, [pc, #408]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b78:	4b61      	ldr	r3, [pc, #388]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b86:	495e      	ldr	r1, [pc, #376]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b9a:	4b59      	ldr	r3, [pc, #356]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba8:	4955      	ldr	r1, [pc, #340]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bbc:	4b50      	ldr	r3, [pc, #320]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bca:	494d      	ldr	r1, [pc, #308]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005bde:	4b48      	ldr	r3, [pc, #288]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bec:	4944      	ldr	r1, [pc, #272]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c00:	4b3f      	ldr	r3, [pc, #252]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0e:	493c      	ldr	r1, [pc, #240]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c22:	4b37      	ldr	r3, [pc, #220]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c30:	4933      	ldr	r1, [pc, #204]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c44:	4b2e      	ldr	r3, [pc, #184]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c52:	492b      	ldr	r1, [pc, #172]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d011      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c66:	4b26      	ldr	r3, [pc, #152]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c74:	4922      	ldr	r1, [pc, #136]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c84:	d101      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c86:	2301      	movs	r3, #1
 8005c88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c96:	2301      	movs	r3, #1
 8005c98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ca6:	4b16      	ldr	r3, [pc, #88]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cb4:	4912      	ldr	r1, [pc, #72]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cd8:	4909      	ldr	r1, [pc, #36]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d006      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80d9 	beq.w	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cf4:	4b02      	ldr	r3, [pc, #8]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a01      	ldr	r2, [pc, #4]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cfe:	e001      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005d00:	40023800 	.word	0x40023800
 8005d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d06:	f7fd ff5d 	bl	8003bc4 <HAL_GetTick>
 8005d0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d0e:	f7fd ff59 	bl	8003bc4 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b64      	cmp	r3, #100	@ 0x64
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e194      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d20:	4b6c      	ldr	r3, [pc, #432]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f0      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d021      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11d      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d40:	4b64      	ldr	r3, [pc, #400]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d46:	0c1b      	lsrs	r3, r3, #16
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d4e:	4b61      	ldr	r3, [pc, #388]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d54:	0e1b      	lsrs	r3, r3, #24
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	019a      	lsls	r2, r3, #6
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	041b      	lsls	r3, r3, #16
 8005d66:	431a      	orrs	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	061b      	lsls	r3, r3, #24
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	071b      	lsls	r3, r3, #28
 8005d74:	4957      	ldr	r1, [pc, #348]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d90:	d00a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d02e      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005da6:	d129      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005da8:	4b4a      	ldr	r3, [pc, #296]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005db6:	4b47      	ldr	r3, [pc, #284]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dbc:	0f1b      	lsrs	r3, r3, #28
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	019a      	lsls	r2, r3, #6
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	061b      	lsls	r3, r3, #24
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	071b      	lsls	r3, r3, #28
 8005ddc:	493d      	ldr	r1, [pc, #244]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005de4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dea:	f023 021f 	bic.w	r2, r3, #31
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	3b01      	subs	r3, #1
 8005df4:	4937      	ldr	r1, [pc, #220]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01d      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e08:	4b32      	ldr	r3, [pc, #200]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e0e:	0e1b      	lsrs	r3, r3, #24
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e16:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e1c:	0f1b      	lsrs	r3, r3, #28
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	019a      	lsls	r2, r3, #6
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	041b      	lsls	r3, r3, #16
 8005e30:	431a      	orrs	r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	071b      	lsls	r3, r3, #28
 8005e3c:	4925      	ldr	r1, [pc, #148]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d011      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	019a      	lsls	r2, r3, #6
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	041b      	lsls	r3, r3, #16
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	061b      	lsls	r3, r3, #24
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	071b      	lsls	r3, r3, #28
 8005e6c:	4919      	ldr	r1, [pc, #100]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e74:	4b17      	ldr	r3, [pc, #92]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a16      	ldr	r2, [pc, #88]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e80:	f7fd fea0 	bl	8003bc4 <HAL_GetTick>
 8005e84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e88:	f7fd fe9c 	bl	8003bc4 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	@ 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e0d7      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	f040 80cd 	bne.w	8006048 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005eae:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a08      	ldr	r2, [pc, #32]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eba:	f7fd fe83 	bl	8003bc4 <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ec0:	e00a      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ec2:	f7fd fe7f 	bl	8003bc4 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b64      	cmp	r3, #100	@ 0x64
 8005ece:	d903      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e0ba      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005ed4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee4:	d0ed      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02e      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d12a      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f0e:	4b51      	ldr	r3, [pc, #324]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	0c1b      	lsrs	r3, r3, #16
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f22:	0f1b      	lsrs	r3, r3, #28
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	019a      	lsls	r2, r3, #6
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	061b      	lsls	r3, r3, #24
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	071b      	lsls	r3, r3, #28
 8005f42:	4944      	ldr	r1, [pc, #272]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f4a:	4b42      	ldr	r3, [pc, #264]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	493d      	ldr	r1, [pc, #244]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d022      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f78:	d11d      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f7a:	4b36      	ldr	r3, [pc, #216]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f80:	0e1b      	lsrs	r3, r3, #24
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f88:	4b32      	ldr	r3, [pc, #200]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	0f1b      	lsrs	r3, r3, #28
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	019a      	lsls	r2, r3, #6
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	061b      	lsls	r3, r3, #24
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	071b      	lsls	r3, r3, #28
 8005fae:	4929      	ldr	r1, [pc, #164]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d028      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fc2:	4b24      	ldr	r3, [pc, #144]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	0e1b      	lsrs	r3, r3, #24
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005fd0:	4b20      	ldr	r3, [pc, #128]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	019a      	lsls	r2, r3, #6
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	041b      	lsls	r3, r3, #16
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	061b      	lsls	r3, r3, #24
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	071b      	lsls	r3, r3, #28
 8005ff6:	4917      	ldr	r1, [pc, #92]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ffe:	4b15      	ldr	r3, [pc, #84]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006004:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	4911      	ldr	r1, [pc, #68]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006014:	4b0f      	ldr	r3, [pc, #60]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a0e      	ldr	r2, [pc, #56]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800601a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006020:	f7fd fdd0 	bl	8003bc4 <HAL_GetTick>
 8006024:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006028:	f7fd fdcc 	bl	8003bc4 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e007      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800603a:	4b06      	ldr	r3, [pc, #24]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006046:	d1ef      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40023800 	.word	0x40023800

08006058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e09d      	b.n	80061a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d108      	bne.n	8006084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800607a:	d009      	beq.n	8006090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	61da      	str	r2, [r3, #28]
 8006082:	e005      	b.n	8006090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fc fffe 	bl	80030ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060d0:	d902      	bls.n	80060d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e002      	b.n	80060de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80060e6:	d007      	beq.n	80060f8 <HAL_SPI_Init+0xa0>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060f0:	d002      	beq.n	80060f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613a:	ea42 0103 	orr.w	r1, r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	0c1b      	lsrs	r3, r3, #16
 8006154:	f003 0204 	and.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006174:	ea42 0103 	orr.w	r1, r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_SPI_Transmit+0x22>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e15f      	b.n	8006490 <HAL_SPI_Transmit+0x2e2>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d8:	f7fd fcf4 	bl	8003bc4 <HAL_GetTick>
 80061dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d002      	beq.n	80061f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
 80061f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061f2:	e148      	b.n	8006486 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_SPI_Transmit+0x52>
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006204:	e13f      	b.n	8006486 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2203      	movs	r2, #3
 800620a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	88fa      	ldrh	r2, [r7, #6]
 8006224:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006250:	d10f      	bne.n	8006272 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006260:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006270:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627c:	2b40      	cmp	r3, #64	@ 0x40
 800627e:	d007      	beq.n	8006290 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800628e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006298:	d94f      	bls.n	800633a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_Transmit+0xfa>
 80062a2:	8afb      	ldrh	r3, [r7, #22]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d142      	bne.n	800632e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	881a      	ldrh	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b8:	1c9a      	adds	r2, r3, #2
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062cc:	e02f      	b.n	800632e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d112      	bne.n	8006302 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	881a      	ldrh	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ec:	1c9a      	adds	r2, r3, #2
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006300:	e015      	b.n	800632e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006302:	f7fd fc5f 	bl	8003bc4 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d803      	bhi.n	800631a <HAL_SPI_Transmit+0x16c>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d102      	bne.n	8006320 <HAL_SPI_Transmit+0x172>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d106      	bne.n	800632e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800632c:	e0ab      	b.n	8006486 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1ca      	bne.n	80062ce <HAL_SPI_Transmit+0x120>
 8006338:	e080      	b.n	800643c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_SPI_Transmit+0x19a>
 8006342:	8afb      	ldrh	r3, [r7, #22]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d174      	bne.n	8006432 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	d912      	bls.n	8006378 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006356:	881a      	ldrh	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	1c9a      	adds	r2, r3, #2
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b02      	subs	r3, #2
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006376:	e05c      	b.n	8006432 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800639e:	e048      	b.n	8006432 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d12b      	bne.n	8006406 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d912      	bls.n	80063de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063bc:	881a      	ldrh	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	1c9a      	adds	r2, r3, #2
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b02      	subs	r3, #2
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063dc:	e029      	b.n	8006432 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006404:	e015      	b.n	8006432 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006406:	f7fd fbdd 	bl	8003bc4 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d803      	bhi.n	800641e <HAL_SPI_Transmit+0x270>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d102      	bne.n	8006424 <HAL_SPI_Transmit+0x276>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006430:	e029      	b.n	8006486 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1b1      	bne.n	80063a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fe31 	bl	80070a8 <SPI_EndRxTxTransaction>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e003      	b.n	8006486 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800648e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3720      	adds	r7, #32
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d002      	beq.n	80064be <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80064b8:	2302      	movs	r3, #2
 80064ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064bc:	e11a      	b.n	80066f4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064c6:	d112      	bne.n	80064ee <HAL_SPI_Receive+0x56>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10e      	bne.n	80064ee <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2204      	movs	r2, #4
 80064d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	4613      	mov	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f90e 	bl	8006706 <HAL_SPI_TransmitReceive>
 80064ea:	4603      	mov	r3, r0
 80064ec:	e107      	b.n	80066fe <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_SPI_Receive+0x64>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e100      	b.n	80066fe <HAL_SPI_Receive+0x266>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006504:	f7fd fb5e 	bl	8003bc4 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_SPI_Receive+0x7e>
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
    goto error;
 800651a:	e0eb      	b.n	80066f4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2204      	movs	r2, #4
 8006520:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006566:	d908      	bls.n	800657a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006576:	605a      	str	r2, [r3, #4]
 8006578:	e007      	b.n	800658a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006588:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006592:	d10f      	bne.n	80065b4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065be:	2b40      	cmp	r3, #64	@ 0x40
 80065c0:	d007      	beq.n	80065d2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065da:	d86f      	bhi.n	80066bc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065dc:	e034      	b.n	8006648 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d117      	bne.n	800661c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f103 020c 	add.w	r2, r3, #12
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800661a:	e015      	b.n	8006648 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800661c:	f7fd fad2 	bl	8003bc4 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d803      	bhi.n	8006634 <HAL_SPI_Receive+0x19c>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d102      	bne.n	800663a <HAL_SPI_Receive+0x1a2>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006646:	e055      	b.n	80066f4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1c4      	bne.n	80065de <HAL_SPI_Receive+0x146>
 8006654:	e038      	b.n	80066c8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d115      	bne.n	8006690 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	b292      	uxth	r2, r2
 8006670:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	1c9a      	adds	r2, r3, #2
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800668e:	e015      	b.n	80066bc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006690:	f7fd fa98 	bl	8003bc4 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d803      	bhi.n	80066a8 <HAL_SPI_Receive+0x210>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d102      	bne.n	80066ae <HAL_SPI_Receive+0x216>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80066ba:	e01b      	b.n	80066f4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1c6      	bne.n	8006656 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fc6f 	bl	8006fb0 <SPI_EndRxTransaction>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	75fb      	strb	r3, [r7, #23]
 80066ea:	e003      	b.n	80066f4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b08a      	sub	sp, #40	@ 0x28
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
 8006712:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006714:	2301      	movs	r3, #1
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_SPI_TransmitReceive+0x26>
 8006728:	2302      	movs	r3, #2
 800672a:	e20a      	b.n	8006b42 <HAL_SPI_TransmitReceive+0x43c>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006734:	f7fd fa46 	bl	8003bc4 <HAL_GetTick>
 8006738:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006740:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006748:	887b      	ldrh	r3, [r7, #2]
 800674a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800674c:	887b      	ldrh	r3, [r7, #2]
 800674e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006750:	7efb      	ldrb	r3, [r7, #27]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d00e      	beq.n	8006774 <HAL_SPI_TransmitReceive+0x6e>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800675c:	d106      	bne.n	800676c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <HAL_SPI_TransmitReceive+0x66>
 8006766:	7efb      	ldrb	r3, [r7, #27]
 8006768:	2b04      	cmp	r3, #4
 800676a:	d003      	beq.n	8006774 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800676c:	2302      	movs	r3, #2
 800676e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006772:	e1e0      	b.n	8006b36 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <HAL_SPI_TransmitReceive+0x80>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_SPI_TransmitReceive+0x80>
 8006780:	887b      	ldrh	r3, [r7, #2]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d103      	bne.n	800678e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800678c:	e1d3      	b.n	8006b36 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b04      	cmp	r3, #4
 8006798:	d003      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2205      	movs	r2, #5
 800679e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	887a      	ldrh	r2, [r7, #2]
 80067b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	887a      	ldrh	r2, [r7, #2]
 80067ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	887a      	ldrh	r2, [r7, #2]
 80067c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	887a      	ldrh	r2, [r7, #2]
 80067ce:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80067e4:	d802      	bhi.n	80067ec <HAL_SPI_TransmitReceive+0xe6>
 80067e6:	8a3b      	ldrh	r3, [r7, #16]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d908      	bls.n	80067fe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067fa:	605a      	str	r2, [r3, #4]
 80067fc:	e007      	b.n	800680e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800680c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006818:	2b40      	cmp	r3, #64	@ 0x40
 800681a:	d007      	beq.n	800682c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800682a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006834:	f240 8081 	bls.w	800693a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_SPI_TransmitReceive+0x140>
 8006840:	8a7b      	ldrh	r3, [r7, #18]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d16d      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684a:	881a      	ldrh	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006856:	1c9a      	adds	r2, r3, #2
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800686a:	e05a      	b.n	8006922 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d11b      	bne.n	80068b2 <HAL_SPI_TransmitReceive+0x1ac>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d016      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x1ac>
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	2b01      	cmp	r3, #1
 8006888:	d113      	bne.n	80068b2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	881a      	ldrh	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	1c9a      	adds	r2, r3, #2
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d11c      	bne.n	80068fa <HAL_SPI_TransmitReceive+0x1f4>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d016      	beq.n	80068fa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d6:	b292      	uxth	r2, r2
 80068d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	1c9a      	adds	r2, r3, #2
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068f6:	2301      	movs	r3, #1
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068fa:	f7fd f963 	bl	8003bc4 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006906:	429a      	cmp	r2, r3
 8006908:	d80b      	bhi.n	8006922 <HAL_SPI_TransmitReceive+0x21c>
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d007      	beq.n	8006922 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006920:	e109      	b.n	8006b36 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006926:	b29b      	uxth	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d19f      	bne.n	800686c <HAL_SPI_TransmitReceive+0x166>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d199      	bne.n	800686c <HAL_SPI_TransmitReceive+0x166>
 8006938:	e0e3      	b.n	8006b02 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_SPI_TransmitReceive+0x244>
 8006942:	8a7b      	ldrh	r3, [r7, #18]
 8006944:	2b01      	cmp	r3, #1
 8006946:	f040 80cf 	bne.w	8006ae8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	d912      	bls.n	800697a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006958:	881a      	ldrh	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	1c9a      	adds	r2, r3, #2
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b02      	subs	r3, #2
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006978:	e0b6      	b.n	8006ae8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	330c      	adds	r3, #12
 8006984:	7812      	ldrb	r2, [r2, #0]
 8006986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a0:	e0a2      	b.n	8006ae8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d134      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x314>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d02f      	beq.n	8006a1a <HAL_SPI_TransmitReceive+0x314>
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d12c      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d912      	bls.n	80069f0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ce:	881a      	ldrh	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069da:	1c9a      	adds	r2, r3, #2
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b02      	subs	r3, #2
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069ee:	e012      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d148      	bne.n	8006aba <HAL_SPI_TransmitReceive+0x3b4>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d042      	beq.n	8006aba <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d923      	bls.n	8006a88 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b02      	subs	r3, #2
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d81f      	bhi.n	8006ab6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a84:	605a      	str	r2, [r3, #4]
 8006a86:	e016      	b.n	8006ab6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f103 020c 	add.w	r2, r3, #12
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006aba:	f7fd f883 	bl	8003bc4 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d803      	bhi.n	8006ad2 <HAL_SPI_TransmitReceive+0x3cc>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d102      	bne.n	8006ad8 <HAL_SPI_TransmitReceive+0x3d2>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d107      	bne.n	8006ae8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006ae6:	e026      	b.n	8006b36 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f47f af57 	bne.w	80069a2 <HAL_SPI_TransmitReceive+0x29c>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f47f af50 	bne.w	80069a2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 face 	bl	80070a8 <SPI_EndRxTxTransaction>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b2c:	e003      	b.n	8006b36 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3728      	adds	r7, #40	@ 0x28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10e      	bne.n	8006b8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d004      	beq.n	8006b8c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
    return;
 8006b8a:	e0ce      	b.n	8006d2a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <HAL_SPI_IRQHandler+0x5e>
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
    return;
 8006ba8:	e0bf      	b.n	8006d2a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <HAL_SPI_IRQHandler+0x7e>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d105      	bne.n	8006bca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80b0 	beq.w	8006d2a <HAL_SPI_IRQHandler+0x1de>
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80aa 	beq.w	8006d2a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d023      	beq.n	8006c28 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d011      	beq.n	8006c10 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf0:	f043 0204 	orr.w	r2, r3, #4
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	e00b      	b.n	8006c28 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c10:	2300      	movs	r3, #0
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	693b      	ldr	r3, [r7, #16]
        return;
 8006c26:	e080      	b.n	8006d2a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d014      	beq.n	8006c5c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00c      	beq.n	8006c80 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c6a:	f043 0208 	orr.w	r2, r3, #8
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c72:	2300      	movs	r3, #0
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d04f      	beq.n	8006d28 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d104      	bne.n	8006cb4 <HAL_SPI_IRQHandler+0x168>
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d034      	beq.n	8006d1e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0203 	bic.w	r2, r2, #3
 8006cc2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d011      	beq.n	8006cf0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd0:	4a17      	ldr	r2, [pc, #92]	@ (8006d30 <HAL_SPI_IRQHandler+0x1e4>)
 8006cd2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fd fa33 	bl	8004144 <HAL_DMA_Abort_IT>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d016      	beq.n	8006d26 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8006d30 <HAL_SPI_IRQHandler+0x1e4>)
 8006cfe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fd fa1d 	bl	8004144 <HAL_DMA_Abort_IT>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006d1c:	e003      	b.n	8006d26 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f808 	bl	8006d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d24:	e000      	b.n	8006d28 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006d26:	bf00      	nop
    return;
 8006d28:	bf00      	nop
  }
}
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	08006d49 	.word	0x08006d49

08006d34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff ffe5 	bl	8006d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d84:	f7fc ff1e 	bl	8003bc4 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4413      	add	r3, r2
 8006d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d94:	f7fc ff16 	bl	8003bc4 <HAL_GetTick>
 8006d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d9a:	4b39      	ldr	r3, [pc, #228]	@ (8006e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	015b      	lsls	r3, r3, #5
 8006da0:	0d1b      	lsrs	r3, r3, #20
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006daa:	e054      	b.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d050      	beq.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006db4:	f7fc ff06 	bl	8003bc4 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d902      	bls.n	8006dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d13d      	bne.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006de2:	d111      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dec:	d004      	beq.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df6:	d107      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e10:	d10f      	bne.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e017      	b.n	8006e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d19b      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000060 	.word	0x20000060

08006e84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	@ 0x28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e96:	f7fc fe95 	bl	8003bc4 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006ea6:	f7fc fe8d 	bl	8003bc4 <HAL_GetTick>
 8006eaa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8006fac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	00da      	lsls	r2, r3, #3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	0d1b      	lsrs	r3, r3, #20
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ecc:	e060      	b.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ed4:	d107      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d050      	beq.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eee:	f7fc fe69 	bl	8003bc4 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d902      	bls.n	8006f04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d13d      	bne.n	8006f80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f1c:	d111      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f26:	d004      	beq.n	8006f32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f30:	d107      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f4a:	d10f      	bne.n	8006f6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e010      	b.n	8006fa2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d196      	bne.n	8006ece <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3728      	adds	r7, #40	@ 0x28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000060 	.word	0x20000060

08006fb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc4:	d111      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fce:	d004      	beq.n	8006fda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd8:	d107      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff2:	d112      	bne.n	800701a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2180      	movs	r1, #128	@ 0x80
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f7ff feb8 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d021      	beq.n	800704e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700e:	f043 0220 	orr.w	r2, r3, #32
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e03d      	b.n	8007096 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800701a:	4b21      	ldr	r3, [pc, #132]	@ (80070a0 <SPI_EndRxTransaction+0xf0>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a21      	ldr	r2, [pc, #132]	@ (80070a4 <SPI_EndRxTransaction+0xf4>)
 8007020:	fba2 2303 	umull	r2, r3, r2, r3
 8007024:	0d5b      	lsrs	r3, r3, #21
 8007026:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800702a:	fb02 f303 	mul.w	r3, r2, r3
 800702e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	3b01      	subs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007046:	2b80      	cmp	r3, #128	@ 0x80
 8007048:	d0f2      	beq.n	8007030 <SPI_EndRxTransaction+0x80>
 800704a:	e000      	b.n	800704e <SPI_EndRxTransaction+0x9e>
        break;
 800704c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007056:	d11d      	bne.n	8007094 <SPI_EndRxTransaction+0xe4>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007060:	d004      	beq.n	800706c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706a:	d113      	bne.n	8007094 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff03 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e000      	b.n	8007096 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000060 	.word	0x20000060
 80070a4:	165e9f81 	.word	0x165e9f81

080070a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7ff fedf 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d0:	f043 0220 	orr.w	r2, r3, #32
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e046      	b.n	800716a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070dc:	4b25      	ldr	r3, [pc, #148]	@ (8007174 <SPI_EndRxTxTransaction+0xcc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a25      	ldr	r2, [pc, #148]	@ (8007178 <SPI_EndRxTxTransaction+0xd0>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	0d5b      	lsrs	r3, r3, #21
 80070e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070ec:	fb02 f303 	mul.w	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070fa:	d112      	bne.n	8007122 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2200      	movs	r2, #0
 8007104:	2180      	movs	r1, #128	@ 0x80
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff fe34 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d016      	beq.n	8007140 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007116:	f043 0220 	orr.w	r2, r3, #32
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e023      	b.n	800716a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	3b01      	subs	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007138:	2b80      	cmp	r3, #128	@ 0x80
 800713a:	d0f2      	beq.n	8007122 <SPI_EndRxTxTransaction+0x7a>
 800713c:	e000      	b.n	8007140 <SPI_EndRxTxTransaction+0x98>
        break;
 800713e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff fe99 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800715c:	f043 0220 	orr.w	r2, r3, #32
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e000      	b.n	800716a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	20000060 	.word	0x20000060
 8007178:	165e9f81 	.word	0x165e9f81

0800717c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e049      	b.n	8007222 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d106      	bne.n	80071a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fc fa74 	bl	8003690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4619      	mov	r1, r3
 80071ba:	4610      	mov	r0, r2
 80071bc:	f000 fe4c 	bl	8007e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	d001      	beq.n	8007244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e054      	b.n	80072ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a26      	ldr	r2, [pc, #152]	@ (80072fc <HAL_TIM_Base_Start_IT+0xd0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d022      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0x80>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726e:	d01d      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0x80>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a22      	ldr	r2, [pc, #136]	@ (8007300 <HAL_TIM_Base_Start_IT+0xd4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d018      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0x80>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a21      	ldr	r2, [pc, #132]	@ (8007304 <HAL_TIM_Base_Start_IT+0xd8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d013      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0x80>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1f      	ldr	r2, [pc, #124]	@ (8007308 <HAL_TIM_Base_Start_IT+0xdc>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00e      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0x80>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1e      	ldr	r2, [pc, #120]	@ (800730c <HAL_TIM_Base_Start_IT+0xe0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d009      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0x80>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1c      	ldr	r2, [pc, #112]	@ (8007310 <HAL_TIM_Base_Start_IT+0xe4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d004      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0x80>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007314 <HAL_TIM_Base_Start_IT+0xe8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d115      	bne.n	80072d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	4b19      	ldr	r3, [pc, #100]	@ (8007318 <HAL_TIM_Base_Start_IT+0xec>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b06      	cmp	r3, #6
 80072bc:	d015      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0xbe>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072c4:	d011      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f042 0201 	orr.w	r2, r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d6:	e008      	b.n	80072ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e000      	b.n	80072ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40010000 	.word	0x40010000
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40010400 	.word	0x40010400
 8007310:	40014000 	.word	0x40014000
 8007314:	40001800 	.word	0x40001800
 8007318:	00010007 	.word	0x00010007

0800731c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e049      	b.n	80073c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f841 	bl	80073ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3304      	adds	r3, #4
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f000 fd7c 	bl	8007e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <HAL_TIM_PWM_Start+0x24>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	bf14      	ite	ne
 80073fc:	2301      	movne	r3, #1
 80073fe:	2300      	moveq	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	e03c      	b.n	800747e <HAL_TIM_PWM_Start+0x9e>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b04      	cmp	r3, #4
 8007408:	d109      	bne.n	800741e <HAL_TIM_PWM_Start+0x3e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b01      	cmp	r3, #1
 8007414:	bf14      	ite	ne
 8007416:	2301      	movne	r3, #1
 8007418:	2300      	moveq	r3, #0
 800741a:	b2db      	uxtb	r3, r3
 800741c:	e02f      	b.n	800747e <HAL_TIM_PWM_Start+0x9e>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d109      	bne.n	8007438 <HAL_TIM_PWM_Start+0x58>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	bf14      	ite	ne
 8007430:	2301      	movne	r3, #1
 8007432:	2300      	moveq	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	e022      	b.n	800747e <HAL_TIM_PWM_Start+0x9e>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b0c      	cmp	r3, #12
 800743c:	d109      	bne.n	8007452 <HAL_TIM_PWM_Start+0x72>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	bf14      	ite	ne
 800744a:	2301      	movne	r3, #1
 800744c:	2300      	moveq	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	e015      	b.n	800747e <HAL_TIM_PWM_Start+0x9e>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b10      	cmp	r3, #16
 8007456:	d109      	bne.n	800746c <HAL_TIM_PWM_Start+0x8c>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	e008      	b.n	800747e <HAL_TIM_PWM_Start+0x9e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	bf14      	ite	ne
 8007478:	2301      	movne	r3, #1
 800747a:	2300      	moveq	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e092      	b.n	80075ac <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <HAL_TIM_PWM_Start+0xb6>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007494:	e023      	b.n	80074de <HAL_TIM_PWM_Start+0xfe>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b04      	cmp	r3, #4
 800749a:	d104      	bne.n	80074a6 <HAL_TIM_PWM_Start+0xc6>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074a4:	e01b      	b.n	80074de <HAL_TIM_PWM_Start+0xfe>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d104      	bne.n	80074b6 <HAL_TIM_PWM_Start+0xd6>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074b4:	e013      	b.n	80074de <HAL_TIM_PWM_Start+0xfe>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b0c      	cmp	r3, #12
 80074ba:	d104      	bne.n	80074c6 <HAL_TIM_PWM_Start+0xe6>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074c4:	e00b      	b.n	80074de <HAL_TIM_PWM_Start+0xfe>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d104      	bne.n	80074d6 <HAL_TIM_PWM_Start+0xf6>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074d4:	e003      	b.n	80074de <HAL_TIM_PWM_Start+0xfe>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2202      	movs	r2, #2
 80074da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2201      	movs	r2, #1
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f001 f85a 	bl	80085a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a30      	ldr	r2, [pc, #192]	@ (80075b4 <HAL_TIM_PWM_Start+0x1d4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d004      	beq.n	8007500 <HAL_TIM_PWM_Start+0x120>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a2f      	ldr	r2, [pc, #188]	@ (80075b8 <HAL_TIM_PWM_Start+0x1d8>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d101      	bne.n	8007504 <HAL_TIM_PWM_Start+0x124>
 8007500:	2301      	movs	r3, #1
 8007502:	e000      	b.n	8007506 <HAL_TIM_PWM_Start+0x126>
 8007504:	2300      	movs	r3, #0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007518:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a25      	ldr	r2, [pc, #148]	@ (80075b4 <HAL_TIM_PWM_Start+0x1d4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d022      	beq.n	800756a <HAL_TIM_PWM_Start+0x18a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752c:	d01d      	beq.n	800756a <HAL_TIM_PWM_Start+0x18a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a22      	ldr	r2, [pc, #136]	@ (80075bc <HAL_TIM_PWM_Start+0x1dc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d018      	beq.n	800756a <HAL_TIM_PWM_Start+0x18a>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a20      	ldr	r2, [pc, #128]	@ (80075c0 <HAL_TIM_PWM_Start+0x1e0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <HAL_TIM_PWM_Start+0x18a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1f      	ldr	r2, [pc, #124]	@ (80075c4 <HAL_TIM_PWM_Start+0x1e4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00e      	beq.n	800756a <HAL_TIM_PWM_Start+0x18a>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a19      	ldr	r2, [pc, #100]	@ (80075b8 <HAL_TIM_PWM_Start+0x1d8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d009      	beq.n	800756a <HAL_TIM_PWM_Start+0x18a>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1b      	ldr	r2, [pc, #108]	@ (80075c8 <HAL_TIM_PWM_Start+0x1e8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d004      	beq.n	800756a <HAL_TIM_PWM_Start+0x18a>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a19      	ldr	r2, [pc, #100]	@ (80075cc <HAL_TIM_PWM_Start+0x1ec>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d115      	bne.n	8007596 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	4b17      	ldr	r3, [pc, #92]	@ (80075d0 <HAL_TIM_PWM_Start+0x1f0>)
 8007572:	4013      	ands	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b06      	cmp	r3, #6
 800757a:	d015      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x1c8>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007582:	d011      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007594:	e008      	b.n	80075a8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0201 	orr.w	r2, r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e000      	b.n	80075aa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40010000 	.word	0x40010000
 80075b8:	40010400 	.word	0x40010400
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	40000c00 	.word	0x40000c00
 80075c8:	40014000 	.word	0x40014000
 80075cc:	40001800 	.word	0x40001800
 80075d0:	00010007 	.word	0x00010007

080075d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e08f      	b.n	8007708 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fc f881 	bl	8003704 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2202      	movs	r2, #2
 8007606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6899      	ldr	r1, [r3, #8]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	4b3e      	ldr	r3, [pc, #248]	@ (8007710 <HAL_TIM_Encoder_Init+0x13c>)
 8007616:	400b      	ands	r3, r1
 8007618:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3304      	adds	r3, #4
 8007622:	4619      	mov	r1, r3
 8007624:	4610      	mov	r0, r2
 8007626:	f000 fc17 	bl	8007e58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4b31      	ldr	r3, [pc, #196]	@ (8007714 <HAL_TIM_Encoder_Init+0x140>)
 8007650:	4013      	ands	r3, r2
 8007652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	4313      	orrs	r3, r2
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4b2b      	ldr	r3, [pc, #172]	@ (8007718 <HAL_TIM_Encoder_Init+0x144>)
 800766a:	4013      	ands	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	4b2a      	ldr	r3, [pc, #168]	@ (800771c <HAL_TIM_Encoder_Init+0x148>)
 8007672:	4013      	ands	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	4313      	orrs	r3, r2
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	011a      	lsls	r2, r3, #4
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	031b      	lsls	r3, r3, #12
 8007694:	4313      	orrs	r3, r2
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4313      	orrs	r3, r2
 800769a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80076a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80076aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	4313      	orrs	r3, r2
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	fffebff8 	.word	0xfffebff8
 8007714:	fffffcfc 	.word	0xfffffcfc
 8007718:	fffff3f3 	.word	0xfffff3f3
 800771c:	ffff0f0f 	.word	0xffff0f0f

08007720 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007730:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007738:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007740:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007748:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d110      	bne.n	8007772 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d102      	bne.n	800775c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007756:	7b7b      	ldrb	r3, [r7, #13]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d001      	beq.n	8007760 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e069      	b.n	8007834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007770:	e031      	b.n	80077d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b04      	cmp	r3, #4
 8007776:	d110      	bne.n	800779a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d102      	bne.n	8007784 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800777e:	7b3b      	ldrb	r3, [r7, #12]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d001      	beq.n	8007788 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e055      	b.n	8007834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007798:	e01d      	b.n	80077d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d108      	bne.n	80077b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d105      	bne.n	80077b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077a6:	7b7b      	ldrb	r3, [r7, #13]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d102      	bne.n	80077b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077ac:	7b3b      	ldrb	r3, [r7, #12]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d001      	beq.n	80077b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e03e      	b.n	8007834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2202      	movs	r2, #2
 80077ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2202      	movs	r2, #2
 80077c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2202      	movs	r2, #2
 80077d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_TIM_Encoder_Start+0xc4>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d008      	beq.n	80077f4 <HAL_TIM_Encoder_Start+0xd4>
 80077e2:	e00f      	b.n	8007804 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2201      	movs	r2, #1
 80077ea:	2100      	movs	r1, #0
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fed7 	bl	80085a0 <TIM_CCxChannelCmd>
      break;
 80077f2:	e016      	b.n	8007822 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2201      	movs	r2, #1
 80077fa:	2104      	movs	r1, #4
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fecf 	bl	80085a0 <TIM_CCxChannelCmd>
      break;
 8007802:	e00e      	b.n	8007822 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2201      	movs	r2, #1
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fec7 	bl	80085a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2201      	movs	r2, #1
 8007818:	2104      	movs	r1, #4
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fec0 	bl	80085a0 <TIM_CCxChannelCmd>
      break;
 8007820:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0201 	orr.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d020      	beq.n	80078a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01b      	beq.n	80078a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0202 	mvn.w	r2, #2
 8007870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fac8 	bl	8007e1c <HAL_TIM_IC_CaptureCallback>
 800788c:	e005      	b.n	800789a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 faba 	bl	8007e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 facb 	bl	8007e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f003 0304 	and.w	r3, r3, #4
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d020      	beq.n	80078ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01b      	beq.n	80078ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f06f 0204 	mvn.w	r2, #4
 80078bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 faa2 	bl	8007e1c <HAL_TIM_IC_CaptureCallback>
 80078d8:	e005      	b.n	80078e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa94 	bl	8007e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 faa5 	bl	8007e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d020      	beq.n	8007938 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01b      	beq.n	8007938 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0208 	mvn.w	r2, #8
 8007908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2204      	movs	r2, #4
 800790e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa7c 	bl	8007e1c <HAL_TIM_IC_CaptureCallback>
 8007924:	e005      	b.n	8007932 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa6e 	bl	8007e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fa7f 	bl	8007e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0310 	and.w	r3, r3, #16
 800793e:	2b00      	cmp	r3, #0
 8007940:	d020      	beq.n	8007984 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01b      	beq.n	8007984 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f06f 0210 	mvn.w	r2, #16
 8007954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2208      	movs	r2, #8
 800795a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa56 	bl	8007e1c <HAL_TIM_IC_CaptureCallback>
 8007970:	e005      	b.n	800797e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fa48 	bl	8007e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fa59 	bl	8007e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00c      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d007      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0201 	mvn.w	r2, #1
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fb fa4c 	bl	8002e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d104      	bne.n	80079bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00c      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80079ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 ff21 	bl	8008818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00c      	beq.n	80079fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80079f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 ff19 	bl	800882c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fa13 	bl	8007e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00c      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f06f 0220 	mvn.w	r2, #32
 8007a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fee1 	bl	8008804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d101      	bne.n	8007a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e0ff      	b.n	8007c6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b14      	cmp	r3, #20
 8007a76:	f200 80f0 	bhi.w	8007c5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007ad5 	.word	0x08007ad5
 8007a84:	08007c5b 	.word	0x08007c5b
 8007a88:	08007c5b 	.word	0x08007c5b
 8007a8c:	08007c5b 	.word	0x08007c5b
 8007a90:	08007b15 	.word	0x08007b15
 8007a94:	08007c5b 	.word	0x08007c5b
 8007a98:	08007c5b 	.word	0x08007c5b
 8007a9c:	08007c5b 	.word	0x08007c5b
 8007aa0:	08007b57 	.word	0x08007b57
 8007aa4:	08007c5b 	.word	0x08007c5b
 8007aa8:	08007c5b 	.word	0x08007c5b
 8007aac:	08007c5b 	.word	0x08007c5b
 8007ab0:	08007b97 	.word	0x08007b97
 8007ab4:	08007c5b 	.word	0x08007c5b
 8007ab8:	08007c5b 	.word	0x08007c5b
 8007abc:	08007c5b 	.word	0x08007c5b
 8007ac0:	08007bd9 	.word	0x08007bd9
 8007ac4:	08007c5b 	.word	0x08007c5b
 8007ac8:	08007c5b 	.word	0x08007c5b
 8007acc:	08007c5b 	.word	0x08007c5b
 8007ad0:	08007c19 	.word	0x08007c19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fa68 	bl	8007fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0208 	orr.w	r2, r2, #8
 8007aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0204 	bic.w	r2, r2, #4
 8007afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6999      	ldr	r1, [r3, #24]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	691a      	ldr	r2, [r3, #16]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	619a      	str	r2, [r3, #24]
      break;
 8007b12:	e0a5      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 faba 	bl	8008094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6999      	ldr	r1, [r3, #24]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	021a      	lsls	r2, r3, #8
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	619a      	str	r2, [r3, #24]
      break;
 8007b54:	e084      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fb11 	bl	8008184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69da      	ldr	r2, [r3, #28]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0208 	orr.w	r2, r2, #8
 8007b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0204 	bic.w	r2, r2, #4
 8007b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69d9      	ldr	r1, [r3, #28]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	61da      	str	r2, [r3, #28]
      break;
 8007b94:	e064      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68b9      	ldr	r1, [r7, #8]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fb67 	bl	8008270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69da      	ldr	r2, [r3, #28]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69d9      	ldr	r1, [r3, #28]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	021a      	lsls	r2, r3, #8
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	61da      	str	r2, [r3, #28]
      break;
 8007bd6:	e043      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fb9e 	bl	8008320 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0208 	orr.w	r2, r2, #8
 8007bf2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0204 	bic.w	r2, r2, #4
 8007c02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007c16:	e023      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fbd0 	bl	80083c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	021a      	lsls	r2, r3, #8
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007c58:	e002      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop

08007c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIM_ConfigClockSource+0x1c>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e0b4      	b.n	8007dfa <HAL_TIM_ConfigClockSource+0x186>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	4b56      	ldr	r3, [pc, #344]	@ (8007e04 <HAL_TIM_ConfigClockSource+0x190>)
 8007cac:	4013      	ands	r3, r2
 8007cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cc8:	d03e      	beq.n	8007d48 <HAL_TIM_ConfigClockSource+0xd4>
 8007cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cce:	f200 8087 	bhi.w	8007de0 <HAL_TIM_ConfigClockSource+0x16c>
 8007cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cd6:	f000 8086 	beq.w	8007de6 <HAL_TIM_ConfigClockSource+0x172>
 8007cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cde:	d87f      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ce0:	2b70      	cmp	r3, #112	@ 0x70
 8007ce2:	d01a      	beq.n	8007d1a <HAL_TIM_ConfigClockSource+0xa6>
 8007ce4:	2b70      	cmp	r3, #112	@ 0x70
 8007ce6:	d87b      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ce8:	2b60      	cmp	r3, #96	@ 0x60
 8007cea:	d050      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x11a>
 8007cec:	2b60      	cmp	r3, #96	@ 0x60
 8007cee:	d877      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x16c>
 8007cf0:	2b50      	cmp	r3, #80	@ 0x50
 8007cf2:	d03c      	beq.n	8007d6e <HAL_TIM_ConfigClockSource+0xfa>
 8007cf4:	2b50      	cmp	r3, #80	@ 0x50
 8007cf6:	d873      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x16c>
 8007cf8:	2b40      	cmp	r3, #64	@ 0x40
 8007cfa:	d058      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0x13a>
 8007cfc:	2b40      	cmp	r3, #64	@ 0x40
 8007cfe:	d86f      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x16c>
 8007d00:	2b30      	cmp	r3, #48	@ 0x30
 8007d02:	d064      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x15a>
 8007d04:	2b30      	cmp	r3, #48	@ 0x30
 8007d06:	d86b      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x16c>
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d060      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x15a>
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d867      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x16c>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d05c      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x15a>
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d05a      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x15a>
 8007d18:	e062      	b.n	8007de0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d2a:	f000 fc19 	bl	8008560 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	609a      	str	r2, [r3, #8]
      break;
 8007d46:	e04f      	b.n	8007de8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d58:	f000 fc02 	bl	8008560 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d6a:	609a      	str	r2, [r3, #8]
      break;
 8007d6c:	e03c      	b.n	8007de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f000 fb76 	bl	800846c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2150      	movs	r1, #80	@ 0x50
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fbcf 	bl	800852a <TIM_ITRx_SetConfig>
      break;
 8007d8c:	e02c      	b.n	8007de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f000 fb95 	bl	80084ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2160      	movs	r1, #96	@ 0x60
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fbbf 	bl	800852a <TIM_ITRx_SetConfig>
      break;
 8007dac:	e01c      	b.n	8007de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f000 fb56 	bl	800846c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2140      	movs	r1, #64	@ 0x40
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fbaf 	bl	800852a <TIM_ITRx_SetConfig>
      break;
 8007dcc:	e00c      	b.n	8007de8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4610      	mov	r0, r2
 8007dda:	f000 fba6 	bl	800852a <TIM_ITRx_SetConfig>
      break;
 8007dde:	e003      	b.n	8007de8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	73fb      	strb	r3, [r7, #15]
      break;
 8007de4:	e000      	b.n	8007de8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007de6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	fffeff88 	.word	0xfffeff88

08007e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a46      	ldr	r2, [pc, #280]	@ (8007f84 <TIM_Base_SetConfig+0x12c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d013      	beq.n	8007e98 <TIM_Base_SetConfig+0x40>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e76:	d00f      	beq.n	8007e98 <TIM_Base_SetConfig+0x40>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a43      	ldr	r2, [pc, #268]	@ (8007f88 <TIM_Base_SetConfig+0x130>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00b      	beq.n	8007e98 <TIM_Base_SetConfig+0x40>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a42      	ldr	r2, [pc, #264]	@ (8007f8c <TIM_Base_SetConfig+0x134>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d007      	beq.n	8007e98 <TIM_Base_SetConfig+0x40>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a41      	ldr	r2, [pc, #260]	@ (8007f90 <TIM_Base_SetConfig+0x138>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d003      	beq.n	8007e98 <TIM_Base_SetConfig+0x40>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a40      	ldr	r2, [pc, #256]	@ (8007f94 <TIM_Base_SetConfig+0x13c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d108      	bne.n	8007eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a35      	ldr	r2, [pc, #212]	@ (8007f84 <TIM_Base_SetConfig+0x12c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d02b      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb8:	d027      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a32      	ldr	r2, [pc, #200]	@ (8007f88 <TIM_Base_SetConfig+0x130>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d023      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a31      	ldr	r2, [pc, #196]	@ (8007f8c <TIM_Base_SetConfig+0x134>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d01f      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a30      	ldr	r2, [pc, #192]	@ (8007f90 <TIM_Base_SetConfig+0x138>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d01b      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8007f94 <TIM_Base_SetConfig+0x13c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d017      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a2e      	ldr	r2, [pc, #184]	@ (8007f98 <TIM_Base_SetConfig+0x140>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d013      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8007f9c <TIM_Base_SetConfig+0x144>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00f      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa0 <TIM_Base_SetConfig+0x148>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d00b      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8007fa4 <TIM_Base_SetConfig+0x14c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d007      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa8 <TIM_Base_SetConfig+0x150>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d003      	beq.n	8007f0a <TIM_Base_SetConfig+0xb2>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a29      	ldr	r2, [pc, #164]	@ (8007fac <TIM_Base_SetConfig+0x154>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d108      	bne.n	8007f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a10      	ldr	r2, [pc, #64]	@ (8007f84 <TIM_Base_SetConfig+0x12c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d003      	beq.n	8007f50 <TIM_Base_SetConfig+0xf8>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a12      	ldr	r2, [pc, #72]	@ (8007f94 <TIM_Base_SetConfig+0x13c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d103      	bne.n	8007f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d105      	bne.n	8007f76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f023 0201 	bic.w	r2, r3, #1
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	611a      	str	r2, [r3, #16]
  }
}
 8007f76:	bf00      	nop
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40000400 	.word	0x40000400
 8007f8c:	40000800 	.word	0x40000800
 8007f90:	40000c00 	.word	0x40000c00
 8007f94:	40010400 	.word	0x40010400
 8007f98:	40014000 	.word	0x40014000
 8007f9c:	40014400 	.word	0x40014400
 8007fa0:	40014800 	.word	0x40014800
 8007fa4:	40001800 	.word	0x40001800
 8007fa8:	40001c00 	.word	0x40001c00
 8007fac:	40002000 	.word	0x40002000

08007fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	f023 0201 	bic.w	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4b2b      	ldr	r3, [pc, #172]	@ (8008088 <TIM_OC1_SetConfig+0xd8>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f023 0302 	bic.w	r3, r3, #2
 8007ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a21      	ldr	r2, [pc, #132]	@ (800808c <TIM_OC1_SetConfig+0xdc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d003      	beq.n	8008014 <TIM_OC1_SetConfig+0x64>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a20      	ldr	r2, [pc, #128]	@ (8008090 <TIM_OC1_SetConfig+0xe0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d10c      	bne.n	800802e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f023 0308 	bic.w	r3, r3, #8
 800801a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	4313      	orrs	r3, r2
 8008024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f023 0304 	bic.w	r3, r3, #4
 800802c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a16      	ldr	r2, [pc, #88]	@ (800808c <TIM_OC1_SetConfig+0xdc>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d003      	beq.n	800803e <TIM_OC1_SetConfig+0x8e>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a15      	ldr	r2, [pc, #84]	@ (8008090 <TIM_OC1_SetConfig+0xe0>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d111      	bne.n	8008062 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800804c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	621a      	str	r2, [r3, #32]
}
 800807c:	bf00      	nop
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	fffeff8f 	.word	0xfffeff8f
 800808c:	40010000 	.word	0x40010000
 8008090:	40010400 	.word	0x40010400

08008094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	f023 0210 	bic.w	r2, r3, #16
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4b2e      	ldr	r3, [pc, #184]	@ (8008178 <TIM_OC2_SetConfig+0xe4>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f023 0320 	bic.w	r3, r3, #32
 80080de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a23      	ldr	r2, [pc, #140]	@ (800817c <TIM_OC2_SetConfig+0xe8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d003      	beq.n	80080fc <TIM_OC2_SetConfig+0x68>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a22      	ldr	r2, [pc, #136]	@ (8008180 <TIM_OC2_SetConfig+0xec>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d10d      	bne.n	8008118 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a18      	ldr	r2, [pc, #96]	@ (800817c <TIM_OC2_SetConfig+0xe8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d003      	beq.n	8008128 <TIM_OC2_SetConfig+0x94>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a17      	ldr	r2, [pc, #92]	@ (8008180 <TIM_OC2_SetConfig+0xec>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d113      	bne.n	8008150 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800812e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	feff8fff 	.word	0xfeff8fff
 800817c:	40010000 	.word	0x40010000
 8008180:	40010400 	.word	0x40010400

08008184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008264 <TIM_OC3_SetConfig+0xe0>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0303 	bic.w	r3, r3, #3
 80081ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a22      	ldr	r2, [pc, #136]	@ (8008268 <TIM_OC3_SetConfig+0xe4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_OC3_SetConfig+0x66>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a21      	ldr	r2, [pc, #132]	@ (800826c <TIM_OC3_SetConfig+0xe8>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d10d      	bne.n	8008206 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a17      	ldr	r2, [pc, #92]	@ (8008268 <TIM_OC3_SetConfig+0xe4>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d003      	beq.n	8008216 <TIM_OC3_SetConfig+0x92>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a16      	ldr	r2, [pc, #88]	@ (800826c <TIM_OC3_SetConfig+0xe8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d113      	bne.n	800823e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800821c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	621a      	str	r2, [r3, #32]
}
 8008258:	bf00      	nop
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	fffeff8f 	.word	0xfffeff8f
 8008268:	40010000 	.word	0x40010000
 800826c:	40010400 	.word	0x40010400

08008270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4b1e      	ldr	r3, [pc, #120]	@ (8008314 <TIM_OC4_SetConfig+0xa4>)
 800829c:	4013      	ands	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	031b      	lsls	r3, r3, #12
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a13      	ldr	r2, [pc, #76]	@ (8008318 <TIM_OC4_SetConfig+0xa8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d003      	beq.n	80082d8 <TIM_OC4_SetConfig+0x68>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a12      	ldr	r2, [pc, #72]	@ (800831c <TIM_OC4_SetConfig+0xac>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d109      	bne.n	80082ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	019b      	lsls	r3, r3, #6
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	621a      	str	r2, [r3, #32]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	feff8fff 	.word	0xfeff8fff
 8008318:	40010000 	.word	0x40010000
 800831c:	40010400 	.word	0x40010400

08008320 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	4b1b      	ldr	r3, [pc, #108]	@ (80083b8 <TIM_OC5_SetConfig+0x98>)
 800834c:	4013      	ands	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008360:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	041b      	lsls	r3, r3, #16
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	4313      	orrs	r3, r2
 800836c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a12      	ldr	r2, [pc, #72]	@ (80083bc <TIM_OC5_SetConfig+0x9c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d003      	beq.n	800837e <TIM_OC5_SetConfig+0x5e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a11      	ldr	r2, [pc, #68]	@ (80083c0 <TIM_OC5_SetConfig+0xa0>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d109      	bne.n	8008392 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	021b      	lsls	r3, r3, #8
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	621a      	str	r2, [r3, #32]
}
 80083ac:	bf00      	nop
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	fffeff8f 	.word	0xfffeff8f
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40010400 	.word	0x40010400

080083c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008460 <TIM_OC6_SetConfig+0x9c>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	051b      	lsls	r3, r3, #20
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	4313      	orrs	r3, r2
 8008412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a13      	ldr	r2, [pc, #76]	@ (8008464 <TIM_OC6_SetConfig+0xa0>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_OC6_SetConfig+0x60>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a12      	ldr	r2, [pc, #72]	@ (8008468 <TIM_OC6_SetConfig+0xa4>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d109      	bne.n	8008438 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800842a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	029b      	lsls	r3, r3, #10
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	feff8fff 	.word	0xfeff8fff
 8008464:	40010000 	.word	0x40010000
 8008468:	40010400 	.word	0x40010400

0800846c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	f023 0201 	bic.w	r2, r3, #1
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f023 030a 	bic.w	r3, r3, #10
 80084a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	621a      	str	r2, [r3, #32]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b087      	sub	sp, #28
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	f023 0210 	bic.w	r2, r3, #16
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	031b      	lsls	r3, r3, #12
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008506:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	621a      	str	r2, [r3, #32]
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800852a:	b480      	push	{r7}
 800852c:	b085      	sub	sp, #20
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4313      	orrs	r3, r2
 8008548:	f043 0307 	orr.w	r3, r3, #7
 800854c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	609a      	str	r2, [r3, #8]
}
 8008554:	bf00      	nop
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800857a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	021a      	lsls	r2, r3, #8
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	431a      	orrs	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4313      	orrs	r3, r2
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	4313      	orrs	r3, r2
 800858c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	609a      	str	r2, [r3, #8]
}
 8008594:	bf00      	nop
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f003 031f 	and.w	r3, r3, #31
 80085b2:	2201      	movs	r2, #1
 80085b4:	fa02 f303 	lsl.w	r3, r2, r3
 80085b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a1a      	ldr	r2, [r3, #32]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	43db      	mvns	r3, r3
 80085c2:	401a      	ands	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1a      	ldr	r2, [r3, #32]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f003 031f 	and.w	r3, r3, #31
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	fa01 f303 	lsl.w	r3, r1, r3
 80085d8:	431a      	orrs	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
	...

080085ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008600:	2302      	movs	r3, #2
 8008602:	e06d      	b.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a30      	ldr	r2, [pc, #192]	@ (80086ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d004      	beq.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a2f      	ldr	r2, [pc, #188]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d108      	bne.n	800864a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800863e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008650:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4313      	orrs	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a20      	ldr	r2, [pc, #128]	@ (80086ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d022      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008676:	d01d      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a1d      	ldr	r2, [pc, #116]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d018      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a1c      	ldr	r2, [pc, #112]	@ (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d013      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1a      	ldr	r2, [pc, #104]	@ (80086fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d00e      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a15      	ldr	r2, [pc, #84]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d009      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a16      	ldr	r2, [pc, #88]	@ (8008700 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d004      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a15      	ldr	r2, [pc, #84]	@ (8008704 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d10c      	bne.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40010400 	.word	0x40010400
 80086f4:	40000400 	.word	0x40000400
 80086f8:	40000800 	.word	0x40000800
 80086fc:	40000c00 	.word	0x40000c00
 8008700:	40014000 	.word	0x40014000
 8008704:	40001800 	.word	0x40001800

08008708 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008720:	2302      	movs	r3, #2
 8008722:	e065      	b.n	80087f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4313      	orrs	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	4313      	orrs	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a16      	ldr	r2, [pc, #88]	@ (80087fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d004      	beq.n	80087b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a14      	ldr	r2, [pc, #80]	@ (8008800 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d115      	bne.n	80087de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087bc:	051b      	lsls	r3, r3, #20
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	40010000 	.word	0x40010000
 8008800:	40010400 	.word	0x40010400

08008804 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e040      	b.n	80088d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fa fffa 	bl	800385c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2224      	movs	r2, #36	@ 0x24
 800886c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 0201 	bic.w	r2, r2, #1
 800887c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fe10 	bl	80094ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fba9 	bl	8008fe4 <UART_SetConfig>
 8008892:	4603      	mov	r3, r0
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e01b      	b.n	80088d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fe8f 	bl	80095f0 <UART_CheckIdleState>
 80088d2:	4603      	mov	r3, r0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	@ 0x28
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	603b      	str	r3, [r7, #0]
 80088e8:	4613      	mov	r3, r2
 80088ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d177      	bne.n	80089e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <HAL_UART_Transmit+0x24>
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e070      	b.n	80089e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2221      	movs	r2, #33	@ 0x21
 8008910:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008912:	f7fb f957 	bl	8003bc4 <HAL_GetTick>
 8008916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	88fa      	ldrh	r2, [r7, #6]
 800891c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	88fa      	ldrh	r2, [r7, #6]
 8008924:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008930:	d108      	bne.n	8008944 <HAL_UART_Transmit+0x68>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d104      	bne.n	8008944 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	61bb      	str	r3, [r7, #24]
 8008942:	e003      	b.n	800894c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008948:	2300      	movs	r3, #0
 800894a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800894c:	e02f      	b.n	80089ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2200      	movs	r2, #0
 8008956:	2180      	movs	r1, #128	@ 0x80
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 fea0 	bl	800969e <UART_WaitOnFlagUntilTimeout>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d004      	beq.n	800896e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2220      	movs	r2, #32
 8008968:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e03b      	b.n	80089e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008982:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	3302      	adds	r3, #2
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	e007      	b.n	800899c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	781a      	ldrb	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	3301      	adds	r3, #1
 800899a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	3b01      	subs	r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1c9      	bne.n	800894e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2200      	movs	r2, #0
 80089c2:	2140      	movs	r1, #64	@ 0x40
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fe6a 	bl	800969e <UART_WaitOnFlagUntilTimeout>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e005      	b.n	80089e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2220      	movs	r2, #32
 80089de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e000      	b.n	80089e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80089e4:	2302      	movs	r3, #2
  }
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3720      	adds	r7, #32
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b0ba      	sub	sp, #232	@ 0xe8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a1e:	4013      	ands	r3, r2
 8008a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d115      	bne.n	8008a58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a30:	f003 0320 	and.w	r3, r3, #32
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00f      	beq.n	8008a58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 8297 	beq.w	8008f7c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
      }
      return;
 8008a56:	e291      	b.n	8008f7c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8117 	beq.w	8008c90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a72:	4b85      	ldr	r3, [pc, #532]	@ (8008c88 <HAL_UART_IRQHandler+0x298>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 810a 	beq.w	8008c90 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d011      	beq.n	8008aac <HAL_UART_IRQHandler+0xbc>
 8008a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aa2:	f043 0201 	orr.w	r2, r3, #1
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab0:	f003 0302 	and.w	r3, r3, #2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d011      	beq.n	8008adc <HAL_UART_IRQHandler+0xec>
 8008ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00b      	beq.n	8008adc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ad2:	f043 0204 	orr.w	r2, r3, #4
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d011      	beq.n	8008b0c <HAL_UART_IRQHandler+0x11c>
 8008ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2204      	movs	r2, #4
 8008afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b02:	f043 0202 	orr.w	r2, r3, #2
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d017      	beq.n	8008b48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b1c:	f003 0320 	and.w	r3, r3, #32
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2208      	movs	r2, #8
 8008b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b3e:	f043 0208 	orr.w	r2, r3, #8
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d012      	beq.n	8008b7a <HAL_UART_IRQHandler+0x18a>
 8008b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00c      	beq.n	8008b7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b70:	f043 0220 	orr.w	r2, r3, #32
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 81fd 	beq.w	8008f80 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00d      	beq.n	8008bae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d007      	beq.n	8008bae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc2:	2b40      	cmp	r3, #64	@ 0x40
 8008bc4:	d005      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d04f      	beq.n	8008c72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fe96 	bl	8009904 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008be2:	2b40      	cmp	r3, #64	@ 0x40
 8008be4:	d141      	bne.n	8008c6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3308      	adds	r3, #8
 8008bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1d9      	bne.n	8008be6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d013      	beq.n	8008c62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c3e:	4a13      	ldr	r2, [pc, #76]	@ (8008c8c <HAL_UART_IRQHandler+0x29c>)
 8008c40:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fb fa7c 	bl	8004144 <HAL_DMA_Abort_IT>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d017      	beq.n	8008c82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c60:	e00f      	b.n	8008c82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f9b4 	bl	8008fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c68:	e00b      	b.n	8008c82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f9b0 	bl	8008fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	e007      	b.n	8008c82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f9ac 	bl	8008fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008c80:	e17e      	b.n	8008f80 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c82:	bf00      	nop
    return;
 8008c84:	e17c      	b.n	8008f80 <HAL_UART_IRQHandler+0x590>
 8008c86:	bf00      	nop
 8008c88:	04000120 	.word	0x04000120
 8008c8c:	08009bb1 	.word	0x08009bb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	f040 814c 	bne.w	8008f32 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c9e:	f003 0310 	and.w	r3, r3, #16
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 8145 	beq.w	8008f32 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 813e 	beq.w	8008f32 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2210      	movs	r2, #16
 8008cbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc8:	2b40      	cmp	r3, #64	@ 0x40
 8008cca:	f040 80b6 	bne.w	8008e3a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 8150 	beq.w	8008f84 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	f080 8148 	bcs.w	8008f84 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d08:	f000 8086 	beq.w	8008e18 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1da      	bne.n	8008d0c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d68:	f023 0301 	bic.w	r3, r3, #1
 8008d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3308      	adds	r3, #8
 8008d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e1      	bne.n	8008d56 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3308      	adds	r3, #8
 8008db2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008db6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008db8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008dbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e3      	bne.n	8008d92 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2220      	movs	r2, #32
 8008dce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de8:	f023 0310 	bic.w	r3, r3, #16
 8008dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e4      	bne.n	8008dd8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fb f926 	bl	8004064 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fa f8ac 	bl	8002f90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e38:	e0a4      	b.n	8008f84 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 8096 	beq.w	8008f88 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8091 	beq.w	8008f88 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e90:	e841 2300 	strex	r3, r2, [r1]
 8008e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e4      	bne.n	8008e66 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	623b      	str	r3, [r7, #32]
   return(result);
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	f023 0301 	bic.w	r3, r3, #1
 8008eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ec0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e3      	bne.n	8008e9c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f023 0310 	bic.w	r3, r3, #16
 8008efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f0a:	61fb      	str	r3, [r7, #28]
 8008f0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	69b9      	ldr	r1, [r7, #24]
 8008f10:	69fa      	ldr	r2, [r7, #28]
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	617b      	str	r3, [r7, #20]
   return(result);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e4      	bne.n	8008ee8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7fa f830 	bl	8002f90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f30:	e02a      	b.n	8008f88 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00e      	beq.n	8008f5c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d008      	beq.n	8008f5c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d01c      	beq.n	8008f8c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
    }
    return;
 8008f5a:	e017      	b.n	8008f8c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d012      	beq.n	8008f8e <HAL_UART_IRQHandler+0x59e>
 8008f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00c      	beq.n	8008f8e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fe31 	bl	8009bdc <UART_EndTransmit_IT>
    return;
 8008f7a:	e008      	b.n	8008f8e <HAL_UART_IRQHandler+0x59e>
      return;
 8008f7c:	bf00      	nop
 8008f7e:	e006      	b.n	8008f8e <HAL_UART_IRQHandler+0x59e>
    return;
 8008f80:	bf00      	nop
 8008f82:	e004      	b.n	8008f8e <HAL_UART_IRQHandler+0x59e>
      return;
 8008f84:	bf00      	nop
 8008f86:	e002      	b.n	8008f8e <HAL_UART_IRQHandler+0x59e>
      return;
 8008f88:	bf00      	nop
 8008f8a:	e000      	b.n	8008f8e <HAL_UART_IRQHandler+0x59e>
    return;
 8008f8c:	bf00      	nop
  }

}
 8008f8e:	37e8      	adds	r7, #232	@ 0xe8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	4313      	orrs	r3, r2
 8009006:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	4ba6      	ldr	r3, [pc, #664]	@ (80092a8 <UART_SetConfig+0x2c4>)
 8009010:	4013      	ands	r3, r2
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	6812      	ldr	r2, [r2, #0]
 8009016:	6979      	ldr	r1, [r7, #20]
 8009018:	430b      	orrs	r3, r1
 800901a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	430a      	orrs	r2, r1
 8009054:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a94      	ldr	r2, [pc, #592]	@ (80092ac <UART_SetConfig+0x2c8>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d120      	bne.n	80090a2 <UART_SetConfig+0xbe>
 8009060:	4b93      	ldr	r3, [pc, #588]	@ (80092b0 <UART_SetConfig+0x2cc>)
 8009062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	2b03      	cmp	r3, #3
 800906c:	d816      	bhi.n	800909c <UART_SetConfig+0xb8>
 800906e:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <UART_SetConfig+0x90>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	08009085 	.word	0x08009085
 8009078:	08009091 	.word	0x08009091
 800907c:	0800908b 	.word	0x0800908b
 8009080:	08009097 	.word	0x08009097
 8009084:	2301      	movs	r3, #1
 8009086:	77fb      	strb	r3, [r7, #31]
 8009088:	e150      	b.n	800932c <UART_SetConfig+0x348>
 800908a:	2302      	movs	r3, #2
 800908c:	77fb      	strb	r3, [r7, #31]
 800908e:	e14d      	b.n	800932c <UART_SetConfig+0x348>
 8009090:	2304      	movs	r3, #4
 8009092:	77fb      	strb	r3, [r7, #31]
 8009094:	e14a      	b.n	800932c <UART_SetConfig+0x348>
 8009096:	2308      	movs	r3, #8
 8009098:	77fb      	strb	r3, [r7, #31]
 800909a:	e147      	b.n	800932c <UART_SetConfig+0x348>
 800909c:	2310      	movs	r3, #16
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	e144      	b.n	800932c <UART_SetConfig+0x348>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a83      	ldr	r2, [pc, #524]	@ (80092b4 <UART_SetConfig+0x2d0>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d132      	bne.n	8009112 <UART_SetConfig+0x12e>
 80090ac:	4b80      	ldr	r3, [pc, #512]	@ (80092b0 <UART_SetConfig+0x2cc>)
 80090ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b2:	f003 030c 	and.w	r3, r3, #12
 80090b6:	2b0c      	cmp	r3, #12
 80090b8:	d828      	bhi.n	800910c <UART_SetConfig+0x128>
 80090ba:	a201      	add	r2, pc, #4	@ (adr r2, 80090c0 <UART_SetConfig+0xdc>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	080090f5 	.word	0x080090f5
 80090c4:	0800910d 	.word	0x0800910d
 80090c8:	0800910d 	.word	0x0800910d
 80090cc:	0800910d 	.word	0x0800910d
 80090d0:	08009101 	.word	0x08009101
 80090d4:	0800910d 	.word	0x0800910d
 80090d8:	0800910d 	.word	0x0800910d
 80090dc:	0800910d 	.word	0x0800910d
 80090e0:	080090fb 	.word	0x080090fb
 80090e4:	0800910d 	.word	0x0800910d
 80090e8:	0800910d 	.word	0x0800910d
 80090ec:	0800910d 	.word	0x0800910d
 80090f0:	08009107 	.word	0x08009107
 80090f4:	2300      	movs	r3, #0
 80090f6:	77fb      	strb	r3, [r7, #31]
 80090f8:	e118      	b.n	800932c <UART_SetConfig+0x348>
 80090fa:	2302      	movs	r3, #2
 80090fc:	77fb      	strb	r3, [r7, #31]
 80090fe:	e115      	b.n	800932c <UART_SetConfig+0x348>
 8009100:	2304      	movs	r3, #4
 8009102:	77fb      	strb	r3, [r7, #31]
 8009104:	e112      	b.n	800932c <UART_SetConfig+0x348>
 8009106:	2308      	movs	r3, #8
 8009108:	77fb      	strb	r3, [r7, #31]
 800910a:	e10f      	b.n	800932c <UART_SetConfig+0x348>
 800910c:	2310      	movs	r3, #16
 800910e:	77fb      	strb	r3, [r7, #31]
 8009110:	e10c      	b.n	800932c <UART_SetConfig+0x348>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a68      	ldr	r2, [pc, #416]	@ (80092b8 <UART_SetConfig+0x2d4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d120      	bne.n	800915e <UART_SetConfig+0x17a>
 800911c:	4b64      	ldr	r3, [pc, #400]	@ (80092b0 <UART_SetConfig+0x2cc>)
 800911e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009122:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009126:	2b30      	cmp	r3, #48	@ 0x30
 8009128:	d013      	beq.n	8009152 <UART_SetConfig+0x16e>
 800912a:	2b30      	cmp	r3, #48	@ 0x30
 800912c:	d814      	bhi.n	8009158 <UART_SetConfig+0x174>
 800912e:	2b20      	cmp	r3, #32
 8009130:	d009      	beq.n	8009146 <UART_SetConfig+0x162>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d810      	bhi.n	8009158 <UART_SetConfig+0x174>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d002      	beq.n	8009140 <UART_SetConfig+0x15c>
 800913a:	2b10      	cmp	r3, #16
 800913c:	d006      	beq.n	800914c <UART_SetConfig+0x168>
 800913e:	e00b      	b.n	8009158 <UART_SetConfig+0x174>
 8009140:	2300      	movs	r3, #0
 8009142:	77fb      	strb	r3, [r7, #31]
 8009144:	e0f2      	b.n	800932c <UART_SetConfig+0x348>
 8009146:	2302      	movs	r3, #2
 8009148:	77fb      	strb	r3, [r7, #31]
 800914a:	e0ef      	b.n	800932c <UART_SetConfig+0x348>
 800914c:	2304      	movs	r3, #4
 800914e:	77fb      	strb	r3, [r7, #31]
 8009150:	e0ec      	b.n	800932c <UART_SetConfig+0x348>
 8009152:	2308      	movs	r3, #8
 8009154:	77fb      	strb	r3, [r7, #31]
 8009156:	e0e9      	b.n	800932c <UART_SetConfig+0x348>
 8009158:	2310      	movs	r3, #16
 800915a:	77fb      	strb	r3, [r7, #31]
 800915c:	e0e6      	b.n	800932c <UART_SetConfig+0x348>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a56      	ldr	r2, [pc, #344]	@ (80092bc <UART_SetConfig+0x2d8>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d120      	bne.n	80091aa <UART_SetConfig+0x1c6>
 8009168:	4b51      	ldr	r3, [pc, #324]	@ (80092b0 <UART_SetConfig+0x2cc>)
 800916a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800916e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009172:	2bc0      	cmp	r3, #192	@ 0xc0
 8009174:	d013      	beq.n	800919e <UART_SetConfig+0x1ba>
 8009176:	2bc0      	cmp	r3, #192	@ 0xc0
 8009178:	d814      	bhi.n	80091a4 <UART_SetConfig+0x1c0>
 800917a:	2b80      	cmp	r3, #128	@ 0x80
 800917c:	d009      	beq.n	8009192 <UART_SetConfig+0x1ae>
 800917e:	2b80      	cmp	r3, #128	@ 0x80
 8009180:	d810      	bhi.n	80091a4 <UART_SetConfig+0x1c0>
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <UART_SetConfig+0x1a8>
 8009186:	2b40      	cmp	r3, #64	@ 0x40
 8009188:	d006      	beq.n	8009198 <UART_SetConfig+0x1b4>
 800918a:	e00b      	b.n	80091a4 <UART_SetConfig+0x1c0>
 800918c:	2300      	movs	r3, #0
 800918e:	77fb      	strb	r3, [r7, #31]
 8009190:	e0cc      	b.n	800932c <UART_SetConfig+0x348>
 8009192:	2302      	movs	r3, #2
 8009194:	77fb      	strb	r3, [r7, #31]
 8009196:	e0c9      	b.n	800932c <UART_SetConfig+0x348>
 8009198:	2304      	movs	r3, #4
 800919a:	77fb      	strb	r3, [r7, #31]
 800919c:	e0c6      	b.n	800932c <UART_SetConfig+0x348>
 800919e:	2308      	movs	r3, #8
 80091a0:	77fb      	strb	r3, [r7, #31]
 80091a2:	e0c3      	b.n	800932c <UART_SetConfig+0x348>
 80091a4:	2310      	movs	r3, #16
 80091a6:	77fb      	strb	r3, [r7, #31]
 80091a8:	e0c0      	b.n	800932c <UART_SetConfig+0x348>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a44      	ldr	r2, [pc, #272]	@ (80092c0 <UART_SetConfig+0x2dc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d125      	bne.n	8009200 <UART_SetConfig+0x21c>
 80091b4:	4b3e      	ldr	r3, [pc, #248]	@ (80092b0 <UART_SetConfig+0x2cc>)
 80091b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091c2:	d017      	beq.n	80091f4 <UART_SetConfig+0x210>
 80091c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091c8:	d817      	bhi.n	80091fa <UART_SetConfig+0x216>
 80091ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ce:	d00b      	beq.n	80091e8 <UART_SetConfig+0x204>
 80091d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091d4:	d811      	bhi.n	80091fa <UART_SetConfig+0x216>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <UART_SetConfig+0x1fe>
 80091da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091de:	d006      	beq.n	80091ee <UART_SetConfig+0x20a>
 80091e0:	e00b      	b.n	80091fa <UART_SetConfig+0x216>
 80091e2:	2300      	movs	r3, #0
 80091e4:	77fb      	strb	r3, [r7, #31]
 80091e6:	e0a1      	b.n	800932c <UART_SetConfig+0x348>
 80091e8:	2302      	movs	r3, #2
 80091ea:	77fb      	strb	r3, [r7, #31]
 80091ec:	e09e      	b.n	800932c <UART_SetConfig+0x348>
 80091ee:	2304      	movs	r3, #4
 80091f0:	77fb      	strb	r3, [r7, #31]
 80091f2:	e09b      	b.n	800932c <UART_SetConfig+0x348>
 80091f4:	2308      	movs	r3, #8
 80091f6:	77fb      	strb	r3, [r7, #31]
 80091f8:	e098      	b.n	800932c <UART_SetConfig+0x348>
 80091fa:	2310      	movs	r3, #16
 80091fc:	77fb      	strb	r3, [r7, #31]
 80091fe:	e095      	b.n	800932c <UART_SetConfig+0x348>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a2f      	ldr	r2, [pc, #188]	@ (80092c4 <UART_SetConfig+0x2e0>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d125      	bne.n	8009256 <UART_SetConfig+0x272>
 800920a:	4b29      	ldr	r3, [pc, #164]	@ (80092b0 <UART_SetConfig+0x2cc>)
 800920c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009210:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009214:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009218:	d017      	beq.n	800924a <UART_SetConfig+0x266>
 800921a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800921e:	d817      	bhi.n	8009250 <UART_SetConfig+0x26c>
 8009220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009224:	d00b      	beq.n	800923e <UART_SetConfig+0x25a>
 8009226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800922a:	d811      	bhi.n	8009250 <UART_SetConfig+0x26c>
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <UART_SetConfig+0x254>
 8009230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009234:	d006      	beq.n	8009244 <UART_SetConfig+0x260>
 8009236:	e00b      	b.n	8009250 <UART_SetConfig+0x26c>
 8009238:	2301      	movs	r3, #1
 800923a:	77fb      	strb	r3, [r7, #31]
 800923c:	e076      	b.n	800932c <UART_SetConfig+0x348>
 800923e:	2302      	movs	r3, #2
 8009240:	77fb      	strb	r3, [r7, #31]
 8009242:	e073      	b.n	800932c <UART_SetConfig+0x348>
 8009244:	2304      	movs	r3, #4
 8009246:	77fb      	strb	r3, [r7, #31]
 8009248:	e070      	b.n	800932c <UART_SetConfig+0x348>
 800924a:	2308      	movs	r3, #8
 800924c:	77fb      	strb	r3, [r7, #31]
 800924e:	e06d      	b.n	800932c <UART_SetConfig+0x348>
 8009250:	2310      	movs	r3, #16
 8009252:	77fb      	strb	r3, [r7, #31]
 8009254:	e06a      	b.n	800932c <UART_SetConfig+0x348>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a1b      	ldr	r2, [pc, #108]	@ (80092c8 <UART_SetConfig+0x2e4>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d138      	bne.n	80092d2 <UART_SetConfig+0x2ee>
 8009260:	4b13      	ldr	r3, [pc, #76]	@ (80092b0 <UART_SetConfig+0x2cc>)
 8009262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009266:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800926a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800926e:	d017      	beq.n	80092a0 <UART_SetConfig+0x2bc>
 8009270:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009274:	d82a      	bhi.n	80092cc <UART_SetConfig+0x2e8>
 8009276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800927a:	d00b      	beq.n	8009294 <UART_SetConfig+0x2b0>
 800927c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009280:	d824      	bhi.n	80092cc <UART_SetConfig+0x2e8>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <UART_SetConfig+0x2aa>
 8009286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800928a:	d006      	beq.n	800929a <UART_SetConfig+0x2b6>
 800928c:	e01e      	b.n	80092cc <UART_SetConfig+0x2e8>
 800928e:	2300      	movs	r3, #0
 8009290:	77fb      	strb	r3, [r7, #31]
 8009292:	e04b      	b.n	800932c <UART_SetConfig+0x348>
 8009294:	2302      	movs	r3, #2
 8009296:	77fb      	strb	r3, [r7, #31]
 8009298:	e048      	b.n	800932c <UART_SetConfig+0x348>
 800929a:	2304      	movs	r3, #4
 800929c:	77fb      	strb	r3, [r7, #31]
 800929e:	e045      	b.n	800932c <UART_SetConfig+0x348>
 80092a0:	2308      	movs	r3, #8
 80092a2:	77fb      	strb	r3, [r7, #31]
 80092a4:	e042      	b.n	800932c <UART_SetConfig+0x348>
 80092a6:	bf00      	nop
 80092a8:	efff69f3 	.word	0xefff69f3
 80092ac:	40011000 	.word	0x40011000
 80092b0:	40023800 	.word	0x40023800
 80092b4:	40004400 	.word	0x40004400
 80092b8:	40004800 	.word	0x40004800
 80092bc:	40004c00 	.word	0x40004c00
 80092c0:	40005000 	.word	0x40005000
 80092c4:	40011400 	.word	0x40011400
 80092c8:	40007800 	.word	0x40007800
 80092cc:	2310      	movs	r3, #16
 80092ce:	77fb      	strb	r3, [r7, #31]
 80092d0:	e02c      	b.n	800932c <UART_SetConfig+0x348>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a72      	ldr	r2, [pc, #456]	@ (80094a0 <UART_SetConfig+0x4bc>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d125      	bne.n	8009328 <UART_SetConfig+0x344>
 80092dc:	4b71      	ldr	r3, [pc, #452]	@ (80094a4 <UART_SetConfig+0x4c0>)
 80092de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80092e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80092ea:	d017      	beq.n	800931c <UART_SetConfig+0x338>
 80092ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80092f0:	d817      	bhi.n	8009322 <UART_SetConfig+0x33e>
 80092f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092f6:	d00b      	beq.n	8009310 <UART_SetConfig+0x32c>
 80092f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092fc:	d811      	bhi.n	8009322 <UART_SetConfig+0x33e>
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <UART_SetConfig+0x326>
 8009302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009306:	d006      	beq.n	8009316 <UART_SetConfig+0x332>
 8009308:	e00b      	b.n	8009322 <UART_SetConfig+0x33e>
 800930a:	2300      	movs	r3, #0
 800930c:	77fb      	strb	r3, [r7, #31]
 800930e:	e00d      	b.n	800932c <UART_SetConfig+0x348>
 8009310:	2302      	movs	r3, #2
 8009312:	77fb      	strb	r3, [r7, #31]
 8009314:	e00a      	b.n	800932c <UART_SetConfig+0x348>
 8009316:	2304      	movs	r3, #4
 8009318:	77fb      	strb	r3, [r7, #31]
 800931a:	e007      	b.n	800932c <UART_SetConfig+0x348>
 800931c:	2308      	movs	r3, #8
 800931e:	77fb      	strb	r3, [r7, #31]
 8009320:	e004      	b.n	800932c <UART_SetConfig+0x348>
 8009322:	2310      	movs	r3, #16
 8009324:	77fb      	strb	r3, [r7, #31]
 8009326:	e001      	b.n	800932c <UART_SetConfig+0x348>
 8009328:	2310      	movs	r3, #16
 800932a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009334:	d15b      	bne.n	80093ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009336:	7ffb      	ldrb	r3, [r7, #31]
 8009338:	2b08      	cmp	r3, #8
 800933a:	d828      	bhi.n	800938e <UART_SetConfig+0x3aa>
 800933c:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <UART_SetConfig+0x360>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	08009369 	.word	0x08009369
 8009348:	08009371 	.word	0x08009371
 800934c:	08009379 	.word	0x08009379
 8009350:	0800938f 	.word	0x0800938f
 8009354:	0800937f 	.word	0x0800937f
 8009358:	0800938f 	.word	0x0800938f
 800935c:	0800938f 	.word	0x0800938f
 8009360:	0800938f 	.word	0x0800938f
 8009364:	08009387 	.word	0x08009387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009368:	f7fc fa5e 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 800936c:	61b8      	str	r0, [r7, #24]
        break;
 800936e:	e013      	b.n	8009398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009370:	f7fc fa6e 	bl	8005850 <HAL_RCC_GetPCLK2Freq>
 8009374:	61b8      	str	r0, [r7, #24]
        break;
 8009376:	e00f      	b.n	8009398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009378:	4b4b      	ldr	r3, [pc, #300]	@ (80094a8 <UART_SetConfig+0x4c4>)
 800937a:	61bb      	str	r3, [r7, #24]
        break;
 800937c:	e00c      	b.n	8009398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800937e:	f7fc f941 	bl	8005604 <HAL_RCC_GetSysClockFreq>
 8009382:	61b8      	str	r0, [r7, #24]
        break;
 8009384:	e008      	b.n	8009398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800938a:	61bb      	str	r3, [r7, #24]
        break;
 800938c:	e004      	b.n	8009398 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	77bb      	strb	r3, [r7, #30]
        break;
 8009396:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d074      	beq.n	8009488 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	005a      	lsls	r2, r3, #1
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	085b      	lsrs	r3, r3, #1
 80093a8:	441a      	add	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80093b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2b0f      	cmp	r3, #15
 80093b8:	d916      	bls.n	80093e8 <UART_SetConfig+0x404>
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093c0:	d212      	bcs.n	80093e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	f023 030f 	bic.w	r3, r3, #15
 80093ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	085b      	lsrs	r3, r3, #1
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	89fb      	ldrh	r3, [r7, #14]
 80093da:	4313      	orrs	r3, r2
 80093dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	89fa      	ldrh	r2, [r7, #14]
 80093e4:	60da      	str	r2, [r3, #12]
 80093e6:	e04f      	b.n	8009488 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	77bb      	strb	r3, [r7, #30]
 80093ec:	e04c      	b.n	8009488 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80093ee:	7ffb      	ldrb	r3, [r7, #31]
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d828      	bhi.n	8009446 <UART_SetConfig+0x462>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0x418>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	08009421 	.word	0x08009421
 8009400:	08009429 	.word	0x08009429
 8009404:	08009431 	.word	0x08009431
 8009408:	08009447 	.word	0x08009447
 800940c:	08009437 	.word	0x08009437
 8009410:	08009447 	.word	0x08009447
 8009414:	08009447 	.word	0x08009447
 8009418:	08009447 	.word	0x08009447
 800941c:	0800943f 	.word	0x0800943f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009420:	f7fc fa02 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 8009424:	61b8      	str	r0, [r7, #24]
        break;
 8009426:	e013      	b.n	8009450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009428:	f7fc fa12 	bl	8005850 <HAL_RCC_GetPCLK2Freq>
 800942c:	61b8      	str	r0, [r7, #24]
        break;
 800942e:	e00f      	b.n	8009450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009430:	4b1d      	ldr	r3, [pc, #116]	@ (80094a8 <UART_SetConfig+0x4c4>)
 8009432:	61bb      	str	r3, [r7, #24]
        break;
 8009434:	e00c      	b.n	8009450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009436:	f7fc f8e5 	bl	8005604 <HAL_RCC_GetSysClockFreq>
 800943a:	61b8      	str	r0, [r7, #24]
        break;
 800943c:	e008      	b.n	8009450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800943e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009442:	61bb      	str	r3, [r7, #24]
        break;
 8009444:	e004      	b.n	8009450 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	77bb      	strb	r3, [r7, #30]
        break;
 800944e:	bf00      	nop
    }

    if (pclk != 0U)
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d018      	beq.n	8009488 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	085a      	lsrs	r2, r3, #1
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	441a      	add	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	fbb2 f3f3 	udiv	r3, r2, r3
 8009468:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	2b0f      	cmp	r3, #15
 800946e:	d909      	bls.n	8009484 <UART_SetConfig+0x4a0>
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009476:	d205      	bcs.n	8009484 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	b29a      	uxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	60da      	str	r2, [r3, #12]
 8009482:	e001      	b.n	8009488 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009494:	7fbb      	ldrb	r3, [r7, #30]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3720      	adds	r7, #32
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	40007c00 	.word	0x40007c00
 80094a4:	40023800 	.word	0x40023800
 80094a8:	00f42400 	.word	0x00f42400

080094ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b8:	f003 0308 	and.w	r3, r3, #8
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00a      	beq.n	80094d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00a      	beq.n	80094f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00a      	beq.n	800951a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	430a      	orrs	r2, r1
 8009518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951e:	f003 0304 	and.w	r3, r3, #4
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009540:	f003 0310 	and.w	r3, r3, #16
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00a      	beq.n	800955e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009562:	f003 0320 	and.w	r3, r3, #32
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01a      	beq.n	80095c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095aa:	d10a      	bne.n	80095c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	430a      	orrs	r2, r1
 80095c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00a      	beq.n	80095e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	430a      	orrs	r2, r1
 80095e2:	605a      	str	r2, [r3, #4]
  }
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08c      	sub	sp, #48	@ 0x30
 80095f4:	af02      	add	r7, sp, #8
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009600:	f7fa fae0 	bl	8003bc4 <HAL_GetTick>
 8009604:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	2b08      	cmp	r3, #8
 8009612:	d12e      	bne.n	8009672 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009614:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961c:	2200      	movs	r2, #0
 800961e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f83b 	bl	800969e <UART_WaitOnFlagUntilTimeout>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d021      	beq.n	8009672 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	e853 3f00 	ldrex	r3, [r3]
 800963a:	60fb      	str	r3, [r7, #12]
   return(result);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009642:	623b      	str	r3, [r7, #32]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	61fb      	str	r3, [r7, #28]
 800964e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009650:	69b9      	ldr	r1, [r7, #24]
 8009652:	69fa      	ldr	r2, [r7, #28]
 8009654:	e841 2300 	strex	r3, r2, [r1]
 8009658:	617b      	str	r3, [r7, #20]
   return(result);
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e6      	bne.n	800962e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e011      	b.n	8009696 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2220      	movs	r2, #32
 8009676:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3728      	adds	r7, #40	@ 0x28
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	603b      	str	r3, [r7, #0]
 80096aa:	4613      	mov	r3, r2
 80096ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096ae:	e04f      	b.n	8009750 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b6:	d04b      	beq.n	8009750 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096b8:	f7fa fa84 	bl	8003bc4 <HAL_GetTick>
 80096bc:	4602      	mov	r2, r0
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d302      	bcc.n	80096ce <UART_WaitOnFlagUntilTimeout+0x30>
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e04e      	b.n	8009770 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d037      	beq.n	8009750 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2b80      	cmp	r3, #128	@ 0x80
 80096e4:	d034      	beq.n	8009750 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b40      	cmp	r3, #64	@ 0x40
 80096ea:	d031      	beq.n	8009750 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	f003 0308 	and.w	r3, r3, #8
 80096f6:	2b08      	cmp	r3, #8
 80096f8:	d110      	bne.n	800971c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2208      	movs	r2, #8
 8009700:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 f8fe 	bl	8009904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2208      	movs	r2, #8
 800970c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e029      	b.n	8009770 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800972a:	d111      	bne.n	8009750 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009734:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f8e4 	bl	8009904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2220      	movs	r2, #32
 8009740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e00f      	b.n	8009770 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69da      	ldr	r2, [r3, #28]
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	4013      	ands	r3, r2
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	429a      	cmp	r2, r3
 800975e:	bf0c      	ite	eq
 8009760:	2301      	moveq	r3, #1
 8009762:	2300      	movne	r3, #0
 8009764:	b2db      	uxtb	r3, r3
 8009766:	461a      	mov	r2, r3
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	429a      	cmp	r2, r3
 800976c:	d0a0      	beq.n	80096b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b096      	sub	sp, #88	@ 0x58
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	4613      	mov	r3, r2
 8009784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	88fa      	ldrh	r2, [r7, #6]
 8009790:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2222      	movs	r2, #34	@ 0x22
 80097a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d028      	beq.n	80097fe <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097b0:	4a3e      	ldr	r2, [pc, #248]	@ (80098ac <UART_Start_Receive_DMA+0x134>)
 80097b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097b8:	4a3d      	ldr	r2, [pc, #244]	@ (80098b0 <UART_Start_Receive_DMA+0x138>)
 80097ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097c0:	4a3c      	ldr	r2, [pc, #240]	@ (80098b4 <UART_Start_Receive_DMA+0x13c>)
 80097c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097c8:	2200      	movs	r2, #0
 80097ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3324      	adds	r3, #36	@ 0x24
 80097d6:	4619      	mov	r1, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097dc:	461a      	mov	r2, r3
 80097de:	88fb      	ldrh	r3, [r7, #6]
 80097e0:	f7fa fbe0 	bl	8003fa4 <HAL_DMA_Start_IT>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d009      	beq.n	80097fe <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2210      	movs	r2, #16
 80097ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e051      	b.n	80098a2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d018      	beq.n	8009838 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800980e:	e853 3f00 	ldrex	r3, [r3]
 8009812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800981a:	657b      	str	r3, [r7, #84]	@ 0x54
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	461a      	mov	r2, r3
 8009822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009824:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009826:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800982a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e6      	bne.n	8009806 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3308      	adds	r3, #8
 800983e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984a:	f043 0301 	orr.w	r3, r3, #1
 800984e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3308      	adds	r3, #8
 8009856:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009858:	637a      	str	r2, [r7, #52]	@ 0x34
 800985a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800985e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009860:	e841 2300 	strex	r3, r2, [r1]
 8009864:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e5      	bne.n	8009838 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3308      	adds	r3, #8
 8009872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	613b      	str	r3, [r7, #16]
   return(result);
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3308      	adds	r3, #8
 800988a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800988c:	623a      	str	r2, [r7, #32]
 800988e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	69f9      	ldr	r1, [r7, #28]
 8009892:	6a3a      	ldr	r2, [r7, #32]
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	61bb      	str	r3, [r7, #24]
   return(result);
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e5      	bne.n	800986c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3758      	adds	r7, #88	@ 0x58
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	080099cd 	.word	0x080099cd
 80098b0:	08009af5 	.word	0x08009af5
 80098b4:	08009b33 	.word	0x08009b33

080098b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b089      	sub	sp, #36	@ 0x24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80098d4:	61fb      	str	r3, [r7, #28]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	61bb      	str	r3, [r7, #24]
 80098e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	6979      	ldr	r1, [r7, #20]
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	613b      	str	r3, [r7, #16]
   return(result);
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e6      	bne.n	80098c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2220      	movs	r2, #32
 80098f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80098f8:	bf00      	nop
 80098fa:	3724      	adds	r7, #36	@ 0x24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009904:	b480      	push	{r7}
 8009906:	b095      	sub	sp, #84	@ 0x54
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800991a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800992a:	643b      	str	r3, [r7, #64]	@ 0x40
 800992c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009930:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e6      	bne.n	800990c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3308      	adds	r3, #8
 8009944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	61fb      	str	r3, [r7, #28]
   return(result);
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	f023 0301 	bic.w	r3, r3, #1
 8009954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3308      	adds	r3, #8
 800995c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800995e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009960:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009966:	e841 2300 	strex	r3, r2, [r1]
 800996a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800996c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1e5      	bne.n	800993e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009976:	2b01      	cmp	r3, #1
 8009978:	d118      	bne.n	80099ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	60bb      	str	r3, [r7, #8]
   return(result);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f023 0310 	bic.w	r3, r3, #16
 800998e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	461a      	mov	r2, r3
 8009996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009998:	61bb      	str	r3, [r7, #24]
 800999a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6979      	ldr	r1, [r7, #20]
 800999e:	69ba      	ldr	r2, [r7, #24]
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	613b      	str	r3, [r7, #16]
   return(result);
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e6      	bne.n	800997a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80099c0:	bf00      	nop
 80099c2:	3754      	adds	r7, #84	@ 0x54
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b09c      	sub	sp, #112	@ 0x70
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099e2:	d071      	beq.n	8009ac8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80099e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e6      	bne.n	80099ec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3308      	adds	r3, #8
 8009a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a30:	f023 0301 	bic.w	r3, r3, #1
 8009a34:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e5      	bne.n	8009a1e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3308      	adds	r3, #8
 8009a58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	623b      	str	r3, [r7, #32]
   return(result);
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a72:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a7a:	e841 2300 	strex	r3, r2, [r1]
 8009a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1e5      	bne.n	8009a52 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a88:	2220      	movs	r2, #32
 8009a8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d118      	bne.n	8009ac8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0310 	bic.w	r3, r3, #16
 8009aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ab4:	61fb      	str	r3, [r7, #28]
 8009ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab8:	69b9      	ldr	r1, [r7, #24]
 8009aba:	69fa      	ldr	r2, [r7, #28]
 8009abc:	e841 2300 	strex	r3, r2, [r1]
 8009ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e6      	bne.n	8009a96 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aca:	2200      	movs	r2, #0
 8009acc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d107      	bne.n	8009ae6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009adc:	4619      	mov	r1, r3
 8009ade:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ae0:	f7f9 fa56 	bl	8002f90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ae4:	e002      	b.n	8009aec <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009ae6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ae8:	f7ff fa5e 	bl	8008fa8 <HAL_UART_RxCpltCallback>
}
 8009aec:	bf00      	nop
 8009aee:	3770      	adds	r7, #112	@ 0x70
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d109      	bne.n	8009b24 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b16:	085b      	lsrs	r3, r3, #1
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7f9 fa37 	bl	8002f90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b22:	e002      	b.n	8009b2a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f7ff fa49 	bl	8008fbc <HAL_UART_RxHalfCpltCallback>
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b086      	sub	sp, #24
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b4c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b58:	2b80      	cmp	r3, #128	@ 0x80
 8009b5a:	d109      	bne.n	8009b70 <UART_DMAError+0x3e>
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b21      	cmp	r3, #33	@ 0x21
 8009b60:	d106      	bne.n	8009b70 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009b6a:	6978      	ldr	r0, [r7, #20]
 8009b6c:	f7ff fea4 	bl	80098b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b7a:	2b40      	cmp	r3, #64	@ 0x40
 8009b7c:	d109      	bne.n	8009b92 <UART_DMAError+0x60>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b22      	cmp	r3, #34	@ 0x22
 8009b82:	d106      	bne.n	8009b92 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009b8c:	6978      	ldr	r0, [r7, #20]
 8009b8e:	f7ff feb9 	bl	8009904 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b98:	f043 0210 	orr.w	r2, r3, #16
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ba2:	6978      	ldr	r0, [r7, #20]
 8009ba4:	f7ff fa14 	bl	8008fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ba8:	bf00      	nop
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7ff f9fe 	bl	8008fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bd4:	bf00      	nop
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	61bb      	str	r3, [r7, #24]
 8009c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	6979      	ldr	r1, [r7, #20]
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e6      	bne.n	8009be4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7ff f9b6 	bl	8008f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c28:	bf00      	nop
 8009c2a:	3720      	adds	r7, #32
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08c      	sub	sp, #48	@ 0x30
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c44:	2b20      	cmp	r3, #32
 8009c46:	d142      	bne.n	8009cce <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e03b      	b.n	8009cd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009c64:	88fb      	ldrh	r3, [r7, #6]
 8009c66:	461a      	mov	r2, r3
 8009c68:	68b9      	ldr	r1, [r7, #8]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff fd84 	bl	8009778 <UART_Start_Receive_DMA>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009c76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d124      	bne.n	8009cc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d11d      	bne.n	8009cc2 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2210      	movs	r2, #16
 8009c8c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f043 0310 	orr.w	r3, r3, #16
 8009ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cae:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	6a39      	ldr	r1, [r7, #32]
 8009cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cb4:	e841 2300 	strex	r3, r2, [r1]
 8009cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e6      	bne.n	8009c8e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009cc0:	e002      	b.n	8009cc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ccc:	e000      	b.n	8009cd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009cce:	2302      	movs	r3, #2
  }
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3730      	adds	r7, #48	@ 0x30
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cd8:	b084      	sub	sp, #16
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	f107 001c 	add.w	r0, r7, #28
 8009ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d121      	bne.n	8009d36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	4b21      	ldr	r3, [pc, #132]	@ (8009d88 <USB_CoreInit+0xb0>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d105      	bne.n	8009d2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa92 	bl	800a254 <USB_CoreReset>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73fb      	strb	r3, [r7, #15]
 8009d34:	e010      	b.n	8009d58 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fa86 	bl	800a254 <USB_CoreReset>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8009d58:	7fbb      	ldrb	r3, [r7, #30]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d10b      	bne.n	8009d76 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f043 0206 	orr.w	r2, r3, #6
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f043 0220 	orr.w	r2, r3, #32
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d82:	b004      	add	sp, #16
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	ffbdffbf 	.word	0xffbdffbf

08009d8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f023 0201 	bic.w	r2, r3, #1
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d115      	bne.n	8009dfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ddc:	200a      	movs	r0, #10
 8009dde:	f7f9 fefd 	bl	8003bdc <HAL_Delay>
      ms += 10U;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	330a      	adds	r3, #10
 8009de6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fa25 	bl	800a238 <USB_GetMode>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d01e      	beq.n	8009e32 <USB_SetCurrentMode+0x84>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2bc7      	cmp	r3, #199	@ 0xc7
 8009df8:	d9f0      	bls.n	8009ddc <USB_SetCurrentMode+0x2e>
 8009dfa:	e01a      	b.n	8009e32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d115      	bne.n	8009e2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009e0e:	200a      	movs	r0, #10
 8009e10:	f7f9 fee4 	bl	8003bdc <HAL_Delay>
      ms += 10U;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	330a      	adds	r3, #10
 8009e18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa0c 	bl	800a238 <USB_GetMode>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d005      	beq.n	8009e32 <USB_SetCurrentMode+0x84>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2bc7      	cmp	r3, #199	@ 0xc7
 8009e2a:	d9f0      	bls.n	8009e0e <USB_SetCurrentMode+0x60>
 8009e2c:	e001      	b.n	8009e32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e005      	b.n	8009e3e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2bc8      	cmp	r3, #200	@ 0xc8
 8009e36:	d101      	bne.n	8009e3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e000      	b.n	8009e3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e48:	b084      	sub	sp, #16
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b086      	sub	sp, #24
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e62:	2300      	movs	r3, #0
 8009e64:	613b      	str	r3, [r7, #16]
 8009e66:	e009      	b.n	8009e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	3340      	adds	r3, #64	@ 0x40
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	2200      	movs	r2, #0
 8009e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	613b      	str	r3, [r7, #16]
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b0e      	cmp	r3, #14
 8009e80:	d9f2      	bls.n	8009e68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009e82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d11c      	bne.n	8009ec4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e98:	f043 0302 	orr.w	r3, r3, #2
 8009e9c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	e005      	b.n	8009ed0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	2300      	movs	r3, #0
 8009eda:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009edc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d10d      	bne.n	8009f00 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d104      	bne.n	8009ef6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f968 	bl	800a1c4 <USB_SetDevSpeed>
 8009ef4:	e008      	b.n	8009f08 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f963 	bl	800a1c4 <USB_SetDevSpeed>
 8009efe:	e003      	b.n	8009f08 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f00:	2103      	movs	r1, #3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f95e 	bl	800a1c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f08:	2110      	movs	r1, #16
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8fa 	bl	800a104 <USB_FlushTxFifo>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f924 	bl	800a168 <USB_FlushRxFifo>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f30:	461a      	mov	r2, r3
 8009f32:	2300      	movs	r3, #0
 8009f34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f4e:	2300      	movs	r3, #0
 8009f50:	613b      	str	r3, [r7, #16]
 8009f52:	e043      	b.n	8009fdc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f6a:	d118      	bne.n	8009f9e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	e013      	b.n	8009fb0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f94:	461a      	mov	r2, r3
 8009f96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	e008      	b.n	8009fb0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009faa:	461a      	mov	r2, r3
 8009fac:	2300      	movs	r3, #0
 8009fae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009fd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	613b      	str	r3, [r7, #16]
 8009fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d3b5      	bcc.n	8009f54 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	613b      	str	r3, [r7, #16]
 8009fec:	e043      	b.n	800a076 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a004:	d118      	bne.n	800a038 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a018:	461a      	mov	r2, r3
 800a01a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	e013      	b.n	800a04a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	4413      	add	r3, r2
 800a02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02e:	461a      	mov	r2, r3
 800a030:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	e008      	b.n	800a04a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a044:	461a      	mov	r2, r3
 800a046:	2300      	movs	r3, #0
 800a048:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a056:	461a      	mov	r2, r3
 800a058:	2300      	movs	r3, #0
 800a05a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a068:	461a      	mov	r2, r3
 800a06a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a06e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	3301      	adds	r3, #1
 800a074:	613b      	str	r3, [r7, #16]
 800a076:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a07a:	461a      	mov	r2, r3
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	4293      	cmp	r3, r2
 800a080:	d3b5      	bcc.n	8009fee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a094:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a0a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a0a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d105      	bne.n	800a0b8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	f043 0210 	orr.w	r2, r3, #16
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699a      	ldr	r2, [r3, #24]
 800a0bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a0fc <USB_DevInit+0x2b4>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a0c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d005      	beq.n	800a0d8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	f043 0208 	orr.w	r2, r3, #8
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a0d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d105      	bne.n	800a0ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	699a      	ldr	r2, [r3, #24]
 800a0e4:	4b06      	ldr	r3, [pc, #24]	@ (800a100 <USB_DevInit+0x2b8>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0f8:	b004      	add	sp, #16
 800a0fa:	4770      	bx	lr
 800a0fc:	803c3800 	.word	0x803c3800
 800a100:	40000004 	.word	0x40000004

0800a104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3301      	adds	r3, #1
 800a116:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a11e:	d901      	bls.n	800a124 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e01b      	b.n	800a15c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	daf2      	bge.n	800a112 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	019b      	lsls	r3, r3, #6
 800a134:	f043 0220 	orr.w	r2, r3, #32
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3301      	adds	r3, #1
 800a140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a148:	d901      	bls.n	800a14e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e006      	b.n	800a15c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b20      	cmp	r3, #32
 800a158:	d0f0      	beq.n	800a13c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3301      	adds	r3, #1
 800a178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a180:	d901      	bls.n	800a186 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e018      	b.n	800a1b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	daf2      	bge.n	800a174 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2210      	movs	r2, #16
 800a196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3301      	adds	r3, #1
 800a19c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1a4:	d901      	bls.n	800a1aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e006      	b.n	800a1b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0310 	and.w	r3, r3, #16
 800a1b2:	2b10      	cmp	r3, #16
 800a1b4:	d0f0      	beq.n	800a198 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b085      	sub	sp, #20
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a210:	f023 0303 	bic.w	r3, r3, #3
 800a214:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a224:	f043 0302 	orr.w	r3, r3, #2
 800a228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	f003 0301 	and.w	r3, r3, #1
}
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	3301      	adds	r3, #1
 800a264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a26c:	d901      	bls.n	800a272 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e01b      	b.n	800a2aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	2b00      	cmp	r3, #0
 800a278:	daf2      	bge.n	800a260 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	f043 0201 	orr.w	r2, r3, #1
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3301      	adds	r3, #1
 800a28e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a296:	d901      	bls.n	800a29c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e006      	b.n	800a2aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d0f0      	beq.n	800a28a <USB_CoreReset+0x36>

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <atof>:
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	f000 be02 	b.w	800aec0 <strtod>

0800a2bc <sulp>:
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	4604      	mov	r4, r0
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	ec45 4b10 	vmov	d0, r4, r5
 800a2c6:	4616      	mov	r6, r2
 800a2c8:	f003 fa6e 	bl	800d7a8 <__ulp>
 800a2cc:	ec51 0b10 	vmov	r0, r1, d0
 800a2d0:	b17e      	cbz	r6, 800a2f2 <sulp+0x36>
 800a2d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd09      	ble.n	800a2f2 <sulp+0x36>
 800a2de:	051b      	lsls	r3, r3, #20
 800a2e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a2e4:	2400      	movs	r4, #0
 800a2e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	462b      	mov	r3, r5
 800a2ee:	f7f6 f9a3 	bl	8000638 <__aeabi_dmul>
 800a2f2:	ec41 0b10 	vmov	d0, r0, r1
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}

0800a2f8 <_strtod_l>:
 800a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	b09f      	sub	sp, #124	@ 0x7c
 800a2fe:	460c      	mov	r4, r1
 800a300:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a302:	2200      	movs	r2, #0
 800a304:	921a      	str	r2, [sp, #104]	@ 0x68
 800a306:	9005      	str	r0, [sp, #20]
 800a308:	f04f 0a00 	mov.w	sl, #0
 800a30c:	f04f 0b00 	mov.w	fp, #0
 800a310:	460a      	mov	r2, r1
 800a312:	9219      	str	r2, [sp, #100]	@ 0x64
 800a314:	7811      	ldrb	r1, [r2, #0]
 800a316:	292b      	cmp	r1, #43	@ 0x2b
 800a318:	d04a      	beq.n	800a3b0 <_strtod_l+0xb8>
 800a31a:	d838      	bhi.n	800a38e <_strtod_l+0x96>
 800a31c:	290d      	cmp	r1, #13
 800a31e:	d832      	bhi.n	800a386 <_strtod_l+0x8e>
 800a320:	2908      	cmp	r1, #8
 800a322:	d832      	bhi.n	800a38a <_strtod_l+0x92>
 800a324:	2900      	cmp	r1, #0
 800a326:	d03b      	beq.n	800a3a0 <_strtod_l+0xa8>
 800a328:	2200      	movs	r2, #0
 800a32a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a32c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a32e:	782a      	ldrb	r2, [r5, #0]
 800a330:	2a30      	cmp	r2, #48	@ 0x30
 800a332:	f040 80b3 	bne.w	800a49c <_strtod_l+0x1a4>
 800a336:	786a      	ldrb	r2, [r5, #1]
 800a338:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a33c:	2a58      	cmp	r2, #88	@ 0x58
 800a33e:	d16e      	bne.n	800a41e <_strtod_l+0x126>
 800a340:	9302      	str	r3, [sp, #8]
 800a342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	ab1a      	add	r3, sp, #104	@ 0x68
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	4a8e      	ldr	r2, [pc, #568]	@ (800a584 <_strtod_l+0x28c>)
 800a34c:	9805      	ldr	r0, [sp, #20]
 800a34e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a350:	a919      	add	r1, sp, #100	@ 0x64
 800a352:	f002 fb1b 	bl	800c98c <__gethex>
 800a356:	f010 060f 	ands.w	r6, r0, #15
 800a35a:	4604      	mov	r4, r0
 800a35c:	d005      	beq.n	800a36a <_strtod_l+0x72>
 800a35e:	2e06      	cmp	r6, #6
 800a360:	d128      	bne.n	800a3b4 <_strtod_l+0xbc>
 800a362:	3501      	adds	r5, #1
 800a364:	2300      	movs	r3, #0
 800a366:	9519      	str	r5, [sp, #100]	@ 0x64
 800a368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a36a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f040 858e 	bne.w	800ae8e <_strtod_l+0xb96>
 800a372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a374:	b1cb      	cbz	r3, 800a3aa <_strtod_l+0xb2>
 800a376:	4652      	mov	r2, sl
 800a378:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a37c:	ec43 2b10 	vmov	d0, r2, r3
 800a380:	b01f      	add	sp, #124	@ 0x7c
 800a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a386:	2920      	cmp	r1, #32
 800a388:	d1ce      	bne.n	800a328 <_strtod_l+0x30>
 800a38a:	3201      	adds	r2, #1
 800a38c:	e7c1      	b.n	800a312 <_strtod_l+0x1a>
 800a38e:	292d      	cmp	r1, #45	@ 0x2d
 800a390:	d1ca      	bne.n	800a328 <_strtod_l+0x30>
 800a392:	2101      	movs	r1, #1
 800a394:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a396:	1c51      	adds	r1, r2, #1
 800a398:	9119      	str	r1, [sp, #100]	@ 0x64
 800a39a:	7852      	ldrb	r2, [r2, #1]
 800a39c:	2a00      	cmp	r2, #0
 800a39e:	d1c5      	bne.n	800a32c <_strtod_l+0x34>
 800a3a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f040 8570 	bne.w	800ae8a <_strtod_l+0xb92>
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	e7e5      	b.n	800a37c <_strtod_l+0x84>
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	e7ef      	b.n	800a394 <_strtod_l+0x9c>
 800a3b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3b6:	b13a      	cbz	r2, 800a3c8 <_strtod_l+0xd0>
 800a3b8:	2135      	movs	r1, #53	@ 0x35
 800a3ba:	a81c      	add	r0, sp, #112	@ 0x70
 800a3bc:	f003 faee 	bl	800d99c <__copybits>
 800a3c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3c2:	9805      	ldr	r0, [sp, #20]
 800a3c4:	f002 febc 	bl	800d140 <_Bfree>
 800a3c8:	3e01      	subs	r6, #1
 800a3ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a3cc:	2e04      	cmp	r6, #4
 800a3ce:	d806      	bhi.n	800a3de <_strtod_l+0xe6>
 800a3d0:	e8df f006 	tbb	[pc, r6]
 800a3d4:	201d0314 	.word	0x201d0314
 800a3d8:	14          	.byte	0x14
 800a3d9:	00          	.byte	0x00
 800a3da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a3de:	05e1      	lsls	r1, r4, #23
 800a3e0:	bf48      	it	mi
 800a3e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a3e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3ea:	0d1b      	lsrs	r3, r3, #20
 800a3ec:	051b      	lsls	r3, r3, #20
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1bb      	bne.n	800a36a <_strtod_l+0x72>
 800a3f2:	f001 fb87 	bl	800bb04 <__errno>
 800a3f6:	2322      	movs	r3, #34	@ 0x22
 800a3f8:	6003      	str	r3, [r0, #0]
 800a3fa:	e7b6      	b.n	800a36a <_strtod_l+0x72>
 800a3fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a400:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a404:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a408:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a40c:	e7e7      	b.n	800a3de <_strtod_l+0xe6>
 800a40e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a58c <_strtod_l+0x294>
 800a412:	e7e4      	b.n	800a3de <_strtod_l+0xe6>
 800a414:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a418:	f04f 3aff 	mov.w	sl, #4294967295
 800a41c:	e7df      	b.n	800a3de <_strtod_l+0xe6>
 800a41e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	9219      	str	r2, [sp, #100]	@ 0x64
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b30      	cmp	r3, #48	@ 0x30
 800a428:	d0f9      	beq.n	800a41e <_strtod_l+0x126>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d09d      	beq.n	800a36a <_strtod_l+0x72>
 800a42e:	2301      	movs	r3, #1
 800a430:	9309      	str	r3, [sp, #36]	@ 0x24
 800a432:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a434:	930c      	str	r3, [sp, #48]	@ 0x30
 800a436:	2300      	movs	r3, #0
 800a438:	9308      	str	r3, [sp, #32]
 800a43a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a43c:	461f      	mov	r7, r3
 800a43e:	220a      	movs	r2, #10
 800a440:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a442:	7805      	ldrb	r5, [r0, #0]
 800a444:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a448:	b2d9      	uxtb	r1, r3
 800a44a:	2909      	cmp	r1, #9
 800a44c:	d928      	bls.n	800a4a0 <_strtod_l+0x1a8>
 800a44e:	494e      	ldr	r1, [pc, #312]	@ (800a588 <_strtod_l+0x290>)
 800a450:	2201      	movs	r2, #1
 800a452:	f001 fafa 	bl	800ba4a <strncmp>
 800a456:	2800      	cmp	r0, #0
 800a458:	d032      	beq.n	800a4c0 <_strtod_l+0x1c8>
 800a45a:	2000      	movs	r0, #0
 800a45c:	462a      	mov	r2, r5
 800a45e:	4681      	mov	r9, r0
 800a460:	463d      	mov	r5, r7
 800a462:	4603      	mov	r3, r0
 800a464:	2a65      	cmp	r2, #101	@ 0x65
 800a466:	d001      	beq.n	800a46c <_strtod_l+0x174>
 800a468:	2a45      	cmp	r2, #69	@ 0x45
 800a46a:	d114      	bne.n	800a496 <_strtod_l+0x19e>
 800a46c:	b91d      	cbnz	r5, 800a476 <_strtod_l+0x17e>
 800a46e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a470:	4302      	orrs	r2, r0
 800a472:	d095      	beq.n	800a3a0 <_strtod_l+0xa8>
 800a474:	2500      	movs	r5, #0
 800a476:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a478:	1c62      	adds	r2, r4, #1
 800a47a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a47c:	7862      	ldrb	r2, [r4, #1]
 800a47e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a480:	d077      	beq.n	800a572 <_strtod_l+0x27a>
 800a482:	2a2d      	cmp	r2, #45	@ 0x2d
 800a484:	d07b      	beq.n	800a57e <_strtod_l+0x286>
 800a486:	f04f 0c00 	mov.w	ip, #0
 800a48a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a48e:	2909      	cmp	r1, #9
 800a490:	f240 8082 	bls.w	800a598 <_strtod_l+0x2a0>
 800a494:	9419      	str	r4, [sp, #100]	@ 0x64
 800a496:	f04f 0800 	mov.w	r8, #0
 800a49a:	e0a2      	b.n	800a5e2 <_strtod_l+0x2ea>
 800a49c:	2300      	movs	r3, #0
 800a49e:	e7c7      	b.n	800a430 <_strtod_l+0x138>
 800a4a0:	2f08      	cmp	r7, #8
 800a4a2:	bfd5      	itete	le
 800a4a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a4a6:	9908      	ldrgt	r1, [sp, #32]
 800a4a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a4b0:	f100 0001 	add.w	r0, r0, #1
 800a4b4:	bfd4      	ite	le
 800a4b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a4b8:	9308      	strgt	r3, [sp, #32]
 800a4ba:	3701      	adds	r7, #1
 800a4bc:	9019      	str	r0, [sp, #100]	@ 0x64
 800a4be:	e7bf      	b.n	800a440 <_strtod_l+0x148>
 800a4c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4c6:	785a      	ldrb	r2, [r3, #1]
 800a4c8:	b37f      	cbz	r7, 800a52a <_strtod_l+0x232>
 800a4ca:	4681      	mov	r9, r0
 800a4cc:	463d      	mov	r5, r7
 800a4ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a4d2:	2b09      	cmp	r3, #9
 800a4d4:	d912      	bls.n	800a4fc <_strtod_l+0x204>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e7c4      	b.n	800a464 <_strtod_l+0x16c>
 800a4da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4e0:	785a      	ldrb	r2, [r3, #1]
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	2a30      	cmp	r2, #48	@ 0x30
 800a4e6:	d0f8      	beq.n	800a4da <_strtod_l+0x1e2>
 800a4e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	f200 84d3 	bhi.w	800ae98 <_strtod_l+0xba0>
 800a4f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4f6:	4681      	mov	r9, r0
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	3a30      	subs	r2, #48	@ 0x30
 800a4fe:	f100 0301 	add.w	r3, r0, #1
 800a502:	d02a      	beq.n	800a55a <_strtod_l+0x262>
 800a504:	4499      	add	r9, r3
 800a506:	eb00 0c05 	add.w	ip, r0, r5
 800a50a:	462b      	mov	r3, r5
 800a50c:	210a      	movs	r1, #10
 800a50e:	4563      	cmp	r3, ip
 800a510:	d10d      	bne.n	800a52e <_strtod_l+0x236>
 800a512:	1c69      	adds	r1, r5, #1
 800a514:	4401      	add	r1, r0
 800a516:	4428      	add	r0, r5
 800a518:	2808      	cmp	r0, #8
 800a51a:	dc16      	bgt.n	800a54a <_strtod_l+0x252>
 800a51c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a51e:	230a      	movs	r3, #10
 800a520:	fb03 2300 	mla	r3, r3, r0, r2
 800a524:	930a      	str	r3, [sp, #40]	@ 0x28
 800a526:	2300      	movs	r3, #0
 800a528:	e018      	b.n	800a55c <_strtod_l+0x264>
 800a52a:	4638      	mov	r0, r7
 800a52c:	e7da      	b.n	800a4e4 <_strtod_l+0x1ec>
 800a52e:	2b08      	cmp	r3, #8
 800a530:	f103 0301 	add.w	r3, r3, #1
 800a534:	dc03      	bgt.n	800a53e <_strtod_l+0x246>
 800a536:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a538:	434e      	muls	r6, r1
 800a53a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a53c:	e7e7      	b.n	800a50e <_strtod_l+0x216>
 800a53e:	2b10      	cmp	r3, #16
 800a540:	bfde      	ittt	le
 800a542:	9e08      	ldrle	r6, [sp, #32]
 800a544:	434e      	mulle	r6, r1
 800a546:	9608      	strle	r6, [sp, #32]
 800a548:	e7e1      	b.n	800a50e <_strtod_l+0x216>
 800a54a:	280f      	cmp	r0, #15
 800a54c:	dceb      	bgt.n	800a526 <_strtod_l+0x22e>
 800a54e:	9808      	ldr	r0, [sp, #32]
 800a550:	230a      	movs	r3, #10
 800a552:	fb03 2300 	mla	r3, r3, r0, r2
 800a556:	9308      	str	r3, [sp, #32]
 800a558:	e7e5      	b.n	800a526 <_strtod_l+0x22e>
 800a55a:	4629      	mov	r1, r5
 800a55c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a55e:	1c50      	adds	r0, r2, #1
 800a560:	9019      	str	r0, [sp, #100]	@ 0x64
 800a562:	7852      	ldrb	r2, [r2, #1]
 800a564:	4618      	mov	r0, r3
 800a566:	460d      	mov	r5, r1
 800a568:	e7b1      	b.n	800a4ce <_strtod_l+0x1d6>
 800a56a:	f04f 0900 	mov.w	r9, #0
 800a56e:	2301      	movs	r3, #1
 800a570:	e77d      	b.n	800a46e <_strtod_l+0x176>
 800a572:	f04f 0c00 	mov.w	ip, #0
 800a576:	1ca2      	adds	r2, r4, #2
 800a578:	9219      	str	r2, [sp, #100]	@ 0x64
 800a57a:	78a2      	ldrb	r2, [r4, #2]
 800a57c:	e785      	b.n	800a48a <_strtod_l+0x192>
 800a57e:	f04f 0c01 	mov.w	ip, #1
 800a582:	e7f8      	b.n	800a576 <_strtod_l+0x27e>
 800a584:	0800e610 	.word	0x0800e610
 800a588:	0800e5f8 	.word	0x0800e5f8
 800a58c:	7ff00000 	.word	0x7ff00000
 800a590:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a592:	1c51      	adds	r1, r2, #1
 800a594:	9119      	str	r1, [sp, #100]	@ 0x64
 800a596:	7852      	ldrb	r2, [r2, #1]
 800a598:	2a30      	cmp	r2, #48	@ 0x30
 800a59a:	d0f9      	beq.n	800a590 <_strtod_l+0x298>
 800a59c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a5a0:	2908      	cmp	r1, #8
 800a5a2:	f63f af78 	bhi.w	800a496 <_strtod_l+0x19e>
 800a5a6:	3a30      	subs	r2, #48	@ 0x30
 800a5a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a5ae:	f04f 080a 	mov.w	r8, #10
 800a5b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5b4:	1c56      	adds	r6, r2, #1
 800a5b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800a5b8:	7852      	ldrb	r2, [r2, #1]
 800a5ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a5be:	f1be 0f09 	cmp.w	lr, #9
 800a5c2:	d939      	bls.n	800a638 <_strtod_l+0x340>
 800a5c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a5c6:	1a76      	subs	r6, r6, r1
 800a5c8:	2e08      	cmp	r6, #8
 800a5ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a5ce:	dc03      	bgt.n	800a5d8 <_strtod_l+0x2e0>
 800a5d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a5d2:	4588      	cmp	r8, r1
 800a5d4:	bfa8      	it	ge
 800a5d6:	4688      	movge	r8, r1
 800a5d8:	f1bc 0f00 	cmp.w	ip, #0
 800a5dc:	d001      	beq.n	800a5e2 <_strtod_l+0x2ea>
 800a5de:	f1c8 0800 	rsb	r8, r8, #0
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	d14e      	bne.n	800a684 <_strtod_l+0x38c>
 800a5e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5e8:	4308      	orrs	r0, r1
 800a5ea:	f47f aebe 	bne.w	800a36a <_strtod_l+0x72>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f47f aed6 	bne.w	800a3a0 <_strtod_l+0xa8>
 800a5f4:	2a69      	cmp	r2, #105	@ 0x69
 800a5f6:	d028      	beq.n	800a64a <_strtod_l+0x352>
 800a5f8:	dc25      	bgt.n	800a646 <_strtod_l+0x34e>
 800a5fa:	2a49      	cmp	r2, #73	@ 0x49
 800a5fc:	d025      	beq.n	800a64a <_strtod_l+0x352>
 800a5fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800a600:	f47f aece 	bne.w	800a3a0 <_strtod_l+0xa8>
 800a604:	499b      	ldr	r1, [pc, #620]	@ (800a874 <_strtod_l+0x57c>)
 800a606:	a819      	add	r0, sp, #100	@ 0x64
 800a608:	f002 fbe2 	bl	800cdd0 <__match>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f43f aec7 	beq.w	800a3a0 <_strtod_l+0xa8>
 800a612:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b28      	cmp	r3, #40	@ 0x28
 800a618:	d12e      	bne.n	800a678 <_strtod_l+0x380>
 800a61a:	4997      	ldr	r1, [pc, #604]	@ (800a878 <_strtod_l+0x580>)
 800a61c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a61e:	a819      	add	r0, sp, #100	@ 0x64
 800a620:	f002 fbea 	bl	800cdf8 <__hexnan>
 800a624:	2805      	cmp	r0, #5
 800a626:	d127      	bne.n	800a678 <_strtod_l+0x380>
 800a628:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a62a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a62e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a632:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a636:	e698      	b.n	800a36a <_strtod_l+0x72>
 800a638:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a63a:	fb08 2101 	mla	r1, r8, r1, r2
 800a63e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a642:	920e      	str	r2, [sp, #56]	@ 0x38
 800a644:	e7b5      	b.n	800a5b2 <_strtod_l+0x2ba>
 800a646:	2a6e      	cmp	r2, #110	@ 0x6e
 800a648:	e7da      	b.n	800a600 <_strtod_l+0x308>
 800a64a:	498c      	ldr	r1, [pc, #560]	@ (800a87c <_strtod_l+0x584>)
 800a64c:	a819      	add	r0, sp, #100	@ 0x64
 800a64e:	f002 fbbf 	bl	800cdd0 <__match>
 800a652:	2800      	cmp	r0, #0
 800a654:	f43f aea4 	beq.w	800a3a0 <_strtod_l+0xa8>
 800a658:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a65a:	4989      	ldr	r1, [pc, #548]	@ (800a880 <_strtod_l+0x588>)
 800a65c:	3b01      	subs	r3, #1
 800a65e:	a819      	add	r0, sp, #100	@ 0x64
 800a660:	9319      	str	r3, [sp, #100]	@ 0x64
 800a662:	f002 fbb5 	bl	800cdd0 <__match>
 800a666:	b910      	cbnz	r0, 800a66e <_strtod_l+0x376>
 800a668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a66a:	3301      	adds	r3, #1
 800a66c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a66e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a890 <_strtod_l+0x598>
 800a672:	f04f 0a00 	mov.w	sl, #0
 800a676:	e678      	b.n	800a36a <_strtod_l+0x72>
 800a678:	4882      	ldr	r0, [pc, #520]	@ (800a884 <_strtod_l+0x58c>)
 800a67a:	f001 fa81 	bl	800bb80 <nan>
 800a67e:	ec5b ab10 	vmov	sl, fp, d0
 800a682:	e672      	b.n	800a36a <_strtod_l+0x72>
 800a684:	eba8 0309 	sub.w	r3, r8, r9
 800a688:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a68a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a68c:	2f00      	cmp	r7, #0
 800a68e:	bf08      	it	eq
 800a690:	462f      	moveq	r7, r5
 800a692:	2d10      	cmp	r5, #16
 800a694:	462c      	mov	r4, r5
 800a696:	bfa8      	it	ge
 800a698:	2410      	movge	r4, #16
 800a69a:	f7f5 ff53 	bl	8000544 <__aeabi_ui2d>
 800a69e:	2d09      	cmp	r5, #9
 800a6a0:	4682      	mov	sl, r0
 800a6a2:	468b      	mov	fp, r1
 800a6a4:	dc13      	bgt.n	800a6ce <_strtod_l+0x3d6>
 800a6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f43f ae5e 	beq.w	800a36a <_strtod_l+0x72>
 800a6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b0:	dd78      	ble.n	800a7a4 <_strtod_l+0x4ac>
 800a6b2:	2b16      	cmp	r3, #22
 800a6b4:	dc5f      	bgt.n	800a776 <_strtod_l+0x47e>
 800a6b6:	4974      	ldr	r1, [pc, #464]	@ (800a888 <_strtod_l+0x590>)
 800a6b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6c0:	4652      	mov	r2, sl
 800a6c2:	465b      	mov	r3, fp
 800a6c4:	f7f5 ffb8 	bl	8000638 <__aeabi_dmul>
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	468b      	mov	fp, r1
 800a6cc:	e64d      	b.n	800a36a <_strtod_l+0x72>
 800a6ce:	4b6e      	ldr	r3, [pc, #440]	@ (800a888 <_strtod_l+0x590>)
 800a6d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a6d8:	f7f5 ffae 	bl	8000638 <__aeabi_dmul>
 800a6dc:	4682      	mov	sl, r0
 800a6de:	9808      	ldr	r0, [sp, #32]
 800a6e0:	468b      	mov	fp, r1
 800a6e2:	f7f5 ff2f 	bl	8000544 <__aeabi_ui2d>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4650      	mov	r0, sl
 800a6ec:	4659      	mov	r1, fp
 800a6ee:	f7f5 fded 	bl	80002cc <__adddf3>
 800a6f2:	2d0f      	cmp	r5, #15
 800a6f4:	4682      	mov	sl, r0
 800a6f6:	468b      	mov	fp, r1
 800a6f8:	ddd5      	ble.n	800a6a6 <_strtod_l+0x3ae>
 800a6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6fc:	1b2c      	subs	r4, r5, r4
 800a6fe:	441c      	add	r4, r3
 800a700:	2c00      	cmp	r4, #0
 800a702:	f340 8096 	ble.w	800a832 <_strtod_l+0x53a>
 800a706:	f014 030f 	ands.w	r3, r4, #15
 800a70a:	d00a      	beq.n	800a722 <_strtod_l+0x42a>
 800a70c:	495e      	ldr	r1, [pc, #376]	@ (800a888 <_strtod_l+0x590>)
 800a70e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a712:	4652      	mov	r2, sl
 800a714:	465b      	mov	r3, fp
 800a716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a71a:	f7f5 ff8d 	bl	8000638 <__aeabi_dmul>
 800a71e:	4682      	mov	sl, r0
 800a720:	468b      	mov	fp, r1
 800a722:	f034 040f 	bics.w	r4, r4, #15
 800a726:	d073      	beq.n	800a810 <_strtod_l+0x518>
 800a728:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a72c:	dd48      	ble.n	800a7c0 <_strtod_l+0x4c8>
 800a72e:	2400      	movs	r4, #0
 800a730:	46a0      	mov	r8, r4
 800a732:	940a      	str	r4, [sp, #40]	@ 0x28
 800a734:	46a1      	mov	r9, r4
 800a736:	9a05      	ldr	r2, [sp, #20]
 800a738:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a890 <_strtod_l+0x598>
 800a73c:	2322      	movs	r3, #34	@ 0x22
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	f04f 0a00 	mov.w	sl, #0
 800a744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a746:	2b00      	cmp	r3, #0
 800a748:	f43f ae0f 	beq.w	800a36a <_strtod_l+0x72>
 800a74c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a74e:	9805      	ldr	r0, [sp, #20]
 800a750:	f002 fcf6 	bl	800d140 <_Bfree>
 800a754:	9805      	ldr	r0, [sp, #20]
 800a756:	4649      	mov	r1, r9
 800a758:	f002 fcf2 	bl	800d140 <_Bfree>
 800a75c:	9805      	ldr	r0, [sp, #20]
 800a75e:	4641      	mov	r1, r8
 800a760:	f002 fcee 	bl	800d140 <_Bfree>
 800a764:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a766:	9805      	ldr	r0, [sp, #20]
 800a768:	f002 fcea 	bl	800d140 <_Bfree>
 800a76c:	9805      	ldr	r0, [sp, #20]
 800a76e:	4621      	mov	r1, r4
 800a770:	f002 fce6 	bl	800d140 <_Bfree>
 800a774:	e5f9      	b.n	800a36a <_strtod_l+0x72>
 800a776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a778:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a77c:	4293      	cmp	r3, r2
 800a77e:	dbbc      	blt.n	800a6fa <_strtod_l+0x402>
 800a780:	4c41      	ldr	r4, [pc, #260]	@ (800a888 <_strtod_l+0x590>)
 800a782:	f1c5 050f 	rsb	r5, r5, #15
 800a786:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a78a:	4652      	mov	r2, sl
 800a78c:	465b      	mov	r3, fp
 800a78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a792:	f7f5 ff51 	bl	8000638 <__aeabi_dmul>
 800a796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a798:	1b5d      	subs	r5, r3, r5
 800a79a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a79e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a7a2:	e78f      	b.n	800a6c4 <_strtod_l+0x3cc>
 800a7a4:	3316      	adds	r3, #22
 800a7a6:	dba8      	blt.n	800a6fa <_strtod_l+0x402>
 800a7a8:	4b37      	ldr	r3, [pc, #220]	@ (800a888 <_strtod_l+0x590>)
 800a7aa:	eba9 0808 	sub.w	r8, r9, r8
 800a7ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a7b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a7b6:	4650      	mov	r0, sl
 800a7b8:	4659      	mov	r1, fp
 800a7ba:	f7f6 f867 	bl	800088c <__aeabi_ddiv>
 800a7be:	e783      	b.n	800a6c8 <_strtod_l+0x3d0>
 800a7c0:	4b32      	ldr	r3, [pc, #200]	@ (800a88c <_strtod_l+0x594>)
 800a7c2:	9308      	str	r3, [sp, #32]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	1124      	asrs	r4, r4, #4
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	4659      	mov	r1, fp
 800a7cc:	461e      	mov	r6, r3
 800a7ce:	2c01      	cmp	r4, #1
 800a7d0:	dc21      	bgt.n	800a816 <_strtod_l+0x51e>
 800a7d2:	b10b      	cbz	r3, 800a7d8 <_strtod_l+0x4e0>
 800a7d4:	4682      	mov	sl, r0
 800a7d6:	468b      	mov	fp, r1
 800a7d8:	492c      	ldr	r1, [pc, #176]	@ (800a88c <_strtod_l+0x594>)
 800a7da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a7de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a7e2:	4652      	mov	r2, sl
 800a7e4:	465b      	mov	r3, fp
 800a7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7ea:	f7f5 ff25 	bl	8000638 <__aeabi_dmul>
 800a7ee:	4b28      	ldr	r3, [pc, #160]	@ (800a890 <_strtod_l+0x598>)
 800a7f0:	460a      	mov	r2, r1
 800a7f2:	400b      	ands	r3, r1
 800a7f4:	4927      	ldr	r1, [pc, #156]	@ (800a894 <_strtod_l+0x59c>)
 800a7f6:	428b      	cmp	r3, r1
 800a7f8:	4682      	mov	sl, r0
 800a7fa:	d898      	bhi.n	800a72e <_strtod_l+0x436>
 800a7fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a800:	428b      	cmp	r3, r1
 800a802:	bf86      	itte	hi
 800a804:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a898 <_strtod_l+0x5a0>
 800a808:	f04f 3aff 	movhi.w	sl, #4294967295
 800a80c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a810:	2300      	movs	r3, #0
 800a812:	9308      	str	r3, [sp, #32]
 800a814:	e07a      	b.n	800a90c <_strtod_l+0x614>
 800a816:	07e2      	lsls	r2, r4, #31
 800a818:	d505      	bpl.n	800a826 <_strtod_l+0x52e>
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f7f5 ff0a 	bl	8000638 <__aeabi_dmul>
 800a824:	2301      	movs	r3, #1
 800a826:	9a08      	ldr	r2, [sp, #32]
 800a828:	3208      	adds	r2, #8
 800a82a:	3601      	adds	r6, #1
 800a82c:	1064      	asrs	r4, r4, #1
 800a82e:	9208      	str	r2, [sp, #32]
 800a830:	e7cd      	b.n	800a7ce <_strtod_l+0x4d6>
 800a832:	d0ed      	beq.n	800a810 <_strtod_l+0x518>
 800a834:	4264      	negs	r4, r4
 800a836:	f014 020f 	ands.w	r2, r4, #15
 800a83a:	d00a      	beq.n	800a852 <_strtod_l+0x55a>
 800a83c:	4b12      	ldr	r3, [pc, #72]	@ (800a888 <_strtod_l+0x590>)
 800a83e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a842:	4650      	mov	r0, sl
 800a844:	4659      	mov	r1, fp
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f7f6 f81f 	bl	800088c <__aeabi_ddiv>
 800a84e:	4682      	mov	sl, r0
 800a850:	468b      	mov	fp, r1
 800a852:	1124      	asrs	r4, r4, #4
 800a854:	d0dc      	beq.n	800a810 <_strtod_l+0x518>
 800a856:	2c1f      	cmp	r4, #31
 800a858:	dd20      	ble.n	800a89c <_strtod_l+0x5a4>
 800a85a:	2400      	movs	r4, #0
 800a85c:	46a0      	mov	r8, r4
 800a85e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a860:	46a1      	mov	r9, r4
 800a862:	9a05      	ldr	r2, [sp, #20]
 800a864:	2322      	movs	r3, #34	@ 0x22
 800a866:	f04f 0a00 	mov.w	sl, #0
 800a86a:	f04f 0b00 	mov.w	fp, #0
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	e768      	b.n	800a744 <_strtod_l+0x44c>
 800a872:	bf00      	nop
 800a874:	0800e75e 	.word	0x0800e75e
 800a878:	0800e5fc 	.word	0x0800e5fc
 800a87c:	0800e756 	.word	0x0800e756
 800a880:	0800e790 	.word	0x0800e790
 800a884:	0800ea1c 	.word	0x0800ea1c
 800a888:	0800e908 	.word	0x0800e908
 800a88c:	0800e8e0 	.word	0x0800e8e0
 800a890:	7ff00000 	.word	0x7ff00000
 800a894:	7ca00000 	.word	0x7ca00000
 800a898:	7fefffff 	.word	0x7fefffff
 800a89c:	f014 0310 	ands.w	r3, r4, #16
 800a8a0:	bf18      	it	ne
 800a8a2:	236a      	movne	r3, #106	@ 0x6a
 800a8a4:	4ea9      	ldr	r6, [pc, #676]	@ (800ab4c <_strtod_l+0x854>)
 800a8a6:	9308      	str	r3, [sp, #32]
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	4659      	mov	r1, fp
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	07e2      	lsls	r2, r4, #31
 800a8b0:	d504      	bpl.n	800a8bc <_strtod_l+0x5c4>
 800a8b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8b6:	f7f5 febf 	bl	8000638 <__aeabi_dmul>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	1064      	asrs	r4, r4, #1
 800a8be:	f106 0608 	add.w	r6, r6, #8
 800a8c2:	d1f4      	bne.n	800a8ae <_strtod_l+0x5b6>
 800a8c4:	b10b      	cbz	r3, 800a8ca <_strtod_l+0x5d2>
 800a8c6:	4682      	mov	sl, r0
 800a8c8:	468b      	mov	fp, r1
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	b1b3      	cbz	r3, 800a8fc <_strtod_l+0x604>
 800a8ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a8d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	4659      	mov	r1, fp
 800a8da:	dd0f      	ble.n	800a8fc <_strtod_l+0x604>
 800a8dc:	2b1f      	cmp	r3, #31
 800a8de:	dd55      	ble.n	800a98c <_strtod_l+0x694>
 800a8e0:	2b34      	cmp	r3, #52	@ 0x34
 800a8e2:	bfde      	ittt	le
 800a8e4:	f04f 33ff 	movle.w	r3, #4294967295
 800a8e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a8ec:	4093      	lslle	r3, r2
 800a8ee:	f04f 0a00 	mov.w	sl, #0
 800a8f2:	bfcc      	ite	gt
 800a8f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a8f8:	ea03 0b01 	andle.w	fp, r3, r1
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2300      	movs	r3, #0
 800a900:	4650      	mov	r0, sl
 800a902:	4659      	mov	r1, fp
 800a904:	f7f6 f900 	bl	8000b08 <__aeabi_dcmpeq>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d1a6      	bne.n	800a85a <_strtod_l+0x562>
 800a90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a912:	9805      	ldr	r0, [sp, #20]
 800a914:	462b      	mov	r3, r5
 800a916:	463a      	mov	r2, r7
 800a918:	f002 fc7a 	bl	800d210 <__s2b>
 800a91c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a91e:	2800      	cmp	r0, #0
 800a920:	f43f af05 	beq.w	800a72e <_strtod_l+0x436>
 800a924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a926:	2a00      	cmp	r2, #0
 800a928:	eba9 0308 	sub.w	r3, r9, r8
 800a92c:	bfa8      	it	ge
 800a92e:	2300      	movge	r3, #0
 800a930:	9312      	str	r3, [sp, #72]	@ 0x48
 800a932:	2400      	movs	r4, #0
 800a934:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a938:	9316      	str	r3, [sp, #88]	@ 0x58
 800a93a:	46a0      	mov	r8, r4
 800a93c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a93e:	9805      	ldr	r0, [sp, #20]
 800a940:	6859      	ldr	r1, [r3, #4]
 800a942:	f002 fbbd 	bl	800d0c0 <_Balloc>
 800a946:	4681      	mov	r9, r0
 800a948:	2800      	cmp	r0, #0
 800a94a:	f43f aef4 	beq.w	800a736 <_strtod_l+0x43e>
 800a94e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a950:	691a      	ldr	r2, [r3, #16]
 800a952:	3202      	adds	r2, #2
 800a954:	f103 010c 	add.w	r1, r3, #12
 800a958:	0092      	lsls	r2, r2, #2
 800a95a:	300c      	adds	r0, #12
 800a95c:	f001 f8ff 	bl	800bb5e <memcpy>
 800a960:	ec4b ab10 	vmov	d0, sl, fp
 800a964:	9805      	ldr	r0, [sp, #20]
 800a966:	aa1c      	add	r2, sp, #112	@ 0x70
 800a968:	a91b      	add	r1, sp, #108	@ 0x6c
 800a96a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a96e:	f002 ff8b 	bl	800d888 <__d2b>
 800a972:	901a      	str	r0, [sp, #104]	@ 0x68
 800a974:	2800      	cmp	r0, #0
 800a976:	f43f aede 	beq.w	800a736 <_strtod_l+0x43e>
 800a97a:	9805      	ldr	r0, [sp, #20]
 800a97c:	2101      	movs	r1, #1
 800a97e:	f002 fcdd 	bl	800d33c <__i2b>
 800a982:	4680      	mov	r8, r0
 800a984:	b948      	cbnz	r0, 800a99a <_strtod_l+0x6a2>
 800a986:	f04f 0800 	mov.w	r8, #0
 800a98a:	e6d4      	b.n	800a736 <_strtod_l+0x43e>
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295
 800a990:	fa02 f303 	lsl.w	r3, r2, r3
 800a994:	ea03 0a0a 	and.w	sl, r3, sl
 800a998:	e7b0      	b.n	800a8fc <_strtod_l+0x604>
 800a99a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a99c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a99e:	2d00      	cmp	r5, #0
 800a9a0:	bfab      	itete	ge
 800a9a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a9a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a9a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a9a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a9aa:	bfac      	ite	ge
 800a9ac:	18ef      	addge	r7, r5, r3
 800a9ae:	1b5e      	sublt	r6, r3, r5
 800a9b0:	9b08      	ldr	r3, [sp, #32]
 800a9b2:	1aed      	subs	r5, r5, r3
 800a9b4:	4415      	add	r5, r2
 800a9b6:	4b66      	ldr	r3, [pc, #408]	@ (800ab50 <_strtod_l+0x858>)
 800a9b8:	3d01      	subs	r5, #1
 800a9ba:	429d      	cmp	r5, r3
 800a9bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a9c0:	da50      	bge.n	800aa64 <_strtod_l+0x76c>
 800a9c2:	1b5b      	subs	r3, r3, r5
 800a9c4:	2b1f      	cmp	r3, #31
 800a9c6:	eba2 0203 	sub.w	r2, r2, r3
 800a9ca:	f04f 0101 	mov.w	r1, #1
 800a9ce:	dc3d      	bgt.n	800aa4c <_strtod_l+0x754>
 800a9d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9da:	18bd      	adds	r5, r7, r2
 800a9dc:	9b08      	ldr	r3, [sp, #32]
 800a9de:	42af      	cmp	r7, r5
 800a9e0:	4416      	add	r6, r2
 800a9e2:	441e      	add	r6, r3
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	bfa8      	it	ge
 800a9e8:	462b      	movge	r3, r5
 800a9ea:	42b3      	cmp	r3, r6
 800a9ec:	bfa8      	it	ge
 800a9ee:	4633      	movge	r3, r6
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	bfc2      	ittt	gt
 800a9f4:	1aed      	subgt	r5, r5, r3
 800a9f6:	1af6      	subgt	r6, r6, r3
 800a9f8:	1aff      	subgt	r7, r7, r3
 800a9fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dd16      	ble.n	800aa2e <_strtod_l+0x736>
 800aa00:	4641      	mov	r1, r8
 800aa02:	9805      	ldr	r0, [sp, #20]
 800aa04:	461a      	mov	r2, r3
 800aa06:	f002 fd59 	bl	800d4bc <__pow5mult>
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d0ba      	beq.n	800a986 <_strtod_l+0x68e>
 800aa10:	4601      	mov	r1, r0
 800aa12:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa14:	9805      	ldr	r0, [sp, #20]
 800aa16:	f002 fca7 	bl	800d368 <__multiply>
 800aa1a:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f43f ae8a 	beq.w	800a736 <_strtod_l+0x43e>
 800aa22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa24:	9805      	ldr	r0, [sp, #20]
 800aa26:	f002 fb8b 	bl	800d140 <_Bfree>
 800aa2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	dc1d      	bgt.n	800aa6e <_strtod_l+0x776>
 800aa32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd23      	ble.n	800aa80 <_strtod_l+0x788>
 800aa38:	4649      	mov	r1, r9
 800aa3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa3c:	9805      	ldr	r0, [sp, #20]
 800aa3e:	f002 fd3d 	bl	800d4bc <__pow5mult>
 800aa42:	4681      	mov	r9, r0
 800aa44:	b9e0      	cbnz	r0, 800aa80 <_strtod_l+0x788>
 800aa46:	f04f 0900 	mov.w	r9, #0
 800aa4a:	e674      	b.n	800a736 <_strtod_l+0x43e>
 800aa4c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aa50:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aa54:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aa58:	35e2      	adds	r5, #226	@ 0xe2
 800aa5a:	fa01 f305 	lsl.w	r3, r1, r5
 800aa5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa60:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aa62:	e7ba      	b.n	800a9da <_strtod_l+0x6e2>
 800aa64:	2300      	movs	r3, #0
 800aa66:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa68:	2301      	movs	r3, #1
 800aa6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa6c:	e7b5      	b.n	800a9da <_strtod_l+0x6e2>
 800aa6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa70:	9805      	ldr	r0, [sp, #20]
 800aa72:	462a      	mov	r2, r5
 800aa74:	f002 fd7c 	bl	800d570 <__lshift>
 800aa78:	901a      	str	r0, [sp, #104]	@ 0x68
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d1d9      	bne.n	800aa32 <_strtod_l+0x73a>
 800aa7e:	e65a      	b.n	800a736 <_strtod_l+0x43e>
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	dd07      	ble.n	800aa94 <_strtod_l+0x79c>
 800aa84:	4649      	mov	r1, r9
 800aa86:	9805      	ldr	r0, [sp, #20]
 800aa88:	4632      	mov	r2, r6
 800aa8a:	f002 fd71 	bl	800d570 <__lshift>
 800aa8e:	4681      	mov	r9, r0
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d0d8      	beq.n	800aa46 <_strtod_l+0x74e>
 800aa94:	2f00      	cmp	r7, #0
 800aa96:	dd08      	ble.n	800aaaa <_strtod_l+0x7b2>
 800aa98:	4641      	mov	r1, r8
 800aa9a:	9805      	ldr	r0, [sp, #20]
 800aa9c:	463a      	mov	r2, r7
 800aa9e:	f002 fd67 	bl	800d570 <__lshift>
 800aaa2:	4680      	mov	r8, r0
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f43f ae46 	beq.w	800a736 <_strtod_l+0x43e>
 800aaaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaac:	9805      	ldr	r0, [sp, #20]
 800aaae:	464a      	mov	r2, r9
 800aab0:	f002 fde6 	bl	800d680 <__mdiff>
 800aab4:	4604      	mov	r4, r0
 800aab6:	2800      	cmp	r0, #0
 800aab8:	f43f ae3d 	beq.w	800a736 <_strtod_l+0x43e>
 800aabc:	68c3      	ldr	r3, [r0, #12]
 800aabe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aac0:	2300      	movs	r3, #0
 800aac2:	60c3      	str	r3, [r0, #12]
 800aac4:	4641      	mov	r1, r8
 800aac6:	f002 fdbf 	bl	800d648 <__mcmp>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	da46      	bge.n	800ab5c <_strtod_l+0x864>
 800aace:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aad0:	ea53 030a 	orrs.w	r3, r3, sl
 800aad4:	d16c      	bne.n	800abb0 <_strtod_l+0x8b8>
 800aad6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d168      	bne.n	800abb0 <_strtod_l+0x8b8>
 800aade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aae2:	0d1b      	lsrs	r3, r3, #20
 800aae4:	051b      	lsls	r3, r3, #20
 800aae6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aaea:	d961      	bls.n	800abb0 <_strtod_l+0x8b8>
 800aaec:	6963      	ldr	r3, [r4, #20]
 800aaee:	b913      	cbnz	r3, 800aaf6 <_strtod_l+0x7fe>
 800aaf0:	6923      	ldr	r3, [r4, #16]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	dd5c      	ble.n	800abb0 <_strtod_l+0x8b8>
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	2201      	movs	r2, #1
 800aafa:	9805      	ldr	r0, [sp, #20]
 800aafc:	f002 fd38 	bl	800d570 <__lshift>
 800ab00:	4641      	mov	r1, r8
 800ab02:	4604      	mov	r4, r0
 800ab04:	f002 fda0 	bl	800d648 <__mcmp>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	dd51      	ble.n	800abb0 <_strtod_l+0x8b8>
 800ab0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab10:	9a08      	ldr	r2, [sp, #32]
 800ab12:	0d1b      	lsrs	r3, r3, #20
 800ab14:	051b      	lsls	r3, r3, #20
 800ab16:	2a00      	cmp	r2, #0
 800ab18:	d06b      	beq.n	800abf2 <_strtod_l+0x8fa>
 800ab1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab1e:	d868      	bhi.n	800abf2 <_strtod_l+0x8fa>
 800ab20:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab24:	f67f ae9d 	bls.w	800a862 <_strtod_l+0x56a>
 800ab28:	4b0a      	ldr	r3, [pc, #40]	@ (800ab54 <_strtod_l+0x85c>)
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f7f5 fd82 	bl	8000638 <__aeabi_dmul>
 800ab34:	4b08      	ldr	r3, [pc, #32]	@ (800ab58 <_strtod_l+0x860>)
 800ab36:	400b      	ands	r3, r1
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f47f ae05 	bne.w	800a74c <_strtod_l+0x454>
 800ab42:	9a05      	ldr	r2, [sp, #20]
 800ab44:	2322      	movs	r3, #34	@ 0x22
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	e600      	b.n	800a74c <_strtod_l+0x454>
 800ab4a:	bf00      	nop
 800ab4c:	0800e628 	.word	0x0800e628
 800ab50:	fffffc02 	.word	0xfffffc02
 800ab54:	39500000 	.word	0x39500000
 800ab58:	7ff00000 	.word	0x7ff00000
 800ab5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ab60:	d165      	bne.n	800ac2e <_strtod_l+0x936>
 800ab62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ab64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab68:	b35a      	cbz	r2, 800abc2 <_strtod_l+0x8ca>
 800ab6a:	4a9f      	ldr	r2, [pc, #636]	@ (800ade8 <_strtod_l+0xaf0>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d12b      	bne.n	800abc8 <_strtod_l+0x8d0>
 800ab70:	9b08      	ldr	r3, [sp, #32]
 800ab72:	4651      	mov	r1, sl
 800ab74:	b303      	cbz	r3, 800abb8 <_strtod_l+0x8c0>
 800ab76:	4b9d      	ldr	r3, [pc, #628]	@ (800adec <_strtod_l+0xaf4>)
 800ab78:	465a      	mov	r2, fp
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ab80:	f04f 32ff 	mov.w	r2, #4294967295
 800ab84:	d81b      	bhi.n	800abbe <_strtod_l+0x8c6>
 800ab86:	0d1b      	lsrs	r3, r3, #20
 800ab88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab90:	4299      	cmp	r1, r3
 800ab92:	d119      	bne.n	800abc8 <_strtod_l+0x8d0>
 800ab94:	4b96      	ldr	r3, [pc, #600]	@ (800adf0 <_strtod_l+0xaf8>)
 800ab96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d102      	bne.n	800aba2 <_strtod_l+0x8aa>
 800ab9c:	3101      	adds	r1, #1
 800ab9e:	f43f adca 	beq.w	800a736 <_strtod_l+0x43e>
 800aba2:	4b92      	ldr	r3, [pc, #584]	@ (800adec <_strtod_l+0xaf4>)
 800aba4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aba6:	401a      	ands	r2, r3
 800aba8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800abac:	f04f 0a00 	mov.w	sl, #0
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1b8      	bne.n	800ab28 <_strtod_l+0x830>
 800abb6:	e5c9      	b.n	800a74c <_strtod_l+0x454>
 800abb8:	f04f 33ff 	mov.w	r3, #4294967295
 800abbc:	e7e8      	b.n	800ab90 <_strtod_l+0x898>
 800abbe:	4613      	mov	r3, r2
 800abc0:	e7e6      	b.n	800ab90 <_strtod_l+0x898>
 800abc2:	ea53 030a 	orrs.w	r3, r3, sl
 800abc6:	d0a1      	beq.n	800ab0c <_strtod_l+0x814>
 800abc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abca:	b1db      	cbz	r3, 800ac04 <_strtod_l+0x90c>
 800abcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abce:	4213      	tst	r3, r2
 800abd0:	d0ee      	beq.n	800abb0 <_strtod_l+0x8b8>
 800abd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abd4:	9a08      	ldr	r2, [sp, #32]
 800abd6:	4650      	mov	r0, sl
 800abd8:	4659      	mov	r1, fp
 800abda:	b1bb      	cbz	r3, 800ac0c <_strtod_l+0x914>
 800abdc:	f7ff fb6e 	bl	800a2bc <sulp>
 800abe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abe4:	ec53 2b10 	vmov	r2, r3, d0
 800abe8:	f7f5 fb70 	bl	80002cc <__adddf3>
 800abec:	4682      	mov	sl, r0
 800abee:	468b      	mov	fp, r1
 800abf0:	e7de      	b.n	800abb0 <_strtod_l+0x8b8>
 800abf2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800abf6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800abfa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800abfe:	f04f 3aff 	mov.w	sl, #4294967295
 800ac02:	e7d5      	b.n	800abb0 <_strtod_l+0x8b8>
 800ac04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac06:	ea13 0f0a 	tst.w	r3, sl
 800ac0a:	e7e1      	b.n	800abd0 <_strtod_l+0x8d8>
 800ac0c:	f7ff fb56 	bl	800a2bc <sulp>
 800ac10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac14:	ec53 2b10 	vmov	r2, r3, d0
 800ac18:	f7f5 fb56 	bl	80002c8 <__aeabi_dsub>
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2300      	movs	r3, #0
 800ac20:	4682      	mov	sl, r0
 800ac22:	468b      	mov	fp, r1
 800ac24:	f7f5 ff70 	bl	8000b08 <__aeabi_dcmpeq>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d0c1      	beq.n	800abb0 <_strtod_l+0x8b8>
 800ac2c:	e619      	b.n	800a862 <_strtod_l+0x56a>
 800ac2e:	4641      	mov	r1, r8
 800ac30:	4620      	mov	r0, r4
 800ac32:	f002 fe81 	bl	800d938 <__ratio>
 800ac36:	ec57 6b10 	vmov	r6, r7, d0
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 ff74 	bl	8000b30 <__aeabi_dcmple>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d06f      	beq.n	800ad2c <_strtod_l+0xa34>
 800ac4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d17a      	bne.n	800ad48 <_strtod_l+0xa50>
 800ac52:	f1ba 0f00 	cmp.w	sl, #0
 800ac56:	d158      	bne.n	800ad0a <_strtod_l+0xa12>
 800ac58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d15a      	bne.n	800ad18 <_strtod_l+0xa20>
 800ac62:	4b64      	ldr	r3, [pc, #400]	@ (800adf4 <_strtod_l+0xafc>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	4630      	mov	r0, r6
 800ac68:	4639      	mov	r1, r7
 800ac6a:	f7f5 ff57 	bl	8000b1c <__aeabi_dcmplt>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d159      	bne.n	800ad26 <_strtod_l+0xa2e>
 800ac72:	4630      	mov	r0, r6
 800ac74:	4639      	mov	r1, r7
 800ac76:	4b60      	ldr	r3, [pc, #384]	@ (800adf8 <_strtod_l+0xb00>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f7f5 fcdd 	bl	8000638 <__aeabi_dmul>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	460f      	mov	r7, r1
 800ac82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ac86:	9606      	str	r6, [sp, #24]
 800ac88:	9307      	str	r3, [sp, #28]
 800ac8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac8e:	4d57      	ldr	r5, [pc, #348]	@ (800adec <_strtod_l+0xaf4>)
 800ac90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac96:	401d      	ands	r5, r3
 800ac98:	4b58      	ldr	r3, [pc, #352]	@ (800adfc <_strtod_l+0xb04>)
 800ac9a:	429d      	cmp	r5, r3
 800ac9c:	f040 80b2 	bne.w	800ae04 <_strtod_l+0xb0c>
 800aca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aca2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aca6:	ec4b ab10 	vmov	d0, sl, fp
 800acaa:	f002 fd7d 	bl	800d7a8 <__ulp>
 800acae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acb2:	ec51 0b10 	vmov	r0, r1, d0
 800acb6:	f7f5 fcbf 	bl	8000638 <__aeabi_dmul>
 800acba:	4652      	mov	r2, sl
 800acbc:	465b      	mov	r3, fp
 800acbe:	f7f5 fb05 	bl	80002cc <__adddf3>
 800acc2:	460b      	mov	r3, r1
 800acc4:	4949      	ldr	r1, [pc, #292]	@ (800adec <_strtod_l+0xaf4>)
 800acc6:	4a4e      	ldr	r2, [pc, #312]	@ (800ae00 <_strtod_l+0xb08>)
 800acc8:	4019      	ands	r1, r3
 800acca:	4291      	cmp	r1, r2
 800accc:	4682      	mov	sl, r0
 800acce:	d942      	bls.n	800ad56 <_strtod_l+0xa5e>
 800acd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800acd2:	4b47      	ldr	r3, [pc, #284]	@ (800adf0 <_strtod_l+0xaf8>)
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d103      	bne.n	800ace0 <_strtod_l+0x9e8>
 800acd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acda:	3301      	adds	r3, #1
 800acdc:	f43f ad2b 	beq.w	800a736 <_strtod_l+0x43e>
 800ace0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800adf0 <_strtod_l+0xaf8>
 800ace4:	f04f 3aff 	mov.w	sl, #4294967295
 800ace8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800acea:	9805      	ldr	r0, [sp, #20]
 800acec:	f002 fa28 	bl	800d140 <_Bfree>
 800acf0:	9805      	ldr	r0, [sp, #20]
 800acf2:	4649      	mov	r1, r9
 800acf4:	f002 fa24 	bl	800d140 <_Bfree>
 800acf8:	9805      	ldr	r0, [sp, #20]
 800acfa:	4641      	mov	r1, r8
 800acfc:	f002 fa20 	bl	800d140 <_Bfree>
 800ad00:	9805      	ldr	r0, [sp, #20]
 800ad02:	4621      	mov	r1, r4
 800ad04:	f002 fa1c 	bl	800d140 <_Bfree>
 800ad08:	e618      	b.n	800a93c <_strtod_l+0x644>
 800ad0a:	f1ba 0f01 	cmp.w	sl, #1
 800ad0e:	d103      	bne.n	800ad18 <_strtod_l+0xa20>
 800ad10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f43f ada5 	beq.w	800a862 <_strtod_l+0x56a>
 800ad18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800adc8 <_strtod_l+0xad0>
 800ad1c:	4f35      	ldr	r7, [pc, #212]	@ (800adf4 <_strtod_l+0xafc>)
 800ad1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad22:	2600      	movs	r6, #0
 800ad24:	e7b1      	b.n	800ac8a <_strtod_l+0x992>
 800ad26:	4f34      	ldr	r7, [pc, #208]	@ (800adf8 <_strtod_l+0xb00>)
 800ad28:	2600      	movs	r6, #0
 800ad2a:	e7aa      	b.n	800ac82 <_strtod_l+0x98a>
 800ad2c:	4b32      	ldr	r3, [pc, #200]	@ (800adf8 <_strtod_l+0xb00>)
 800ad2e:	4630      	mov	r0, r6
 800ad30:	4639      	mov	r1, r7
 800ad32:	2200      	movs	r2, #0
 800ad34:	f7f5 fc80 	bl	8000638 <__aeabi_dmul>
 800ad38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d09f      	beq.n	800ac82 <_strtod_l+0x98a>
 800ad42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad46:	e7a0      	b.n	800ac8a <_strtod_l+0x992>
 800ad48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800add0 <_strtod_l+0xad8>
 800ad4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad50:	ec57 6b17 	vmov	r6, r7, d7
 800ad54:	e799      	b.n	800ac8a <_strtod_l+0x992>
 800ad56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ad5a:	9b08      	ldr	r3, [sp, #32]
 800ad5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1c1      	bne.n	800ace8 <_strtod_l+0x9f0>
 800ad64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad68:	0d1b      	lsrs	r3, r3, #20
 800ad6a:	051b      	lsls	r3, r3, #20
 800ad6c:	429d      	cmp	r5, r3
 800ad6e:	d1bb      	bne.n	800ace8 <_strtod_l+0x9f0>
 800ad70:	4630      	mov	r0, r6
 800ad72:	4639      	mov	r1, r7
 800ad74:	f7f5 ffc0 	bl	8000cf8 <__aeabi_d2lz>
 800ad78:	f7f5 fc30 	bl	80005dc <__aeabi_l2d>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4630      	mov	r0, r6
 800ad82:	4639      	mov	r1, r7
 800ad84:	f7f5 faa0 	bl	80002c8 <__aeabi_dsub>
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ad90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ad94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad96:	ea46 060a 	orr.w	r6, r6, sl
 800ad9a:	431e      	orrs	r6, r3
 800ad9c:	d06f      	beq.n	800ae7e <_strtod_l+0xb86>
 800ad9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800add8 <_strtod_l+0xae0>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 feba 	bl	8000b1c <__aeabi_dcmplt>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	f47f accf 	bne.w	800a74c <_strtod_l+0x454>
 800adae:	a30c      	add	r3, pc, #48	@ (adr r3, 800ade0 <_strtod_l+0xae8>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adb8:	f7f5 fece 	bl	8000b58 <__aeabi_dcmpgt>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d093      	beq.n	800ace8 <_strtod_l+0x9f0>
 800adc0:	e4c4      	b.n	800a74c <_strtod_l+0x454>
 800adc2:	bf00      	nop
 800adc4:	f3af 8000 	nop.w
 800adc8:	00000000 	.word	0x00000000
 800adcc:	bff00000 	.word	0xbff00000
 800add0:	00000000 	.word	0x00000000
 800add4:	3ff00000 	.word	0x3ff00000
 800add8:	94a03595 	.word	0x94a03595
 800addc:	3fdfffff 	.word	0x3fdfffff
 800ade0:	35afe535 	.word	0x35afe535
 800ade4:	3fe00000 	.word	0x3fe00000
 800ade8:	000fffff 	.word	0x000fffff
 800adec:	7ff00000 	.word	0x7ff00000
 800adf0:	7fefffff 	.word	0x7fefffff
 800adf4:	3ff00000 	.word	0x3ff00000
 800adf8:	3fe00000 	.word	0x3fe00000
 800adfc:	7fe00000 	.word	0x7fe00000
 800ae00:	7c9fffff 	.word	0x7c9fffff
 800ae04:	9b08      	ldr	r3, [sp, #32]
 800ae06:	b323      	cbz	r3, 800ae52 <_strtod_l+0xb5a>
 800ae08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ae0c:	d821      	bhi.n	800ae52 <_strtod_l+0xb5a>
 800ae0e:	a328      	add	r3, pc, #160	@ (adr r3, 800aeb0 <_strtod_l+0xbb8>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	4630      	mov	r0, r6
 800ae16:	4639      	mov	r1, r7
 800ae18:	f7f5 fe8a 	bl	8000b30 <__aeabi_dcmple>
 800ae1c:	b1a0      	cbz	r0, 800ae48 <_strtod_l+0xb50>
 800ae1e:	4639      	mov	r1, r7
 800ae20:	4630      	mov	r0, r6
 800ae22:	f7f5 fee1 	bl	8000be8 <__aeabi_d2uiz>
 800ae26:	2801      	cmp	r0, #1
 800ae28:	bf38      	it	cc
 800ae2a:	2001      	movcc	r0, #1
 800ae2c:	f7f5 fb8a 	bl	8000544 <__aeabi_ui2d>
 800ae30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae32:	4606      	mov	r6, r0
 800ae34:	460f      	mov	r7, r1
 800ae36:	b9fb      	cbnz	r3, 800ae78 <_strtod_l+0xb80>
 800ae38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae3c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ae3e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ae44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ae4e:	1b5b      	subs	r3, r3, r5
 800ae50:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ae56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ae5a:	f002 fca5 	bl	800d7a8 <__ulp>
 800ae5e:	4650      	mov	r0, sl
 800ae60:	ec53 2b10 	vmov	r2, r3, d0
 800ae64:	4659      	mov	r1, fp
 800ae66:	f7f5 fbe7 	bl	8000638 <__aeabi_dmul>
 800ae6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ae6e:	f7f5 fa2d 	bl	80002cc <__adddf3>
 800ae72:	4682      	mov	sl, r0
 800ae74:	468b      	mov	fp, r1
 800ae76:	e770      	b.n	800ad5a <_strtod_l+0xa62>
 800ae78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ae7c:	e7e0      	b.n	800ae40 <_strtod_l+0xb48>
 800ae7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800aeb8 <_strtod_l+0xbc0>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f7f5 fe4a 	bl	8000b1c <__aeabi_dcmplt>
 800ae88:	e798      	b.n	800adbc <_strtod_l+0xac4>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ae90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae92:	6013      	str	r3, [r2, #0]
 800ae94:	f7ff ba6d 	b.w	800a372 <_strtod_l+0x7a>
 800ae98:	2a65      	cmp	r2, #101	@ 0x65
 800ae9a:	f43f ab66 	beq.w	800a56a <_strtod_l+0x272>
 800ae9e:	2a45      	cmp	r2, #69	@ 0x45
 800aea0:	f43f ab63 	beq.w	800a56a <_strtod_l+0x272>
 800aea4:	2301      	movs	r3, #1
 800aea6:	f7ff bb9e 	b.w	800a5e6 <_strtod_l+0x2ee>
 800aeaa:	bf00      	nop
 800aeac:	f3af 8000 	nop.w
 800aeb0:	ffc00000 	.word	0xffc00000
 800aeb4:	41dfffff 	.word	0x41dfffff
 800aeb8:	94a03595 	.word	0x94a03595
 800aebc:	3fcfffff 	.word	0x3fcfffff

0800aec0 <strtod>:
 800aec0:	460a      	mov	r2, r1
 800aec2:	4601      	mov	r1, r0
 800aec4:	4802      	ldr	r0, [pc, #8]	@ (800aed0 <strtod+0x10>)
 800aec6:	4b03      	ldr	r3, [pc, #12]	@ (800aed4 <strtod+0x14>)
 800aec8:	6800      	ldr	r0, [r0, #0]
 800aeca:	f7ff ba15 	b.w	800a2f8 <_strtod_l>
 800aece:	bf00      	nop
 800aed0:	200001e4 	.word	0x200001e4
 800aed4:	20000078 	.word	0x20000078

0800aed8 <__cvt>:
 800aed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	ec57 6b10 	vmov	r6, r7, d0
 800aee0:	2f00      	cmp	r7, #0
 800aee2:	460c      	mov	r4, r1
 800aee4:	4619      	mov	r1, r3
 800aee6:	463b      	mov	r3, r7
 800aee8:	bfbb      	ittet	lt
 800aeea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aeee:	461f      	movlt	r7, r3
 800aef0:	2300      	movge	r3, #0
 800aef2:	232d      	movlt	r3, #45	@ 0x2d
 800aef4:	700b      	strb	r3, [r1, #0]
 800aef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aef8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aefc:	4691      	mov	r9, r2
 800aefe:	f023 0820 	bic.w	r8, r3, #32
 800af02:	bfbc      	itt	lt
 800af04:	4632      	movlt	r2, r6
 800af06:	4616      	movlt	r6, r2
 800af08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af0c:	d005      	beq.n	800af1a <__cvt+0x42>
 800af0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800af12:	d100      	bne.n	800af16 <__cvt+0x3e>
 800af14:	3401      	adds	r4, #1
 800af16:	2102      	movs	r1, #2
 800af18:	e000      	b.n	800af1c <__cvt+0x44>
 800af1a:	2103      	movs	r1, #3
 800af1c:	ab03      	add	r3, sp, #12
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	ab02      	add	r3, sp, #8
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	ec47 6b10 	vmov	d0, r6, r7
 800af28:	4653      	mov	r3, sl
 800af2a:	4622      	mov	r2, r4
 800af2c:	f000 feb8 	bl	800bca0 <_dtoa_r>
 800af30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800af34:	4605      	mov	r5, r0
 800af36:	d119      	bne.n	800af6c <__cvt+0x94>
 800af38:	f019 0f01 	tst.w	r9, #1
 800af3c:	d00e      	beq.n	800af5c <__cvt+0x84>
 800af3e:	eb00 0904 	add.w	r9, r0, r4
 800af42:	2200      	movs	r2, #0
 800af44:	2300      	movs	r3, #0
 800af46:	4630      	mov	r0, r6
 800af48:	4639      	mov	r1, r7
 800af4a:	f7f5 fddd 	bl	8000b08 <__aeabi_dcmpeq>
 800af4e:	b108      	cbz	r0, 800af54 <__cvt+0x7c>
 800af50:	f8cd 900c 	str.w	r9, [sp, #12]
 800af54:	2230      	movs	r2, #48	@ 0x30
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	454b      	cmp	r3, r9
 800af5a:	d31e      	bcc.n	800af9a <__cvt+0xc2>
 800af5c:	9b03      	ldr	r3, [sp, #12]
 800af5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af60:	1b5b      	subs	r3, r3, r5
 800af62:	4628      	mov	r0, r5
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	b004      	add	sp, #16
 800af68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af70:	eb00 0904 	add.w	r9, r0, r4
 800af74:	d1e5      	bne.n	800af42 <__cvt+0x6a>
 800af76:	7803      	ldrb	r3, [r0, #0]
 800af78:	2b30      	cmp	r3, #48	@ 0x30
 800af7a:	d10a      	bne.n	800af92 <__cvt+0xba>
 800af7c:	2200      	movs	r2, #0
 800af7e:	2300      	movs	r3, #0
 800af80:	4630      	mov	r0, r6
 800af82:	4639      	mov	r1, r7
 800af84:	f7f5 fdc0 	bl	8000b08 <__aeabi_dcmpeq>
 800af88:	b918      	cbnz	r0, 800af92 <__cvt+0xba>
 800af8a:	f1c4 0401 	rsb	r4, r4, #1
 800af8e:	f8ca 4000 	str.w	r4, [sl]
 800af92:	f8da 3000 	ldr.w	r3, [sl]
 800af96:	4499      	add	r9, r3
 800af98:	e7d3      	b.n	800af42 <__cvt+0x6a>
 800af9a:	1c59      	adds	r1, r3, #1
 800af9c:	9103      	str	r1, [sp, #12]
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	e7d9      	b.n	800af56 <__cvt+0x7e>

0800afa2 <__exponent>:
 800afa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afa4:	2900      	cmp	r1, #0
 800afa6:	bfba      	itte	lt
 800afa8:	4249      	neglt	r1, r1
 800afaa:	232d      	movlt	r3, #45	@ 0x2d
 800afac:	232b      	movge	r3, #43	@ 0x2b
 800afae:	2909      	cmp	r1, #9
 800afb0:	7002      	strb	r2, [r0, #0]
 800afb2:	7043      	strb	r3, [r0, #1]
 800afb4:	dd29      	ble.n	800b00a <__exponent+0x68>
 800afb6:	f10d 0307 	add.w	r3, sp, #7
 800afba:	461d      	mov	r5, r3
 800afbc:	270a      	movs	r7, #10
 800afbe:	461a      	mov	r2, r3
 800afc0:	fbb1 f6f7 	udiv	r6, r1, r7
 800afc4:	fb07 1416 	mls	r4, r7, r6, r1
 800afc8:	3430      	adds	r4, #48	@ 0x30
 800afca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800afce:	460c      	mov	r4, r1
 800afd0:	2c63      	cmp	r4, #99	@ 0x63
 800afd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800afd6:	4631      	mov	r1, r6
 800afd8:	dcf1      	bgt.n	800afbe <__exponent+0x1c>
 800afda:	3130      	adds	r1, #48	@ 0x30
 800afdc:	1e94      	subs	r4, r2, #2
 800afde:	f803 1c01 	strb.w	r1, [r3, #-1]
 800afe2:	1c41      	adds	r1, r0, #1
 800afe4:	4623      	mov	r3, r4
 800afe6:	42ab      	cmp	r3, r5
 800afe8:	d30a      	bcc.n	800b000 <__exponent+0x5e>
 800afea:	f10d 0309 	add.w	r3, sp, #9
 800afee:	1a9b      	subs	r3, r3, r2
 800aff0:	42ac      	cmp	r4, r5
 800aff2:	bf88      	it	hi
 800aff4:	2300      	movhi	r3, #0
 800aff6:	3302      	adds	r3, #2
 800aff8:	4403      	add	r3, r0
 800affa:	1a18      	subs	r0, r3, r0
 800affc:	b003      	add	sp, #12
 800affe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b000:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b004:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b008:	e7ed      	b.n	800afe6 <__exponent+0x44>
 800b00a:	2330      	movs	r3, #48	@ 0x30
 800b00c:	3130      	adds	r1, #48	@ 0x30
 800b00e:	7083      	strb	r3, [r0, #2]
 800b010:	70c1      	strb	r1, [r0, #3]
 800b012:	1d03      	adds	r3, r0, #4
 800b014:	e7f1      	b.n	800affa <__exponent+0x58>
	...

0800b018 <_printf_float>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	b08d      	sub	sp, #52	@ 0x34
 800b01e:	460c      	mov	r4, r1
 800b020:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b024:	4616      	mov	r6, r2
 800b026:	461f      	mov	r7, r3
 800b028:	4605      	mov	r5, r0
 800b02a:	f000 fd21 	bl	800ba70 <_localeconv_r>
 800b02e:	6803      	ldr	r3, [r0, #0]
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	4618      	mov	r0, r3
 800b034:	f7f5 f93c 	bl	80002b0 <strlen>
 800b038:	2300      	movs	r3, #0
 800b03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b03c:	f8d8 3000 	ldr.w	r3, [r8]
 800b040:	9005      	str	r0, [sp, #20]
 800b042:	3307      	adds	r3, #7
 800b044:	f023 0307 	bic.w	r3, r3, #7
 800b048:	f103 0208 	add.w	r2, r3, #8
 800b04c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b050:	f8d4 b000 	ldr.w	fp, [r4]
 800b054:	f8c8 2000 	str.w	r2, [r8]
 800b058:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b05c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b060:	9307      	str	r3, [sp, #28]
 800b062:	f8cd 8018 	str.w	r8, [sp, #24]
 800b066:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b06a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b06e:	4b9c      	ldr	r3, [pc, #624]	@ (800b2e0 <_printf_float+0x2c8>)
 800b070:	f04f 32ff 	mov.w	r2, #4294967295
 800b074:	f7f5 fd7a 	bl	8000b6c <__aeabi_dcmpun>
 800b078:	bb70      	cbnz	r0, 800b0d8 <_printf_float+0xc0>
 800b07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b07e:	4b98      	ldr	r3, [pc, #608]	@ (800b2e0 <_printf_float+0x2c8>)
 800b080:	f04f 32ff 	mov.w	r2, #4294967295
 800b084:	f7f5 fd54 	bl	8000b30 <__aeabi_dcmple>
 800b088:	bb30      	cbnz	r0, 800b0d8 <_printf_float+0xc0>
 800b08a:	2200      	movs	r2, #0
 800b08c:	2300      	movs	r3, #0
 800b08e:	4640      	mov	r0, r8
 800b090:	4649      	mov	r1, r9
 800b092:	f7f5 fd43 	bl	8000b1c <__aeabi_dcmplt>
 800b096:	b110      	cbz	r0, 800b09e <_printf_float+0x86>
 800b098:	232d      	movs	r3, #45	@ 0x2d
 800b09a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b09e:	4a91      	ldr	r2, [pc, #580]	@ (800b2e4 <_printf_float+0x2cc>)
 800b0a0:	4b91      	ldr	r3, [pc, #580]	@ (800b2e8 <_printf_float+0x2d0>)
 800b0a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b0a6:	bf94      	ite	ls
 800b0a8:	4690      	movls	r8, r2
 800b0aa:	4698      	movhi	r8, r3
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	6123      	str	r3, [r4, #16]
 800b0b0:	f02b 0304 	bic.w	r3, fp, #4
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	f04f 0900 	mov.w	r9, #0
 800b0ba:	9700      	str	r7, [sp, #0]
 800b0bc:	4633      	mov	r3, r6
 800b0be:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f000 f9d2 	bl	800b46c <_printf_common>
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	f040 808d 	bne.w	800b1e8 <_printf_float+0x1d0>
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d2:	b00d      	add	sp, #52	@ 0x34
 800b0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d8:	4642      	mov	r2, r8
 800b0da:	464b      	mov	r3, r9
 800b0dc:	4640      	mov	r0, r8
 800b0de:	4649      	mov	r1, r9
 800b0e0:	f7f5 fd44 	bl	8000b6c <__aeabi_dcmpun>
 800b0e4:	b140      	cbz	r0, 800b0f8 <_printf_float+0xe0>
 800b0e6:	464b      	mov	r3, r9
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	bfbc      	itt	lt
 800b0ec:	232d      	movlt	r3, #45	@ 0x2d
 800b0ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b0f2:	4a7e      	ldr	r2, [pc, #504]	@ (800b2ec <_printf_float+0x2d4>)
 800b0f4:	4b7e      	ldr	r3, [pc, #504]	@ (800b2f0 <_printf_float+0x2d8>)
 800b0f6:	e7d4      	b.n	800b0a2 <_printf_float+0x8a>
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b0fe:	9206      	str	r2, [sp, #24]
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	d13b      	bne.n	800b17c <_printf_float+0x164>
 800b104:	2306      	movs	r3, #6
 800b106:	6063      	str	r3, [r4, #4]
 800b108:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b10c:	2300      	movs	r3, #0
 800b10e:	6022      	str	r2, [r4, #0]
 800b110:	9303      	str	r3, [sp, #12]
 800b112:	ab0a      	add	r3, sp, #40	@ 0x28
 800b114:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b118:	ab09      	add	r3, sp, #36	@ 0x24
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	6861      	ldr	r1, [r4, #4]
 800b11e:	ec49 8b10 	vmov	d0, r8, r9
 800b122:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b126:	4628      	mov	r0, r5
 800b128:	f7ff fed6 	bl	800aed8 <__cvt>
 800b12c:	9b06      	ldr	r3, [sp, #24]
 800b12e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b130:	2b47      	cmp	r3, #71	@ 0x47
 800b132:	4680      	mov	r8, r0
 800b134:	d129      	bne.n	800b18a <_printf_float+0x172>
 800b136:	1cc8      	adds	r0, r1, #3
 800b138:	db02      	blt.n	800b140 <_printf_float+0x128>
 800b13a:	6863      	ldr	r3, [r4, #4]
 800b13c:	4299      	cmp	r1, r3
 800b13e:	dd41      	ble.n	800b1c4 <_printf_float+0x1ac>
 800b140:	f1aa 0a02 	sub.w	sl, sl, #2
 800b144:	fa5f fa8a 	uxtb.w	sl, sl
 800b148:	3901      	subs	r1, #1
 800b14a:	4652      	mov	r2, sl
 800b14c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b150:	9109      	str	r1, [sp, #36]	@ 0x24
 800b152:	f7ff ff26 	bl	800afa2 <__exponent>
 800b156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b158:	1813      	adds	r3, r2, r0
 800b15a:	2a01      	cmp	r2, #1
 800b15c:	4681      	mov	r9, r0
 800b15e:	6123      	str	r3, [r4, #16]
 800b160:	dc02      	bgt.n	800b168 <_printf_float+0x150>
 800b162:	6822      	ldr	r2, [r4, #0]
 800b164:	07d2      	lsls	r2, r2, #31
 800b166:	d501      	bpl.n	800b16c <_printf_float+0x154>
 800b168:	3301      	adds	r3, #1
 800b16a:	6123      	str	r3, [r4, #16]
 800b16c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0a2      	beq.n	800b0ba <_printf_float+0xa2>
 800b174:	232d      	movs	r3, #45	@ 0x2d
 800b176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b17a:	e79e      	b.n	800b0ba <_printf_float+0xa2>
 800b17c:	9a06      	ldr	r2, [sp, #24]
 800b17e:	2a47      	cmp	r2, #71	@ 0x47
 800b180:	d1c2      	bne.n	800b108 <_printf_float+0xf0>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1c0      	bne.n	800b108 <_printf_float+0xf0>
 800b186:	2301      	movs	r3, #1
 800b188:	e7bd      	b.n	800b106 <_printf_float+0xee>
 800b18a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b18e:	d9db      	bls.n	800b148 <_printf_float+0x130>
 800b190:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b194:	d118      	bne.n	800b1c8 <_printf_float+0x1b0>
 800b196:	2900      	cmp	r1, #0
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	dd0b      	ble.n	800b1b4 <_printf_float+0x19c>
 800b19c:	6121      	str	r1, [r4, #16]
 800b19e:	b913      	cbnz	r3, 800b1a6 <_printf_float+0x18e>
 800b1a0:	6822      	ldr	r2, [r4, #0]
 800b1a2:	07d0      	lsls	r0, r2, #31
 800b1a4:	d502      	bpl.n	800b1ac <_printf_float+0x194>
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	440b      	add	r3, r1
 800b1aa:	6123      	str	r3, [r4, #16]
 800b1ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b1ae:	f04f 0900 	mov.w	r9, #0
 800b1b2:	e7db      	b.n	800b16c <_printf_float+0x154>
 800b1b4:	b913      	cbnz	r3, 800b1bc <_printf_float+0x1a4>
 800b1b6:	6822      	ldr	r2, [r4, #0]
 800b1b8:	07d2      	lsls	r2, r2, #31
 800b1ba:	d501      	bpl.n	800b1c0 <_printf_float+0x1a8>
 800b1bc:	3302      	adds	r3, #2
 800b1be:	e7f4      	b.n	800b1aa <_printf_float+0x192>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e7f2      	b.n	800b1aa <_printf_float+0x192>
 800b1c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ca:	4299      	cmp	r1, r3
 800b1cc:	db05      	blt.n	800b1da <_printf_float+0x1c2>
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	6121      	str	r1, [r4, #16]
 800b1d2:	07d8      	lsls	r0, r3, #31
 800b1d4:	d5ea      	bpl.n	800b1ac <_printf_float+0x194>
 800b1d6:	1c4b      	adds	r3, r1, #1
 800b1d8:	e7e7      	b.n	800b1aa <_printf_float+0x192>
 800b1da:	2900      	cmp	r1, #0
 800b1dc:	bfd4      	ite	le
 800b1de:	f1c1 0202 	rsble	r2, r1, #2
 800b1e2:	2201      	movgt	r2, #1
 800b1e4:	4413      	add	r3, r2
 800b1e6:	e7e0      	b.n	800b1aa <_printf_float+0x192>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	055a      	lsls	r2, r3, #21
 800b1ec:	d407      	bmi.n	800b1fe <_printf_float+0x1e6>
 800b1ee:	6923      	ldr	r3, [r4, #16]
 800b1f0:	4642      	mov	r2, r8
 800b1f2:	4631      	mov	r1, r6
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	47b8      	blx	r7
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	d12b      	bne.n	800b254 <_printf_float+0x23c>
 800b1fc:	e767      	b.n	800b0ce <_printf_float+0xb6>
 800b1fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b202:	f240 80dd 	bls.w	800b3c0 <_printf_float+0x3a8>
 800b206:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b20a:	2200      	movs	r2, #0
 800b20c:	2300      	movs	r3, #0
 800b20e:	f7f5 fc7b 	bl	8000b08 <__aeabi_dcmpeq>
 800b212:	2800      	cmp	r0, #0
 800b214:	d033      	beq.n	800b27e <_printf_float+0x266>
 800b216:	4a37      	ldr	r2, [pc, #220]	@ (800b2f4 <_printf_float+0x2dc>)
 800b218:	2301      	movs	r3, #1
 800b21a:	4631      	mov	r1, r6
 800b21c:	4628      	mov	r0, r5
 800b21e:	47b8      	blx	r7
 800b220:	3001      	adds	r0, #1
 800b222:	f43f af54 	beq.w	800b0ce <_printf_float+0xb6>
 800b226:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b22a:	4543      	cmp	r3, r8
 800b22c:	db02      	blt.n	800b234 <_printf_float+0x21c>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	07d8      	lsls	r0, r3, #31
 800b232:	d50f      	bpl.n	800b254 <_printf_float+0x23c>
 800b234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b238:	4631      	mov	r1, r6
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b8      	blx	r7
 800b23e:	3001      	adds	r0, #1
 800b240:	f43f af45 	beq.w	800b0ce <_printf_float+0xb6>
 800b244:	f04f 0900 	mov.w	r9, #0
 800b248:	f108 38ff 	add.w	r8, r8, #4294967295
 800b24c:	f104 0a1a 	add.w	sl, r4, #26
 800b250:	45c8      	cmp	r8, r9
 800b252:	dc09      	bgt.n	800b268 <_printf_float+0x250>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	079b      	lsls	r3, r3, #30
 800b258:	f100 8103 	bmi.w	800b462 <_printf_float+0x44a>
 800b25c:	68e0      	ldr	r0, [r4, #12]
 800b25e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b260:	4298      	cmp	r0, r3
 800b262:	bfb8      	it	lt
 800b264:	4618      	movlt	r0, r3
 800b266:	e734      	b.n	800b0d2 <_printf_float+0xba>
 800b268:	2301      	movs	r3, #1
 800b26a:	4652      	mov	r2, sl
 800b26c:	4631      	mov	r1, r6
 800b26e:	4628      	mov	r0, r5
 800b270:	47b8      	blx	r7
 800b272:	3001      	adds	r0, #1
 800b274:	f43f af2b 	beq.w	800b0ce <_printf_float+0xb6>
 800b278:	f109 0901 	add.w	r9, r9, #1
 800b27c:	e7e8      	b.n	800b250 <_printf_float+0x238>
 800b27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b280:	2b00      	cmp	r3, #0
 800b282:	dc39      	bgt.n	800b2f8 <_printf_float+0x2e0>
 800b284:	4a1b      	ldr	r2, [pc, #108]	@ (800b2f4 <_printf_float+0x2dc>)
 800b286:	2301      	movs	r3, #1
 800b288:	4631      	mov	r1, r6
 800b28a:	4628      	mov	r0, r5
 800b28c:	47b8      	blx	r7
 800b28e:	3001      	adds	r0, #1
 800b290:	f43f af1d 	beq.w	800b0ce <_printf_float+0xb6>
 800b294:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b298:	ea59 0303 	orrs.w	r3, r9, r3
 800b29c:	d102      	bne.n	800b2a4 <_printf_float+0x28c>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	07d9      	lsls	r1, r3, #31
 800b2a2:	d5d7      	bpl.n	800b254 <_printf_float+0x23c>
 800b2a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2a8:	4631      	mov	r1, r6
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	47b8      	blx	r7
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	f43f af0d 	beq.w	800b0ce <_printf_float+0xb6>
 800b2b4:	f04f 0a00 	mov.w	sl, #0
 800b2b8:	f104 0b1a 	add.w	fp, r4, #26
 800b2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2be:	425b      	negs	r3, r3
 800b2c0:	4553      	cmp	r3, sl
 800b2c2:	dc01      	bgt.n	800b2c8 <_printf_float+0x2b0>
 800b2c4:	464b      	mov	r3, r9
 800b2c6:	e793      	b.n	800b1f0 <_printf_float+0x1d8>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	465a      	mov	r2, fp
 800b2cc:	4631      	mov	r1, r6
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	47b8      	blx	r7
 800b2d2:	3001      	adds	r0, #1
 800b2d4:	f43f aefb 	beq.w	800b0ce <_printf_float+0xb6>
 800b2d8:	f10a 0a01 	add.w	sl, sl, #1
 800b2dc:	e7ee      	b.n	800b2bc <_printf_float+0x2a4>
 800b2de:	bf00      	nop
 800b2e0:	7fefffff 	.word	0x7fefffff
 800b2e4:	0800e751 	.word	0x0800e751
 800b2e8:	0800e755 	.word	0x0800e755
 800b2ec:	0800e759 	.word	0x0800e759
 800b2f0:	0800e75d 	.word	0x0800e75d
 800b2f4:	0800e761 	.word	0x0800e761
 800b2f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b2fe:	4553      	cmp	r3, sl
 800b300:	bfa8      	it	ge
 800b302:	4653      	movge	r3, sl
 800b304:	2b00      	cmp	r3, #0
 800b306:	4699      	mov	r9, r3
 800b308:	dc36      	bgt.n	800b378 <_printf_float+0x360>
 800b30a:	f04f 0b00 	mov.w	fp, #0
 800b30e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b312:	f104 021a 	add.w	r2, r4, #26
 800b316:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b318:	9306      	str	r3, [sp, #24]
 800b31a:	eba3 0309 	sub.w	r3, r3, r9
 800b31e:	455b      	cmp	r3, fp
 800b320:	dc31      	bgt.n	800b386 <_printf_float+0x36e>
 800b322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b324:	459a      	cmp	sl, r3
 800b326:	dc3a      	bgt.n	800b39e <_printf_float+0x386>
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	07da      	lsls	r2, r3, #31
 800b32c:	d437      	bmi.n	800b39e <_printf_float+0x386>
 800b32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b330:	ebaa 0903 	sub.w	r9, sl, r3
 800b334:	9b06      	ldr	r3, [sp, #24]
 800b336:	ebaa 0303 	sub.w	r3, sl, r3
 800b33a:	4599      	cmp	r9, r3
 800b33c:	bfa8      	it	ge
 800b33e:	4699      	movge	r9, r3
 800b340:	f1b9 0f00 	cmp.w	r9, #0
 800b344:	dc33      	bgt.n	800b3ae <_printf_float+0x396>
 800b346:	f04f 0800 	mov.w	r8, #0
 800b34a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b34e:	f104 0b1a 	add.w	fp, r4, #26
 800b352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b354:	ebaa 0303 	sub.w	r3, sl, r3
 800b358:	eba3 0309 	sub.w	r3, r3, r9
 800b35c:	4543      	cmp	r3, r8
 800b35e:	f77f af79 	ble.w	800b254 <_printf_float+0x23c>
 800b362:	2301      	movs	r3, #1
 800b364:	465a      	mov	r2, fp
 800b366:	4631      	mov	r1, r6
 800b368:	4628      	mov	r0, r5
 800b36a:	47b8      	blx	r7
 800b36c:	3001      	adds	r0, #1
 800b36e:	f43f aeae 	beq.w	800b0ce <_printf_float+0xb6>
 800b372:	f108 0801 	add.w	r8, r8, #1
 800b376:	e7ec      	b.n	800b352 <_printf_float+0x33a>
 800b378:	4642      	mov	r2, r8
 800b37a:	4631      	mov	r1, r6
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b8      	blx	r7
 800b380:	3001      	adds	r0, #1
 800b382:	d1c2      	bne.n	800b30a <_printf_float+0x2f2>
 800b384:	e6a3      	b.n	800b0ce <_printf_float+0xb6>
 800b386:	2301      	movs	r3, #1
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	9206      	str	r2, [sp, #24]
 800b38e:	47b8      	blx	r7
 800b390:	3001      	adds	r0, #1
 800b392:	f43f ae9c 	beq.w	800b0ce <_printf_float+0xb6>
 800b396:	9a06      	ldr	r2, [sp, #24]
 800b398:	f10b 0b01 	add.w	fp, fp, #1
 800b39c:	e7bb      	b.n	800b316 <_printf_float+0x2fe>
 800b39e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	47b8      	blx	r7
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	d1c0      	bne.n	800b32e <_printf_float+0x316>
 800b3ac:	e68f      	b.n	800b0ce <_printf_float+0xb6>
 800b3ae:	9a06      	ldr	r2, [sp, #24]
 800b3b0:	464b      	mov	r3, r9
 800b3b2:	4442      	add	r2, r8
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	d1c3      	bne.n	800b346 <_printf_float+0x32e>
 800b3be:	e686      	b.n	800b0ce <_printf_float+0xb6>
 800b3c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b3c4:	f1ba 0f01 	cmp.w	sl, #1
 800b3c8:	dc01      	bgt.n	800b3ce <_printf_float+0x3b6>
 800b3ca:	07db      	lsls	r3, r3, #31
 800b3cc:	d536      	bpl.n	800b43c <_printf_float+0x424>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	4642      	mov	r2, r8
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	47b8      	blx	r7
 800b3d8:	3001      	adds	r0, #1
 800b3da:	f43f ae78 	beq.w	800b0ce <_printf_float+0xb6>
 800b3de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	47b8      	blx	r7
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	f43f ae70 	beq.w	800b0ce <_printf_float+0xb6>
 800b3ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3fa:	f7f5 fb85 	bl	8000b08 <__aeabi_dcmpeq>
 800b3fe:	b9c0      	cbnz	r0, 800b432 <_printf_float+0x41a>
 800b400:	4653      	mov	r3, sl
 800b402:	f108 0201 	add.w	r2, r8, #1
 800b406:	4631      	mov	r1, r6
 800b408:	4628      	mov	r0, r5
 800b40a:	47b8      	blx	r7
 800b40c:	3001      	adds	r0, #1
 800b40e:	d10c      	bne.n	800b42a <_printf_float+0x412>
 800b410:	e65d      	b.n	800b0ce <_printf_float+0xb6>
 800b412:	2301      	movs	r3, #1
 800b414:	465a      	mov	r2, fp
 800b416:	4631      	mov	r1, r6
 800b418:	4628      	mov	r0, r5
 800b41a:	47b8      	blx	r7
 800b41c:	3001      	adds	r0, #1
 800b41e:	f43f ae56 	beq.w	800b0ce <_printf_float+0xb6>
 800b422:	f108 0801 	add.w	r8, r8, #1
 800b426:	45d0      	cmp	r8, sl
 800b428:	dbf3      	blt.n	800b412 <_printf_float+0x3fa>
 800b42a:	464b      	mov	r3, r9
 800b42c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b430:	e6df      	b.n	800b1f2 <_printf_float+0x1da>
 800b432:	f04f 0800 	mov.w	r8, #0
 800b436:	f104 0b1a 	add.w	fp, r4, #26
 800b43a:	e7f4      	b.n	800b426 <_printf_float+0x40e>
 800b43c:	2301      	movs	r3, #1
 800b43e:	4642      	mov	r2, r8
 800b440:	e7e1      	b.n	800b406 <_printf_float+0x3ee>
 800b442:	2301      	movs	r3, #1
 800b444:	464a      	mov	r2, r9
 800b446:	4631      	mov	r1, r6
 800b448:	4628      	mov	r0, r5
 800b44a:	47b8      	blx	r7
 800b44c:	3001      	adds	r0, #1
 800b44e:	f43f ae3e 	beq.w	800b0ce <_printf_float+0xb6>
 800b452:	f108 0801 	add.w	r8, r8, #1
 800b456:	68e3      	ldr	r3, [r4, #12]
 800b458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b45a:	1a5b      	subs	r3, r3, r1
 800b45c:	4543      	cmp	r3, r8
 800b45e:	dcf0      	bgt.n	800b442 <_printf_float+0x42a>
 800b460:	e6fc      	b.n	800b25c <_printf_float+0x244>
 800b462:	f04f 0800 	mov.w	r8, #0
 800b466:	f104 0919 	add.w	r9, r4, #25
 800b46a:	e7f4      	b.n	800b456 <_printf_float+0x43e>

0800b46c <_printf_common>:
 800b46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	4616      	mov	r6, r2
 800b472:	4698      	mov	r8, r3
 800b474:	688a      	ldr	r2, [r1, #8]
 800b476:	690b      	ldr	r3, [r1, #16]
 800b478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b47c:	4293      	cmp	r3, r2
 800b47e:	bfb8      	it	lt
 800b480:	4613      	movlt	r3, r2
 800b482:	6033      	str	r3, [r6, #0]
 800b484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b488:	4607      	mov	r7, r0
 800b48a:	460c      	mov	r4, r1
 800b48c:	b10a      	cbz	r2, 800b492 <_printf_common+0x26>
 800b48e:	3301      	adds	r3, #1
 800b490:	6033      	str	r3, [r6, #0]
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	0699      	lsls	r1, r3, #26
 800b496:	bf42      	ittt	mi
 800b498:	6833      	ldrmi	r3, [r6, #0]
 800b49a:	3302      	addmi	r3, #2
 800b49c:	6033      	strmi	r3, [r6, #0]
 800b49e:	6825      	ldr	r5, [r4, #0]
 800b4a0:	f015 0506 	ands.w	r5, r5, #6
 800b4a4:	d106      	bne.n	800b4b4 <_printf_common+0x48>
 800b4a6:	f104 0a19 	add.w	sl, r4, #25
 800b4aa:	68e3      	ldr	r3, [r4, #12]
 800b4ac:	6832      	ldr	r2, [r6, #0]
 800b4ae:	1a9b      	subs	r3, r3, r2
 800b4b0:	42ab      	cmp	r3, r5
 800b4b2:	dc26      	bgt.n	800b502 <_printf_common+0x96>
 800b4b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4b8:	6822      	ldr	r2, [r4, #0]
 800b4ba:	3b00      	subs	r3, #0
 800b4bc:	bf18      	it	ne
 800b4be:	2301      	movne	r3, #1
 800b4c0:	0692      	lsls	r2, r2, #26
 800b4c2:	d42b      	bmi.n	800b51c <_printf_common+0xb0>
 800b4c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4c8:	4641      	mov	r1, r8
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	47c8      	blx	r9
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	d01e      	beq.n	800b510 <_printf_common+0xa4>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	6922      	ldr	r2, [r4, #16]
 800b4d6:	f003 0306 	and.w	r3, r3, #6
 800b4da:	2b04      	cmp	r3, #4
 800b4dc:	bf02      	ittt	eq
 800b4de:	68e5      	ldreq	r5, [r4, #12]
 800b4e0:	6833      	ldreq	r3, [r6, #0]
 800b4e2:	1aed      	subeq	r5, r5, r3
 800b4e4:	68a3      	ldr	r3, [r4, #8]
 800b4e6:	bf0c      	ite	eq
 800b4e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4ec:	2500      	movne	r5, #0
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	bfc4      	itt	gt
 800b4f2:	1a9b      	subgt	r3, r3, r2
 800b4f4:	18ed      	addgt	r5, r5, r3
 800b4f6:	2600      	movs	r6, #0
 800b4f8:	341a      	adds	r4, #26
 800b4fa:	42b5      	cmp	r5, r6
 800b4fc:	d11a      	bne.n	800b534 <_printf_common+0xc8>
 800b4fe:	2000      	movs	r0, #0
 800b500:	e008      	b.n	800b514 <_printf_common+0xa8>
 800b502:	2301      	movs	r3, #1
 800b504:	4652      	mov	r2, sl
 800b506:	4641      	mov	r1, r8
 800b508:	4638      	mov	r0, r7
 800b50a:	47c8      	blx	r9
 800b50c:	3001      	adds	r0, #1
 800b50e:	d103      	bne.n	800b518 <_printf_common+0xac>
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b518:	3501      	adds	r5, #1
 800b51a:	e7c6      	b.n	800b4aa <_printf_common+0x3e>
 800b51c:	18e1      	adds	r1, r4, r3
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	2030      	movs	r0, #48	@ 0x30
 800b522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b526:	4422      	add	r2, r4
 800b528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b52c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b530:	3302      	adds	r3, #2
 800b532:	e7c7      	b.n	800b4c4 <_printf_common+0x58>
 800b534:	2301      	movs	r3, #1
 800b536:	4622      	mov	r2, r4
 800b538:	4641      	mov	r1, r8
 800b53a:	4638      	mov	r0, r7
 800b53c:	47c8      	blx	r9
 800b53e:	3001      	adds	r0, #1
 800b540:	d0e6      	beq.n	800b510 <_printf_common+0xa4>
 800b542:	3601      	adds	r6, #1
 800b544:	e7d9      	b.n	800b4fa <_printf_common+0x8e>
	...

0800b548 <_printf_i>:
 800b548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b54c:	7e0f      	ldrb	r7, [r1, #24]
 800b54e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b550:	2f78      	cmp	r7, #120	@ 0x78
 800b552:	4691      	mov	r9, r2
 800b554:	4680      	mov	r8, r0
 800b556:	460c      	mov	r4, r1
 800b558:	469a      	mov	sl, r3
 800b55a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b55e:	d807      	bhi.n	800b570 <_printf_i+0x28>
 800b560:	2f62      	cmp	r7, #98	@ 0x62
 800b562:	d80a      	bhi.n	800b57a <_printf_i+0x32>
 800b564:	2f00      	cmp	r7, #0
 800b566:	f000 80d2 	beq.w	800b70e <_printf_i+0x1c6>
 800b56a:	2f58      	cmp	r7, #88	@ 0x58
 800b56c:	f000 80b9 	beq.w	800b6e2 <_printf_i+0x19a>
 800b570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b578:	e03a      	b.n	800b5f0 <_printf_i+0xa8>
 800b57a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b57e:	2b15      	cmp	r3, #21
 800b580:	d8f6      	bhi.n	800b570 <_printf_i+0x28>
 800b582:	a101      	add	r1, pc, #4	@ (adr r1, 800b588 <_printf_i+0x40>)
 800b584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b588:	0800b5e1 	.word	0x0800b5e1
 800b58c:	0800b5f5 	.word	0x0800b5f5
 800b590:	0800b571 	.word	0x0800b571
 800b594:	0800b571 	.word	0x0800b571
 800b598:	0800b571 	.word	0x0800b571
 800b59c:	0800b571 	.word	0x0800b571
 800b5a0:	0800b5f5 	.word	0x0800b5f5
 800b5a4:	0800b571 	.word	0x0800b571
 800b5a8:	0800b571 	.word	0x0800b571
 800b5ac:	0800b571 	.word	0x0800b571
 800b5b0:	0800b571 	.word	0x0800b571
 800b5b4:	0800b6f5 	.word	0x0800b6f5
 800b5b8:	0800b61f 	.word	0x0800b61f
 800b5bc:	0800b6af 	.word	0x0800b6af
 800b5c0:	0800b571 	.word	0x0800b571
 800b5c4:	0800b571 	.word	0x0800b571
 800b5c8:	0800b717 	.word	0x0800b717
 800b5cc:	0800b571 	.word	0x0800b571
 800b5d0:	0800b61f 	.word	0x0800b61f
 800b5d4:	0800b571 	.word	0x0800b571
 800b5d8:	0800b571 	.word	0x0800b571
 800b5dc:	0800b6b7 	.word	0x0800b6b7
 800b5e0:	6833      	ldr	r3, [r6, #0]
 800b5e2:	1d1a      	adds	r2, r3, #4
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6032      	str	r2, [r6, #0]
 800b5e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e09d      	b.n	800b730 <_printf_i+0x1e8>
 800b5f4:	6833      	ldr	r3, [r6, #0]
 800b5f6:	6820      	ldr	r0, [r4, #0]
 800b5f8:	1d19      	adds	r1, r3, #4
 800b5fa:	6031      	str	r1, [r6, #0]
 800b5fc:	0606      	lsls	r6, r0, #24
 800b5fe:	d501      	bpl.n	800b604 <_printf_i+0xbc>
 800b600:	681d      	ldr	r5, [r3, #0]
 800b602:	e003      	b.n	800b60c <_printf_i+0xc4>
 800b604:	0645      	lsls	r5, r0, #25
 800b606:	d5fb      	bpl.n	800b600 <_printf_i+0xb8>
 800b608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b60c:	2d00      	cmp	r5, #0
 800b60e:	da03      	bge.n	800b618 <_printf_i+0xd0>
 800b610:	232d      	movs	r3, #45	@ 0x2d
 800b612:	426d      	negs	r5, r5
 800b614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b618:	4859      	ldr	r0, [pc, #356]	@ (800b780 <_printf_i+0x238>)
 800b61a:	230a      	movs	r3, #10
 800b61c:	e011      	b.n	800b642 <_printf_i+0xfa>
 800b61e:	6821      	ldr	r1, [r4, #0]
 800b620:	6833      	ldr	r3, [r6, #0]
 800b622:	0608      	lsls	r0, r1, #24
 800b624:	f853 5b04 	ldr.w	r5, [r3], #4
 800b628:	d402      	bmi.n	800b630 <_printf_i+0xe8>
 800b62a:	0649      	lsls	r1, r1, #25
 800b62c:	bf48      	it	mi
 800b62e:	b2ad      	uxthmi	r5, r5
 800b630:	2f6f      	cmp	r7, #111	@ 0x6f
 800b632:	4853      	ldr	r0, [pc, #332]	@ (800b780 <_printf_i+0x238>)
 800b634:	6033      	str	r3, [r6, #0]
 800b636:	bf14      	ite	ne
 800b638:	230a      	movne	r3, #10
 800b63a:	2308      	moveq	r3, #8
 800b63c:	2100      	movs	r1, #0
 800b63e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b642:	6866      	ldr	r6, [r4, #4]
 800b644:	60a6      	str	r6, [r4, #8]
 800b646:	2e00      	cmp	r6, #0
 800b648:	bfa2      	ittt	ge
 800b64a:	6821      	ldrge	r1, [r4, #0]
 800b64c:	f021 0104 	bicge.w	r1, r1, #4
 800b650:	6021      	strge	r1, [r4, #0]
 800b652:	b90d      	cbnz	r5, 800b658 <_printf_i+0x110>
 800b654:	2e00      	cmp	r6, #0
 800b656:	d04b      	beq.n	800b6f0 <_printf_i+0x1a8>
 800b658:	4616      	mov	r6, r2
 800b65a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b65e:	fb03 5711 	mls	r7, r3, r1, r5
 800b662:	5dc7      	ldrb	r7, [r0, r7]
 800b664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b668:	462f      	mov	r7, r5
 800b66a:	42bb      	cmp	r3, r7
 800b66c:	460d      	mov	r5, r1
 800b66e:	d9f4      	bls.n	800b65a <_printf_i+0x112>
 800b670:	2b08      	cmp	r3, #8
 800b672:	d10b      	bne.n	800b68c <_printf_i+0x144>
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	07df      	lsls	r7, r3, #31
 800b678:	d508      	bpl.n	800b68c <_printf_i+0x144>
 800b67a:	6923      	ldr	r3, [r4, #16]
 800b67c:	6861      	ldr	r1, [r4, #4]
 800b67e:	4299      	cmp	r1, r3
 800b680:	bfde      	ittt	le
 800b682:	2330      	movle	r3, #48	@ 0x30
 800b684:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b688:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b68c:	1b92      	subs	r2, r2, r6
 800b68e:	6122      	str	r2, [r4, #16]
 800b690:	f8cd a000 	str.w	sl, [sp]
 800b694:	464b      	mov	r3, r9
 800b696:	aa03      	add	r2, sp, #12
 800b698:	4621      	mov	r1, r4
 800b69a:	4640      	mov	r0, r8
 800b69c:	f7ff fee6 	bl	800b46c <_printf_common>
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	d14a      	bne.n	800b73a <_printf_i+0x1f2>
 800b6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a8:	b004      	add	sp, #16
 800b6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	f043 0320 	orr.w	r3, r3, #32
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	4833      	ldr	r0, [pc, #204]	@ (800b784 <_printf_i+0x23c>)
 800b6b8:	2778      	movs	r7, #120	@ 0x78
 800b6ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	6831      	ldr	r1, [r6, #0]
 800b6c2:	061f      	lsls	r7, r3, #24
 800b6c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6c8:	d402      	bmi.n	800b6d0 <_printf_i+0x188>
 800b6ca:	065f      	lsls	r7, r3, #25
 800b6cc:	bf48      	it	mi
 800b6ce:	b2ad      	uxthmi	r5, r5
 800b6d0:	6031      	str	r1, [r6, #0]
 800b6d2:	07d9      	lsls	r1, r3, #31
 800b6d4:	bf44      	itt	mi
 800b6d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6da:	6023      	strmi	r3, [r4, #0]
 800b6dc:	b11d      	cbz	r5, 800b6e6 <_printf_i+0x19e>
 800b6de:	2310      	movs	r3, #16
 800b6e0:	e7ac      	b.n	800b63c <_printf_i+0xf4>
 800b6e2:	4827      	ldr	r0, [pc, #156]	@ (800b780 <_printf_i+0x238>)
 800b6e4:	e7e9      	b.n	800b6ba <_printf_i+0x172>
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	f023 0320 	bic.w	r3, r3, #32
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	e7f6      	b.n	800b6de <_printf_i+0x196>
 800b6f0:	4616      	mov	r6, r2
 800b6f2:	e7bd      	b.n	800b670 <_printf_i+0x128>
 800b6f4:	6833      	ldr	r3, [r6, #0]
 800b6f6:	6825      	ldr	r5, [r4, #0]
 800b6f8:	6961      	ldr	r1, [r4, #20]
 800b6fa:	1d18      	adds	r0, r3, #4
 800b6fc:	6030      	str	r0, [r6, #0]
 800b6fe:	062e      	lsls	r6, r5, #24
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	d501      	bpl.n	800b708 <_printf_i+0x1c0>
 800b704:	6019      	str	r1, [r3, #0]
 800b706:	e002      	b.n	800b70e <_printf_i+0x1c6>
 800b708:	0668      	lsls	r0, r5, #25
 800b70a:	d5fb      	bpl.n	800b704 <_printf_i+0x1bc>
 800b70c:	8019      	strh	r1, [r3, #0]
 800b70e:	2300      	movs	r3, #0
 800b710:	6123      	str	r3, [r4, #16]
 800b712:	4616      	mov	r6, r2
 800b714:	e7bc      	b.n	800b690 <_printf_i+0x148>
 800b716:	6833      	ldr	r3, [r6, #0]
 800b718:	1d1a      	adds	r2, r3, #4
 800b71a:	6032      	str	r2, [r6, #0]
 800b71c:	681e      	ldr	r6, [r3, #0]
 800b71e:	6862      	ldr	r2, [r4, #4]
 800b720:	2100      	movs	r1, #0
 800b722:	4630      	mov	r0, r6
 800b724:	f7f4 fd74 	bl	8000210 <memchr>
 800b728:	b108      	cbz	r0, 800b72e <_printf_i+0x1e6>
 800b72a:	1b80      	subs	r0, r0, r6
 800b72c:	6060      	str	r0, [r4, #4]
 800b72e:	6863      	ldr	r3, [r4, #4]
 800b730:	6123      	str	r3, [r4, #16]
 800b732:	2300      	movs	r3, #0
 800b734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b738:	e7aa      	b.n	800b690 <_printf_i+0x148>
 800b73a:	6923      	ldr	r3, [r4, #16]
 800b73c:	4632      	mov	r2, r6
 800b73e:	4649      	mov	r1, r9
 800b740:	4640      	mov	r0, r8
 800b742:	47d0      	blx	sl
 800b744:	3001      	adds	r0, #1
 800b746:	d0ad      	beq.n	800b6a4 <_printf_i+0x15c>
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	079b      	lsls	r3, r3, #30
 800b74c:	d413      	bmi.n	800b776 <_printf_i+0x22e>
 800b74e:	68e0      	ldr	r0, [r4, #12]
 800b750:	9b03      	ldr	r3, [sp, #12]
 800b752:	4298      	cmp	r0, r3
 800b754:	bfb8      	it	lt
 800b756:	4618      	movlt	r0, r3
 800b758:	e7a6      	b.n	800b6a8 <_printf_i+0x160>
 800b75a:	2301      	movs	r3, #1
 800b75c:	4632      	mov	r2, r6
 800b75e:	4649      	mov	r1, r9
 800b760:	4640      	mov	r0, r8
 800b762:	47d0      	blx	sl
 800b764:	3001      	adds	r0, #1
 800b766:	d09d      	beq.n	800b6a4 <_printf_i+0x15c>
 800b768:	3501      	adds	r5, #1
 800b76a:	68e3      	ldr	r3, [r4, #12]
 800b76c:	9903      	ldr	r1, [sp, #12]
 800b76e:	1a5b      	subs	r3, r3, r1
 800b770:	42ab      	cmp	r3, r5
 800b772:	dcf2      	bgt.n	800b75a <_printf_i+0x212>
 800b774:	e7eb      	b.n	800b74e <_printf_i+0x206>
 800b776:	2500      	movs	r5, #0
 800b778:	f104 0619 	add.w	r6, r4, #25
 800b77c:	e7f5      	b.n	800b76a <_printf_i+0x222>
 800b77e:	bf00      	nop
 800b780:	0800e763 	.word	0x0800e763
 800b784:	0800e774 	.word	0x0800e774

0800b788 <std>:
 800b788:	2300      	movs	r3, #0
 800b78a:	b510      	push	{r4, lr}
 800b78c:	4604      	mov	r4, r0
 800b78e:	e9c0 3300 	strd	r3, r3, [r0]
 800b792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b796:	6083      	str	r3, [r0, #8]
 800b798:	8181      	strh	r1, [r0, #12]
 800b79a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b79c:	81c2      	strh	r2, [r0, #14]
 800b79e:	6183      	str	r3, [r0, #24]
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	2208      	movs	r2, #8
 800b7a4:	305c      	adds	r0, #92	@ 0x5c
 800b7a6:	f000 f948 	bl	800ba3a <memset>
 800b7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e0 <std+0x58>)
 800b7ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e4 <std+0x5c>)
 800b7b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e8 <std+0x60>)
 800b7b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ec <std+0x64>)
 800b7b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f0 <std+0x68>)
 800b7bc:	6224      	str	r4, [r4, #32]
 800b7be:	429c      	cmp	r4, r3
 800b7c0:	d006      	beq.n	800b7d0 <std+0x48>
 800b7c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7c6:	4294      	cmp	r4, r2
 800b7c8:	d002      	beq.n	800b7d0 <std+0x48>
 800b7ca:	33d0      	adds	r3, #208	@ 0xd0
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	d105      	bne.n	800b7dc <std+0x54>
 800b7d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7d8:	f000 b9be 	b.w	800bb58 <__retarget_lock_init_recursive>
 800b7dc:	bd10      	pop	{r4, pc}
 800b7de:	bf00      	nop
 800b7e0:	0800b9b5 	.word	0x0800b9b5
 800b7e4:	0800b9d7 	.word	0x0800b9d7
 800b7e8:	0800ba0f 	.word	0x0800ba0f
 800b7ec:	0800ba33 	.word	0x0800ba33
 800b7f0:	20000a64 	.word	0x20000a64

0800b7f4 <stdio_exit_handler>:
 800b7f4:	4a02      	ldr	r2, [pc, #8]	@ (800b800 <stdio_exit_handler+0xc>)
 800b7f6:	4903      	ldr	r1, [pc, #12]	@ (800b804 <stdio_exit_handler+0x10>)
 800b7f8:	4803      	ldr	r0, [pc, #12]	@ (800b808 <stdio_exit_handler+0x14>)
 800b7fa:	f000 b869 	b.w	800b8d0 <_fwalk_sglue>
 800b7fe:	bf00      	nop
 800b800:	2000006c 	.word	0x2000006c
 800b804:	0800ddf5 	.word	0x0800ddf5
 800b808:	200001e8 	.word	0x200001e8

0800b80c <cleanup_stdio>:
 800b80c:	6841      	ldr	r1, [r0, #4]
 800b80e:	4b0c      	ldr	r3, [pc, #48]	@ (800b840 <cleanup_stdio+0x34>)
 800b810:	4299      	cmp	r1, r3
 800b812:	b510      	push	{r4, lr}
 800b814:	4604      	mov	r4, r0
 800b816:	d001      	beq.n	800b81c <cleanup_stdio+0x10>
 800b818:	f002 faec 	bl	800ddf4 <_fflush_r>
 800b81c:	68a1      	ldr	r1, [r4, #8]
 800b81e:	4b09      	ldr	r3, [pc, #36]	@ (800b844 <cleanup_stdio+0x38>)
 800b820:	4299      	cmp	r1, r3
 800b822:	d002      	beq.n	800b82a <cleanup_stdio+0x1e>
 800b824:	4620      	mov	r0, r4
 800b826:	f002 fae5 	bl	800ddf4 <_fflush_r>
 800b82a:	68e1      	ldr	r1, [r4, #12]
 800b82c:	4b06      	ldr	r3, [pc, #24]	@ (800b848 <cleanup_stdio+0x3c>)
 800b82e:	4299      	cmp	r1, r3
 800b830:	d004      	beq.n	800b83c <cleanup_stdio+0x30>
 800b832:	4620      	mov	r0, r4
 800b834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b838:	f002 badc 	b.w	800ddf4 <_fflush_r>
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	bf00      	nop
 800b840:	20000a64 	.word	0x20000a64
 800b844:	20000acc 	.word	0x20000acc
 800b848:	20000b34 	.word	0x20000b34

0800b84c <global_stdio_init.part.0>:
 800b84c:	b510      	push	{r4, lr}
 800b84e:	4b0b      	ldr	r3, [pc, #44]	@ (800b87c <global_stdio_init.part.0+0x30>)
 800b850:	4c0b      	ldr	r4, [pc, #44]	@ (800b880 <global_stdio_init.part.0+0x34>)
 800b852:	4a0c      	ldr	r2, [pc, #48]	@ (800b884 <global_stdio_init.part.0+0x38>)
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	4620      	mov	r0, r4
 800b858:	2200      	movs	r2, #0
 800b85a:	2104      	movs	r1, #4
 800b85c:	f7ff ff94 	bl	800b788 <std>
 800b860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b864:	2201      	movs	r2, #1
 800b866:	2109      	movs	r1, #9
 800b868:	f7ff ff8e 	bl	800b788 <std>
 800b86c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b870:	2202      	movs	r2, #2
 800b872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b876:	2112      	movs	r1, #18
 800b878:	f7ff bf86 	b.w	800b788 <std>
 800b87c:	20000b9c 	.word	0x20000b9c
 800b880:	20000a64 	.word	0x20000a64
 800b884:	0800b7f5 	.word	0x0800b7f5

0800b888 <__sfp_lock_acquire>:
 800b888:	4801      	ldr	r0, [pc, #4]	@ (800b890 <__sfp_lock_acquire+0x8>)
 800b88a:	f000 b966 	b.w	800bb5a <__retarget_lock_acquire_recursive>
 800b88e:	bf00      	nop
 800b890:	20000ba5 	.word	0x20000ba5

0800b894 <__sfp_lock_release>:
 800b894:	4801      	ldr	r0, [pc, #4]	@ (800b89c <__sfp_lock_release+0x8>)
 800b896:	f000 b961 	b.w	800bb5c <__retarget_lock_release_recursive>
 800b89a:	bf00      	nop
 800b89c:	20000ba5 	.word	0x20000ba5

0800b8a0 <__sinit>:
 800b8a0:	b510      	push	{r4, lr}
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	f7ff fff0 	bl	800b888 <__sfp_lock_acquire>
 800b8a8:	6a23      	ldr	r3, [r4, #32]
 800b8aa:	b11b      	cbz	r3, 800b8b4 <__sinit+0x14>
 800b8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8b0:	f7ff bff0 	b.w	800b894 <__sfp_lock_release>
 800b8b4:	4b04      	ldr	r3, [pc, #16]	@ (800b8c8 <__sinit+0x28>)
 800b8b6:	6223      	str	r3, [r4, #32]
 800b8b8:	4b04      	ldr	r3, [pc, #16]	@ (800b8cc <__sinit+0x2c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1f5      	bne.n	800b8ac <__sinit+0xc>
 800b8c0:	f7ff ffc4 	bl	800b84c <global_stdio_init.part.0>
 800b8c4:	e7f2      	b.n	800b8ac <__sinit+0xc>
 800b8c6:	bf00      	nop
 800b8c8:	0800b80d 	.word	0x0800b80d
 800b8cc:	20000b9c 	.word	0x20000b9c

0800b8d0 <_fwalk_sglue>:
 800b8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	4688      	mov	r8, r1
 800b8d8:	4614      	mov	r4, r2
 800b8da:	2600      	movs	r6, #0
 800b8dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b8e4:	d505      	bpl.n	800b8f2 <_fwalk_sglue+0x22>
 800b8e6:	6824      	ldr	r4, [r4, #0]
 800b8e8:	2c00      	cmp	r4, #0
 800b8ea:	d1f7      	bne.n	800b8dc <_fwalk_sglue+0xc>
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8f2:	89ab      	ldrh	r3, [r5, #12]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d907      	bls.n	800b908 <_fwalk_sglue+0x38>
 800b8f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	d003      	beq.n	800b908 <_fwalk_sglue+0x38>
 800b900:	4629      	mov	r1, r5
 800b902:	4638      	mov	r0, r7
 800b904:	47c0      	blx	r8
 800b906:	4306      	orrs	r6, r0
 800b908:	3568      	adds	r5, #104	@ 0x68
 800b90a:	e7e9      	b.n	800b8e0 <_fwalk_sglue+0x10>

0800b90c <sniprintf>:
 800b90c:	b40c      	push	{r2, r3}
 800b90e:	b530      	push	{r4, r5, lr}
 800b910:	4b17      	ldr	r3, [pc, #92]	@ (800b970 <sniprintf+0x64>)
 800b912:	1e0c      	subs	r4, r1, #0
 800b914:	681d      	ldr	r5, [r3, #0]
 800b916:	b09d      	sub	sp, #116	@ 0x74
 800b918:	da08      	bge.n	800b92c <sniprintf+0x20>
 800b91a:	238b      	movs	r3, #139	@ 0x8b
 800b91c:	602b      	str	r3, [r5, #0]
 800b91e:	f04f 30ff 	mov.w	r0, #4294967295
 800b922:	b01d      	add	sp, #116	@ 0x74
 800b924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b928:	b002      	add	sp, #8
 800b92a:	4770      	bx	lr
 800b92c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b930:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b934:	bf14      	ite	ne
 800b936:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b93a:	4623      	moveq	r3, r4
 800b93c:	9304      	str	r3, [sp, #16]
 800b93e:	9307      	str	r3, [sp, #28]
 800b940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b944:	9002      	str	r0, [sp, #8]
 800b946:	9006      	str	r0, [sp, #24]
 800b948:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b94c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b94e:	ab21      	add	r3, sp, #132	@ 0x84
 800b950:	a902      	add	r1, sp, #8
 800b952:	4628      	mov	r0, r5
 800b954:	9301      	str	r3, [sp, #4]
 800b956:	f002 f8cd 	bl	800daf4 <_svfiprintf_r>
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	bfbc      	itt	lt
 800b95e:	238b      	movlt	r3, #139	@ 0x8b
 800b960:	602b      	strlt	r3, [r5, #0]
 800b962:	2c00      	cmp	r4, #0
 800b964:	d0dd      	beq.n	800b922 <sniprintf+0x16>
 800b966:	9b02      	ldr	r3, [sp, #8]
 800b968:	2200      	movs	r2, #0
 800b96a:	701a      	strb	r2, [r3, #0]
 800b96c:	e7d9      	b.n	800b922 <sniprintf+0x16>
 800b96e:	bf00      	nop
 800b970:	200001e4 	.word	0x200001e4

0800b974 <siprintf>:
 800b974:	b40e      	push	{r1, r2, r3}
 800b976:	b500      	push	{lr}
 800b978:	b09c      	sub	sp, #112	@ 0x70
 800b97a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b97c:	9002      	str	r0, [sp, #8]
 800b97e:	9006      	str	r0, [sp, #24]
 800b980:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b984:	4809      	ldr	r0, [pc, #36]	@ (800b9ac <siprintf+0x38>)
 800b986:	9107      	str	r1, [sp, #28]
 800b988:	9104      	str	r1, [sp, #16]
 800b98a:	4909      	ldr	r1, [pc, #36]	@ (800b9b0 <siprintf+0x3c>)
 800b98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b990:	9105      	str	r1, [sp, #20]
 800b992:	6800      	ldr	r0, [r0, #0]
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	a902      	add	r1, sp, #8
 800b998:	f002 f8ac 	bl	800daf4 <_svfiprintf_r>
 800b99c:	9b02      	ldr	r3, [sp, #8]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	701a      	strb	r2, [r3, #0]
 800b9a2:	b01c      	add	sp, #112	@ 0x70
 800b9a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9a8:	b003      	add	sp, #12
 800b9aa:	4770      	bx	lr
 800b9ac:	200001e4 	.word	0x200001e4
 800b9b0:	ffff0208 	.word	0xffff0208

0800b9b4 <__sread>:
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	460c      	mov	r4, r1
 800b9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9bc:	f000 f87e 	bl	800babc <_read_r>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	bfab      	itete	ge
 800b9c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b9c8:	181b      	addge	r3, r3, r0
 800b9ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9ce:	bfac      	ite	ge
 800b9d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9d2:	81a3      	strhlt	r3, [r4, #12]
 800b9d4:	bd10      	pop	{r4, pc}

0800b9d6 <__swrite>:
 800b9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9da:	461f      	mov	r7, r3
 800b9dc:	898b      	ldrh	r3, [r1, #12]
 800b9de:	05db      	lsls	r3, r3, #23
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	4616      	mov	r6, r2
 800b9e6:	d505      	bpl.n	800b9f4 <__swrite+0x1e>
 800b9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f000 f852 	bl	800ba98 <_lseek_r>
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9fe:	81a3      	strh	r3, [r4, #12]
 800ba00:	4632      	mov	r2, r6
 800ba02:	463b      	mov	r3, r7
 800ba04:	4628      	mov	r0, r5
 800ba06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0a:	f000 b869 	b.w	800bae0 <_write_r>

0800ba0e <__sseek>:
 800ba0e:	b510      	push	{r4, lr}
 800ba10:	460c      	mov	r4, r1
 800ba12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba16:	f000 f83f 	bl	800ba98 <_lseek_r>
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	bf15      	itete	ne
 800ba20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba2a:	81a3      	strheq	r3, [r4, #12]
 800ba2c:	bf18      	it	ne
 800ba2e:	81a3      	strhne	r3, [r4, #12]
 800ba30:	bd10      	pop	{r4, pc}

0800ba32 <__sclose>:
 800ba32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba36:	f000 b81f 	b.w	800ba78 <_close_r>

0800ba3a <memset>:
 800ba3a:	4402      	add	r2, r0
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d100      	bne.n	800ba44 <memset+0xa>
 800ba42:	4770      	bx	lr
 800ba44:	f803 1b01 	strb.w	r1, [r3], #1
 800ba48:	e7f9      	b.n	800ba3e <memset+0x4>

0800ba4a <strncmp>:
 800ba4a:	b510      	push	{r4, lr}
 800ba4c:	b16a      	cbz	r2, 800ba6a <strncmp+0x20>
 800ba4e:	3901      	subs	r1, #1
 800ba50:	1884      	adds	r4, r0, r2
 800ba52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d103      	bne.n	800ba66 <strncmp+0x1c>
 800ba5e:	42a0      	cmp	r0, r4
 800ba60:	d001      	beq.n	800ba66 <strncmp+0x1c>
 800ba62:	2a00      	cmp	r2, #0
 800ba64:	d1f5      	bne.n	800ba52 <strncmp+0x8>
 800ba66:	1ad0      	subs	r0, r2, r3
 800ba68:	bd10      	pop	{r4, pc}
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	e7fc      	b.n	800ba68 <strncmp+0x1e>
	...

0800ba70 <_localeconv_r>:
 800ba70:	4800      	ldr	r0, [pc, #0]	@ (800ba74 <_localeconv_r+0x4>)
 800ba72:	4770      	bx	lr
 800ba74:	20000168 	.word	0x20000168

0800ba78 <_close_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d06      	ldr	r5, [pc, #24]	@ (800ba94 <_close_r+0x1c>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	602b      	str	r3, [r5, #0]
 800ba84:	f7f7 fc36 	bl	80032f4 <_close>
 800ba88:	1c43      	adds	r3, r0, #1
 800ba8a:	d102      	bne.n	800ba92 <_close_r+0x1a>
 800ba8c:	682b      	ldr	r3, [r5, #0]
 800ba8e:	b103      	cbz	r3, 800ba92 <_close_r+0x1a>
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	bd38      	pop	{r3, r4, r5, pc}
 800ba94:	20000ba0 	.word	0x20000ba0

0800ba98 <_lseek_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d07      	ldr	r5, [pc, #28]	@ (800bab8 <_lseek_r+0x20>)
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	4608      	mov	r0, r1
 800baa0:	4611      	mov	r1, r2
 800baa2:	2200      	movs	r2, #0
 800baa4:	602a      	str	r2, [r5, #0]
 800baa6:	461a      	mov	r2, r3
 800baa8:	f7f7 fc4b 	bl	8003342 <_lseek>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	d102      	bne.n	800bab6 <_lseek_r+0x1e>
 800bab0:	682b      	ldr	r3, [r5, #0]
 800bab2:	b103      	cbz	r3, 800bab6 <_lseek_r+0x1e>
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	20000ba0 	.word	0x20000ba0

0800babc <_read_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d07      	ldr	r5, [pc, #28]	@ (800badc <_read_r+0x20>)
 800bac0:	4604      	mov	r4, r0
 800bac2:	4608      	mov	r0, r1
 800bac4:	4611      	mov	r1, r2
 800bac6:	2200      	movs	r2, #0
 800bac8:	602a      	str	r2, [r5, #0]
 800baca:	461a      	mov	r2, r3
 800bacc:	f7f7 fbd9 	bl	8003282 <_read>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_read_r+0x1e>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_read_r+0x1e>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	20000ba0 	.word	0x20000ba0

0800bae0 <_write_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4d07      	ldr	r5, [pc, #28]	@ (800bb00 <_write_r+0x20>)
 800bae4:	4604      	mov	r4, r0
 800bae6:	4608      	mov	r0, r1
 800bae8:	4611      	mov	r1, r2
 800baea:	2200      	movs	r2, #0
 800baec:	602a      	str	r2, [r5, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	f7f7 fbe4 	bl	80032bc <_write>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_write_r+0x1e>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_write_r+0x1e>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20000ba0 	.word	0x20000ba0

0800bb04 <__errno>:
 800bb04:	4b01      	ldr	r3, [pc, #4]	@ (800bb0c <__errno+0x8>)
 800bb06:	6818      	ldr	r0, [r3, #0]
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	200001e4 	.word	0x200001e4

0800bb10 <__libc_init_array>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	4d0d      	ldr	r5, [pc, #52]	@ (800bb48 <__libc_init_array+0x38>)
 800bb14:	4c0d      	ldr	r4, [pc, #52]	@ (800bb4c <__libc_init_array+0x3c>)
 800bb16:	1b64      	subs	r4, r4, r5
 800bb18:	10a4      	asrs	r4, r4, #2
 800bb1a:	2600      	movs	r6, #0
 800bb1c:	42a6      	cmp	r6, r4
 800bb1e:	d109      	bne.n	800bb34 <__libc_init_array+0x24>
 800bb20:	4d0b      	ldr	r5, [pc, #44]	@ (800bb50 <__libc_init_array+0x40>)
 800bb22:	4c0c      	ldr	r4, [pc, #48]	@ (800bb54 <__libc_init_array+0x44>)
 800bb24:	f002 fcd6 	bl	800e4d4 <_init>
 800bb28:	1b64      	subs	r4, r4, r5
 800bb2a:	10a4      	asrs	r4, r4, #2
 800bb2c:	2600      	movs	r6, #0
 800bb2e:	42a6      	cmp	r6, r4
 800bb30:	d105      	bne.n	800bb3e <__libc_init_array+0x2e>
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb38:	4798      	blx	r3
 800bb3a:	3601      	adds	r6, #1
 800bb3c:	e7ee      	b.n	800bb1c <__libc_init_array+0xc>
 800bb3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb42:	4798      	blx	r3
 800bb44:	3601      	adds	r6, #1
 800bb46:	e7f2      	b.n	800bb2e <__libc_init_array+0x1e>
 800bb48:	0800ea28 	.word	0x0800ea28
 800bb4c:	0800ea28 	.word	0x0800ea28
 800bb50:	0800ea28 	.word	0x0800ea28
 800bb54:	0800ea2c 	.word	0x0800ea2c

0800bb58 <__retarget_lock_init_recursive>:
 800bb58:	4770      	bx	lr

0800bb5a <__retarget_lock_acquire_recursive>:
 800bb5a:	4770      	bx	lr

0800bb5c <__retarget_lock_release_recursive>:
 800bb5c:	4770      	bx	lr

0800bb5e <memcpy>:
 800bb5e:	440a      	add	r2, r1
 800bb60:	4291      	cmp	r1, r2
 800bb62:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb66:	d100      	bne.n	800bb6a <memcpy+0xc>
 800bb68:	4770      	bx	lr
 800bb6a:	b510      	push	{r4, lr}
 800bb6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb74:	4291      	cmp	r1, r2
 800bb76:	d1f9      	bne.n	800bb6c <memcpy+0xe>
 800bb78:	bd10      	pop	{r4, pc}
 800bb7a:	0000      	movs	r0, r0
 800bb7c:	0000      	movs	r0, r0
	...

0800bb80 <nan>:
 800bb80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb88 <nan+0x8>
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	7ff80000 	.word	0x7ff80000

0800bb90 <quorem>:
 800bb90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	6903      	ldr	r3, [r0, #16]
 800bb96:	690c      	ldr	r4, [r1, #16]
 800bb98:	42a3      	cmp	r3, r4
 800bb9a:	4607      	mov	r7, r0
 800bb9c:	db7e      	blt.n	800bc9c <quorem+0x10c>
 800bb9e:	3c01      	subs	r4, #1
 800bba0:	f101 0814 	add.w	r8, r1, #20
 800bba4:	00a3      	lsls	r3, r4, #2
 800bba6:	f100 0514 	add.w	r5, r0, #20
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbc2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbc6:	d32e      	bcc.n	800bc26 <quorem+0x96>
 800bbc8:	f04f 0a00 	mov.w	sl, #0
 800bbcc:	46c4      	mov	ip, r8
 800bbce:	46ae      	mov	lr, r5
 800bbd0:	46d3      	mov	fp, sl
 800bbd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbd6:	b298      	uxth	r0, r3
 800bbd8:	fb06 a000 	mla	r0, r6, r0, sl
 800bbdc:	0c02      	lsrs	r2, r0, #16
 800bbde:	0c1b      	lsrs	r3, r3, #16
 800bbe0:	fb06 2303 	mla	r3, r6, r3, r2
 800bbe4:	f8de 2000 	ldr.w	r2, [lr]
 800bbe8:	b280      	uxth	r0, r0
 800bbea:	b292      	uxth	r2, r2
 800bbec:	1a12      	subs	r2, r2, r0
 800bbee:	445a      	add	r2, fp
 800bbf0:	f8de 0000 	ldr.w	r0, [lr]
 800bbf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bbfe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc02:	b292      	uxth	r2, r2
 800bc04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc08:	45e1      	cmp	r9, ip
 800bc0a:	f84e 2b04 	str.w	r2, [lr], #4
 800bc0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc12:	d2de      	bcs.n	800bbd2 <quorem+0x42>
 800bc14:	9b00      	ldr	r3, [sp, #0]
 800bc16:	58eb      	ldr	r3, [r5, r3]
 800bc18:	b92b      	cbnz	r3, 800bc26 <quorem+0x96>
 800bc1a:	9b01      	ldr	r3, [sp, #4]
 800bc1c:	3b04      	subs	r3, #4
 800bc1e:	429d      	cmp	r5, r3
 800bc20:	461a      	mov	r2, r3
 800bc22:	d32f      	bcc.n	800bc84 <quorem+0xf4>
 800bc24:	613c      	str	r4, [r7, #16]
 800bc26:	4638      	mov	r0, r7
 800bc28:	f001 fd0e 	bl	800d648 <__mcmp>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	db25      	blt.n	800bc7c <quorem+0xec>
 800bc30:	4629      	mov	r1, r5
 800bc32:	2000      	movs	r0, #0
 800bc34:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc38:	f8d1 c000 	ldr.w	ip, [r1]
 800bc3c:	fa1f fe82 	uxth.w	lr, r2
 800bc40:	fa1f f38c 	uxth.w	r3, ip
 800bc44:	eba3 030e 	sub.w	r3, r3, lr
 800bc48:	4403      	add	r3, r0
 800bc4a:	0c12      	lsrs	r2, r2, #16
 800bc4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc5a:	45c1      	cmp	r9, r8
 800bc5c:	f841 3b04 	str.w	r3, [r1], #4
 800bc60:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc64:	d2e6      	bcs.n	800bc34 <quorem+0xa4>
 800bc66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc6e:	b922      	cbnz	r2, 800bc7a <quorem+0xea>
 800bc70:	3b04      	subs	r3, #4
 800bc72:	429d      	cmp	r5, r3
 800bc74:	461a      	mov	r2, r3
 800bc76:	d30b      	bcc.n	800bc90 <quorem+0x100>
 800bc78:	613c      	str	r4, [r7, #16]
 800bc7a:	3601      	adds	r6, #1
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	b003      	add	sp, #12
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	6812      	ldr	r2, [r2, #0]
 800bc86:	3b04      	subs	r3, #4
 800bc88:	2a00      	cmp	r2, #0
 800bc8a:	d1cb      	bne.n	800bc24 <quorem+0x94>
 800bc8c:	3c01      	subs	r4, #1
 800bc8e:	e7c6      	b.n	800bc1e <quorem+0x8e>
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	3b04      	subs	r3, #4
 800bc94:	2a00      	cmp	r2, #0
 800bc96:	d1ef      	bne.n	800bc78 <quorem+0xe8>
 800bc98:	3c01      	subs	r4, #1
 800bc9a:	e7ea      	b.n	800bc72 <quorem+0xe2>
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e7ee      	b.n	800bc7e <quorem+0xee>

0800bca0 <_dtoa_r>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	69c7      	ldr	r7, [r0, #28]
 800bca6:	b099      	sub	sp, #100	@ 0x64
 800bca8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bcac:	ec55 4b10 	vmov	r4, r5, d0
 800bcb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bcb2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bcb4:	4683      	mov	fp, r0
 800bcb6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcba:	b97f      	cbnz	r7, 800bcdc <_dtoa_r+0x3c>
 800bcbc:	2010      	movs	r0, #16
 800bcbe:	f001 f937 	bl	800cf30 <malloc>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bcc8:	b920      	cbnz	r0, 800bcd4 <_dtoa_r+0x34>
 800bcca:	4ba7      	ldr	r3, [pc, #668]	@ (800bf68 <_dtoa_r+0x2c8>)
 800bccc:	21ef      	movs	r1, #239	@ 0xef
 800bcce:	48a7      	ldr	r0, [pc, #668]	@ (800bf6c <_dtoa_r+0x2cc>)
 800bcd0:	f002 f8e2 	bl	800de98 <__assert_func>
 800bcd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bcd8:	6007      	str	r7, [r0, #0]
 800bcda:	60c7      	str	r7, [r0, #12]
 800bcdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bce0:	6819      	ldr	r1, [r3, #0]
 800bce2:	b159      	cbz	r1, 800bcfc <_dtoa_r+0x5c>
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	604a      	str	r2, [r1, #4]
 800bce8:	2301      	movs	r3, #1
 800bcea:	4093      	lsls	r3, r2
 800bcec:	608b      	str	r3, [r1, #8]
 800bcee:	4658      	mov	r0, fp
 800bcf0:	f001 fa26 	bl	800d140 <_Bfree>
 800bcf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	1e2b      	subs	r3, r5, #0
 800bcfe:	bfb9      	ittee	lt
 800bd00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd04:	9303      	strlt	r3, [sp, #12]
 800bd06:	2300      	movge	r3, #0
 800bd08:	6033      	strge	r3, [r6, #0]
 800bd0a:	9f03      	ldr	r7, [sp, #12]
 800bd0c:	4b98      	ldr	r3, [pc, #608]	@ (800bf70 <_dtoa_r+0x2d0>)
 800bd0e:	bfbc      	itt	lt
 800bd10:	2201      	movlt	r2, #1
 800bd12:	6032      	strlt	r2, [r6, #0]
 800bd14:	43bb      	bics	r3, r7
 800bd16:	d112      	bne.n	800bd3e <_dtoa_r+0x9e>
 800bd18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd1e:	6013      	str	r3, [r2, #0]
 800bd20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd24:	4323      	orrs	r3, r4
 800bd26:	f000 854d 	beq.w	800c7c4 <_dtoa_r+0xb24>
 800bd2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bf84 <_dtoa_r+0x2e4>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 854f 	beq.w	800c7d4 <_dtoa_r+0xb34>
 800bd36:	f10a 0303 	add.w	r3, sl, #3
 800bd3a:	f000 bd49 	b.w	800c7d0 <_dtoa_r+0xb30>
 800bd3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd42:	2200      	movs	r2, #0
 800bd44:	ec51 0b17 	vmov	r0, r1, d7
 800bd48:	2300      	movs	r3, #0
 800bd4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bd4e:	f7f4 fedb 	bl	8000b08 <__aeabi_dcmpeq>
 800bd52:	4680      	mov	r8, r0
 800bd54:	b158      	cbz	r0, 800bd6e <_dtoa_r+0xce>
 800bd56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd58:	2301      	movs	r3, #1
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd5e:	b113      	cbz	r3, 800bd66 <_dtoa_r+0xc6>
 800bd60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd62:	4b84      	ldr	r3, [pc, #528]	@ (800bf74 <_dtoa_r+0x2d4>)
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bf88 <_dtoa_r+0x2e8>
 800bd6a:	f000 bd33 	b.w	800c7d4 <_dtoa_r+0xb34>
 800bd6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bd72:	aa16      	add	r2, sp, #88	@ 0x58
 800bd74:	a917      	add	r1, sp, #92	@ 0x5c
 800bd76:	4658      	mov	r0, fp
 800bd78:	f001 fd86 	bl	800d888 <__d2b>
 800bd7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bd80:	4681      	mov	r9, r0
 800bd82:	2e00      	cmp	r6, #0
 800bd84:	d077      	beq.n	800be76 <_dtoa_r+0x1d6>
 800bd86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bd8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bda0:	4619      	mov	r1, r3
 800bda2:	2200      	movs	r2, #0
 800bda4:	4b74      	ldr	r3, [pc, #464]	@ (800bf78 <_dtoa_r+0x2d8>)
 800bda6:	f7f4 fa8f 	bl	80002c8 <__aeabi_dsub>
 800bdaa:	a369      	add	r3, pc, #420	@ (adr r3, 800bf50 <_dtoa_r+0x2b0>)
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f7f4 fc42 	bl	8000638 <__aeabi_dmul>
 800bdb4:	a368      	add	r3, pc, #416	@ (adr r3, 800bf58 <_dtoa_r+0x2b8>)
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f7f4 fa87 	bl	80002cc <__adddf3>
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	f7f4 fbce 	bl	8000564 <__aeabi_i2d>
 800bdc8:	a365      	add	r3, pc, #404	@ (adr r3, 800bf60 <_dtoa_r+0x2c0>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fc33 	bl	8000638 <__aeabi_dmul>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	4629      	mov	r1, r5
 800bdda:	f7f4 fa77 	bl	80002cc <__adddf3>
 800bdde:	4604      	mov	r4, r0
 800bde0:	460d      	mov	r5, r1
 800bde2:	f7f4 fed9 	bl	8000b98 <__aeabi_d2iz>
 800bde6:	2200      	movs	r2, #0
 800bde8:	4607      	mov	r7, r0
 800bdea:	2300      	movs	r3, #0
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 fe94 	bl	8000b1c <__aeabi_dcmplt>
 800bdf4:	b140      	cbz	r0, 800be08 <_dtoa_r+0x168>
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	f7f4 fbb4 	bl	8000564 <__aeabi_i2d>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	462b      	mov	r3, r5
 800be00:	f7f4 fe82 	bl	8000b08 <__aeabi_dcmpeq>
 800be04:	b900      	cbnz	r0, 800be08 <_dtoa_r+0x168>
 800be06:	3f01      	subs	r7, #1
 800be08:	2f16      	cmp	r7, #22
 800be0a:	d851      	bhi.n	800beb0 <_dtoa_r+0x210>
 800be0c:	4b5b      	ldr	r3, [pc, #364]	@ (800bf7c <_dtoa_r+0x2dc>)
 800be0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be1a:	f7f4 fe7f 	bl	8000b1c <__aeabi_dcmplt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d048      	beq.n	800beb4 <_dtoa_r+0x214>
 800be22:	3f01      	subs	r7, #1
 800be24:	2300      	movs	r3, #0
 800be26:	9312      	str	r3, [sp, #72]	@ 0x48
 800be28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be2a:	1b9b      	subs	r3, r3, r6
 800be2c:	1e5a      	subs	r2, r3, #1
 800be2e:	bf44      	itt	mi
 800be30:	f1c3 0801 	rsbmi	r8, r3, #1
 800be34:	2300      	movmi	r3, #0
 800be36:	9208      	str	r2, [sp, #32]
 800be38:	bf54      	ite	pl
 800be3a:	f04f 0800 	movpl.w	r8, #0
 800be3e:	9308      	strmi	r3, [sp, #32]
 800be40:	2f00      	cmp	r7, #0
 800be42:	db39      	blt.n	800beb8 <_dtoa_r+0x218>
 800be44:	9b08      	ldr	r3, [sp, #32]
 800be46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800be48:	443b      	add	r3, r7
 800be4a:	9308      	str	r3, [sp, #32]
 800be4c:	2300      	movs	r3, #0
 800be4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be52:	2b09      	cmp	r3, #9
 800be54:	d864      	bhi.n	800bf20 <_dtoa_r+0x280>
 800be56:	2b05      	cmp	r3, #5
 800be58:	bfc4      	itt	gt
 800be5a:	3b04      	subgt	r3, #4
 800be5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800be5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be60:	f1a3 0302 	sub.w	r3, r3, #2
 800be64:	bfcc      	ite	gt
 800be66:	2400      	movgt	r4, #0
 800be68:	2401      	movle	r4, #1
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	d863      	bhi.n	800bf36 <_dtoa_r+0x296>
 800be6e:	e8df f003 	tbb	[pc, r3]
 800be72:	372a      	.short	0x372a
 800be74:	5535      	.short	0x5535
 800be76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800be7a:	441e      	add	r6, r3
 800be7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be80:	2b20      	cmp	r3, #32
 800be82:	bfc1      	itttt	gt
 800be84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be88:	409f      	lslgt	r7, r3
 800be8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be92:	bfd6      	itet	le
 800be94:	f1c3 0320 	rsble	r3, r3, #32
 800be98:	ea47 0003 	orrgt.w	r0, r7, r3
 800be9c:	fa04 f003 	lslle.w	r0, r4, r3
 800bea0:	f7f4 fb50 	bl	8000544 <__aeabi_ui2d>
 800bea4:	2201      	movs	r2, #1
 800bea6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800beaa:	3e01      	subs	r6, #1
 800beac:	9214      	str	r2, [sp, #80]	@ 0x50
 800beae:	e777      	b.n	800bda0 <_dtoa_r+0x100>
 800beb0:	2301      	movs	r3, #1
 800beb2:	e7b8      	b.n	800be26 <_dtoa_r+0x186>
 800beb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800beb6:	e7b7      	b.n	800be28 <_dtoa_r+0x188>
 800beb8:	427b      	negs	r3, r7
 800beba:	930a      	str	r3, [sp, #40]	@ 0x28
 800bebc:	2300      	movs	r3, #0
 800bebe:	eba8 0807 	sub.w	r8, r8, r7
 800bec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bec4:	e7c4      	b.n	800be50 <_dtoa_r+0x1b0>
 800bec6:	2300      	movs	r3, #0
 800bec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800becc:	2b00      	cmp	r3, #0
 800bece:	dc35      	bgt.n	800bf3c <_dtoa_r+0x29c>
 800bed0:	2301      	movs	r3, #1
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	9307      	str	r3, [sp, #28]
 800bed6:	461a      	mov	r2, r3
 800bed8:	920e      	str	r2, [sp, #56]	@ 0x38
 800beda:	e00b      	b.n	800bef4 <_dtoa_r+0x254>
 800bedc:	2301      	movs	r3, #1
 800bede:	e7f3      	b.n	800bec8 <_dtoa_r+0x228>
 800bee0:	2300      	movs	r3, #0
 800bee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee6:	18fb      	adds	r3, r7, r3
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	3301      	adds	r3, #1
 800beec:	2b01      	cmp	r3, #1
 800beee:	9307      	str	r3, [sp, #28]
 800bef0:	bfb8      	it	lt
 800bef2:	2301      	movlt	r3, #1
 800bef4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bef8:	2100      	movs	r1, #0
 800befa:	2204      	movs	r2, #4
 800befc:	f102 0514 	add.w	r5, r2, #20
 800bf00:	429d      	cmp	r5, r3
 800bf02:	d91f      	bls.n	800bf44 <_dtoa_r+0x2a4>
 800bf04:	6041      	str	r1, [r0, #4]
 800bf06:	4658      	mov	r0, fp
 800bf08:	f001 f8da 	bl	800d0c0 <_Balloc>
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d13c      	bne.n	800bf8c <_dtoa_r+0x2ec>
 800bf12:	4b1b      	ldr	r3, [pc, #108]	@ (800bf80 <_dtoa_r+0x2e0>)
 800bf14:	4602      	mov	r2, r0
 800bf16:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf1a:	e6d8      	b.n	800bcce <_dtoa_r+0x2e>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e7e0      	b.n	800bee2 <_dtoa_r+0x242>
 800bf20:	2401      	movs	r4, #1
 800bf22:	2300      	movs	r3, #0
 800bf24:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bf28:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	9307      	str	r3, [sp, #28]
 800bf30:	2200      	movs	r2, #0
 800bf32:	2312      	movs	r3, #18
 800bf34:	e7d0      	b.n	800bed8 <_dtoa_r+0x238>
 800bf36:	2301      	movs	r3, #1
 800bf38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf3a:	e7f5      	b.n	800bf28 <_dtoa_r+0x288>
 800bf3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	9307      	str	r3, [sp, #28]
 800bf42:	e7d7      	b.n	800bef4 <_dtoa_r+0x254>
 800bf44:	3101      	adds	r1, #1
 800bf46:	0052      	lsls	r2, r2, #1
 800bf48:	e7d8      	b.n	800befc <_dtoa_r+0x25c>
 800bf4a:	bf00      	nop
 800bf4c:	f3af 8000 	nop.w
 800bf50:	636f4361 	.word	0x636f4361
 800bf54:	3fd287a7 	.word	0x3fd287a7
 800bf58:	8b60c8b3 	.word	0x8b60c8b3
 800bf5c:	3fc68a28 	.word	0x3fc68a28
 800bf60:	509f79fb 	.word	0x509f79fb
 800bf64:	3fd34413 	.word	0x3fd34413
 800bf68:	0800e79a 	.word	0x0800e79a
 800bf6c:	0800e7b1 	.word	0x0800e7b1
 800bf70:	7ff00000 	.word	0x7ff00000
 800bf74:	0800e762 	.word	0x0800e762
 800bf78:	3ff80000 	.word	0x3ff80000
 800bf7c:	0800e908 	.word	0x0800e908
 800bf80:	0800e809 	.word	0x0800e809
 800bf84:	0800e796 	.word	0x0800e796
 800bf88:	0800e761 	.word	0x0800e761
 800bf8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf90:	6018      	str	r0, [r3, #0]
 800bf92:	9b07      	ldr	r3, [sp, #28]
 800bf94:	2b0e      	cmp	r3, #14
 800bf96:	f200 80a4 	bhi.w	800c0e2 <_dtoa_r+0x442>
 800bf9a:	2c00      	cmp	r4, #0
 800bf9c:	f000 80a1 	beq.w	800c0e2 <_dtoa_r+0x442>
 800bfa0:	2f00      	cmp	r7, #0
 800bfa2:	dd33      	ble.n	800c00c <_dtoa_r+0x36c>
 800bfa4:	4bad      	ldr	r3, [pc, #692]	@ (800c25c <_dtoa_r+0x5bc>)
 800bfa6:	f007 020f 	and.w	r2, r7, #15
 800bfaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfae:	ed93 7b00 	vldr	d7, [r3]
 800bfb2:	05f8      	lsls	r0, r7, #23
 800bfb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bfb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bfbc:	d516      	bpl.n	800bfec <_dtoa_r+0x34c>
 800bfbe:	4ba8      	ldr	r3, [pc, #672]	@ (800c260 <_dtoa_r+0x5c0>)
 800bfc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfc8:	f7f4 fc60 	bl	800088c <__aeabi_ddiv>
 800bfcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfd0:	f004 040f 	and.w	r4, r4, #15
 800bfd4:	2603      	movs	r6, #3
 800bfd6:	4da2      	ldr	r5, [pc, #648]	@ (800c260 <_dtoa_r+0x5c0>)
 800bfd8:	b954      	cbnz	r4, 800bff0 <_dtoa_r+0x350>
 800bfda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfe2:	f7f4 fc53 	bl	800088c <__aeabi_ddiv>
 800bfe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfea:	e028      	b.n	800c03e <_dtoa_r+0x39e>
 800bfec:	2602      	movs	r6, #2
 800bfee:	e7f2      	b.n	800bfd6 <_dtoa_r+0x336>
 800bff0:	07e1      	lsls	r1, r4, #31
 800bff2:	d508      	bpl.n	800c006 <_dtoa_r+0x366>
 800bff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bffc:	f7f4 fb1c 	bl	8000638 <__aeabi_dmul>
 800c000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c004:	3601      	adds	r6, #1
 800c006:	1064      	asrs	r4, r4, #1
 800c008:	3508      	adds	r5, #8
 800c00a:	e7e5      	b.n	800bfd8 <_dtoa_r+0x338>
 800c00c:	f000 80d2 	beq.w	800c1b4 <_dtoa_r+0x514>
 800c010:	427c      	negs	r4, r7
 800c012:	4b92      	ldr	r3, [pc, #584]	@ (800c25c <_dtoa_r+0x5bc>)
 800c014:	4d92      	ldr	r5, [pc, #584]	@ (800c260 <_dtoa_r+0x5c0>)
 800c016:	f004 020f 	and.w	r2, r4, #15
 800c01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c026:	f7f4 fb07 	bl	8000638 <__aeabi_dmul>
 800c02a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c02e:	1124      	asrs	r4, r4, #4
 800c030:	2300      	movs	r3, #0
 800c032:	2602      	movs	r6, #2
 800c034:	2c00      	cmp	r4, #0
 800c036:	f040 80b2 	bne.w	800c19e <_dtoa_r+0x4fe>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1d3      	bne.n	800bfe6 <_dtoa_r+0x346>
 800c03e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c040:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	f000 80b7 	beq.w	800c1b8 <_dtoa_r+0x518>
 800c04a:	4b86      	ldr	r3, [pc, #536]	@ (800c264 <_dtoa_r+0x5c4>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	4620      	mov	r0, r4
 800c050:	4629      	mov	r1, r5
 800c052:	f7f4 fd63 	bl	8000b1c <__aeabi_dcmplt>
 800c056:	2800      	cmp	r0, #0
 800c058:	f000 80ae 	beq.w	800c1b8 <_dtoa_r+0x518>
 800c05c:	9b07      	ldr	r3, [sp, #28]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 80aa 	beq.w	800c1b8 <_dtoa_r+0x518>
 800c064:	9b00      	ldr	r3, [sp, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	dd37      	ble.n	800c0da <_dtoa_r+0x43a>
 800c06a:	1e7b      	subs	r3, r7, #1
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	4620      	mov	r0, r4
 800c070:	4b7d      	ldr	r3, [pc, #500]	@ (800c268 <_dtoa_r+0x5c8>)
 800c072:	2200      	movs	r2, #0
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 fadf 	bl	8000638 <__aeabi_dmul>
 800c07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c07e:	9c00      	ldr	r4, [sp, #0]
 800c080:	3601      	adds	r6, #1
 800c082:	4630      	mov	r0, r6
 800c084:	f7f4 fa6e 	bl	8000564 <__aeabi_i2d>
 800c088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c08c:	f7f4 fad4 	bl	8000638 <__aeabi_dmul>
 800c090:	4b76      	ldr	r3, [pc, #472]	@ (800c26c <_dtoa_r+0x5cc>)
 800c092:	2200      	movs	r2, #0
 800c094:	f7f4 f91a 	bl	80002cc <__adddf3>
 800c098:	4605      	mov	r5, r0
 800c09a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c09e:	2c00      	cmp	r4, #0
 800c0a0:	f040 808d 	bne.w	800c1be <_dtoa_r+0x51e>
 800c0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a8:	4b71      	ldr	r3, [pc, #452]	@ (800c270 <_dtoa_r+0x5d0>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f7f4 f90c 	bl	80002c8 <__aeabi_dsub>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0b8:	462a      	mov	r2, r5
 800c0ba:	4633      	mov	r3, r6
 800c0bc:	f7f4 fd4c 	bl	8000b58 <__aeabi_dcmpgt>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	f040 828b 	bne.w	800c5dc <_dtoa_r+0x93c>
 800c0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c0d0:	f7f4 fd24 	bl	8000b1c <__aeabi_dcmplt>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	f040 8128 	bne.w	800c32a <_dtoa_r+0x68a>
 800c0da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c0de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c0e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f2c0 815a 	blt.w	800c39e <_dtoa_r+0x6fe>
 800c0ea:	2f0e      	cmp	r7, #14
 800c0ec:	f300 8157 	bgt.w	800c39e <_dtoa_r+0x6fe>
 800c0f0:	4b5a      	ldr	r3, [pc, #360]	@ (800c25c <_dtoa_r+0x5bc>)
 800c0f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0f6:	ed93 7b00 	vldr	d7, [r3]
 800c0fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	ed8d 7b00 	vstr	d7, [sp]
 800c102:	da03      	bge.n	800c10c <_dtoa_r+0x46c>
 800c104:	9b07      	ldr	r3, [sp, #28]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f340 8101 	ble.w	800c30e <_dtoa_r+0x66e>
 800c10c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c110:	4656      	mov	r6, sl
 800c112:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c116:	4620      	mov	r0, r4
 800c118:	4629      	mov	r1, r5
 800c11a:	f7f4 fbb7 	bl	800088c <__aeabi_ddiv>
 800c11e:	f7f4 fd3b 	bl	8000b98 <__aeabi_d2iz>
 800c122:	4680      	mov	r8, r0
 800c124:	f7f4 fa1e 	bl	8000564 <__aeabi_i2d>
 800c128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c12c:	f7f4 fa84 	bl	8000638 <__aeabi_dmul>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4620      	mov	r0, r4
 800c136:	4629      	mov	r1, r5
 800c138:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c13c:	f7f4 f8c4 	bl	80002c8 <__aeabi_dsub>
 800c140:	f806 4b01 	strb.w	r4, [r6], #1
 800c144:	9d07      	ldr	r5, [sp, #28]
 800c146:	eba6 040a 	sub.w	r4, r6, sl
 800c14a:	42a5      	cmp	r5, r4
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	f040 8117 	bne.w	800c382 <_dtoa_r+0x6e2>
 800c154:	f7f4 f8ba 	bl	80002cc <__adddf3>
 800c158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c15c:	4604      	mov	r4, r0
 800c15e:	460d      	mov	r5, r1
 800c160:	f7f4 fcfa 	bl	8000b58 <__aeabi_dcmpgt>
 800c164:	2800      	cmp	r0, #0
 800c166:	f040 80f9 	bne.w	800c35c <_dtoa_r+0x6bc>
 800c16a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c16e:	4620      	mov	r0, r4
 800c170:	4629      	mov	r1, r5
 800c172:	f7f4 fcc9 	bl	8000b08 <__aeabi_dcmpeq>
 800c176:	b118      	cbz	r0, 800c180 <_dtoa_r+0x4e0>
 800c178:	f018 0f01 	tst.w	r8, #1
 800c17c:	f040 80ee 	bne.w	800c35c <_dtoa_r+0x6bc>
 800c180:	4649      	mov	r1, r9
 800c182:	4658      	mov	r0, fp
 800c184:	f000 ffdc 	bl	800d140 <_Bfree>
 800c188:	2300      	movs	r3, #0
 800c18a:	7033      	strb	r3, [r6, #0]
 800c18c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c18e:	3701      	adds	r7, #1
 800c190:	601f      	str	r7, [r3, #0]
 800c192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c194:	2b00      	cmp	r3, #0
 800c196:	f000 831d 	beq.w	800c7d4 <_dtoa_r+0xb34>
 800c19a:	601e      	str	r6, [r3, #0]
 800c19c:	e31a      	b.n	800c7d4 <_dtoa_r+0xb34>
 800c19e:	07e2      	lsls	r2, r4, #31
 800c1a0:	d505      	bpl.n	800c1ae <_dtoa_r+0x50e>
 800c1a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1a6:	f7f4 fa47 	bl	8000638 <__aeabi_dmul>
 800c1aa:	3601      	adds	r6, #1
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	1064      	asrs	r4, r4, #1
 800c1b0:	3508      	adds	r5, #8
 800c1b2:	e73f      	b.n	800c034 <_dtoa_r+0x394>
 800c1b4:	2602      	movs	r6, #2
 800c1b6:	e742      	b.n	800c03e <_dtoa_r+0x39e>
 800c1b8:	9c07      	ldr	r4, [sp, #28]
 800c1ba:	9704      	str	r7, [sp, #16]
 800c1bc:	e761      	b.n	800c082 <_dtoa_r+0x3e2>
 800c1be:	4b27      	ldr	r3, [pc, #156]	@ (800c25c <_dtoa_r+0x5bc>)
 800c1c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1ca:	4454      	add	r4, sl
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	d053      	beq.n	800c278 <_dtoa_r+0x5d8>
 800c1d0:	4928      	ldr	r1, [pc, #160]	@ (800c274 <_dtoa_r+0x5d4>)
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	f7f4 fb5a 	bl	800088c <__aeabi_ddiv>
 800c1d8:	4633      	mov	r3, r6
 800c1da:	462a      	mov	r2, r5
 800c1dc:	f7f4 f874 	bl	80002c8 <__aeabi_dsub>
 800c1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1e4:	4656      	mov	r6, sl
 800c1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1ea:	f7f4 fcd5 	bl	8000b98 <__aeabi_d2iz>
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	f7f4 f9b8 	bl	8000564 <__aeabi_i2d>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1fc:	f7f4 f864 	bl	80002c8 <__aeabi_dsub>
 800c200:	3530      	adds	r5, #48	@ 0x30
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c20a:	f806 5b01 	strb.w	r5, [r6], #1
 800c20e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c212:	f7f4 fc83 	bl	8000b1c <__aeabi_dcmplt>
 800c216:	2800      	cmp	r0, #0
 800c218:	d171      	bne.n	800c2fe <_dtoa_r+0x65e>
 800c21a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c21e:	4911      	ldr	r1, [pc, #68]	@ (800c264 <_dtoa_r+0x5c4>)
 800c220:	2000      	movs	r0, #0
 800c222:	f7f4 f851 	bl	80002c8 <__aeabi_dsub>
 800c226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c22a:	f7f4 fc77 	bl	8000b1c <__aeabi_dcmplt>
 800c22e:	2800      	cmp	r0, #0
 800c230:	f040 8095 	bne.w	800c35e <_dtoa_r+0x6be>
 800c234:	42a6      	cmp	r6, r4
 800c236:	f43f af50 	beq.w	800c0da <_dtoa_r+0x43a>
 800c23a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c23e:	4b0a      	ldr	r3, [pc, #40]	@ (800c268 <_dtoa_r+0x5c8>)
 800c240:	2200      	movs	r2, #0
 800c242:	f7f4 f9f9 	bl	8000638 <__aeabi_dmul>
 800c246:	4b08      	ldr	r3, [pc, #32]	@ (800c268 <_dtoa_r+0x5c8>)
 800c248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c24c:	2200      	movs	r2, #0
 800c24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c252:	f7f4 f9f1 	bl	8000638 <__aeabi_dmul>
 800c256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c25a:	e7c4      	b.n	800c1e6 <_dtoa_r+0x546>
 800c25c:	0800e908 	.word	0x0800e908
 800c260:	0800e8e0 	.word	0x0800e8e0
 800c264:	3ff00000 	.word	0x3ff00000
 800c268:	40240000 	.word	0x40240000
 800c26c:	401c0000 	.word	0x401c0000
 800c270:	40140000 	.word	0x40140000
 800c274:	3fe00000 	.word	0x3fe00000
 800c278:	4631      	mov	r1, r6
 800c27a:	4628      	mov	r0, r5
 800c27c:	f7f4 f9dc 	bl	8000638 <__aeabi_dmul>
 800c280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c284:	9415      	str	r4, [sp, #84]	@ 0x54
 800c286:	4656      	mov	r6, sl
 800c288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c28c:	f7f4 fc84 	bl	8000b98 <__aeabi_d2iz>
 800c290:	4605      	mov	r5, r0
 800c292:	f7f4 f967 	bl	8000564 <__aeabi_i2d>
 800c296:	4602      	mov	r2, r0
 800c298:	460b      	mov	r3, r1
 800c29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c29e:	f7f4 f813 	bl	80002c8 <__aeabi_dsub>
 800c2a2:	3530      	adds	r5, #48	@ 0x30
 800c2a4:	f806 5b01 	strb.w	r5, [r6], #1
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	42a6      	cmp	r6, r4
 800c2ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2b2:	f04f 0200 	mov.w	r2, #0
 800c2b6:	d124      	bne.n	800c302 <_dtoa_r+0x662>
 800c2b8:	4bac      	ldr	r3, [pc, #688]	@ (800c56c <_dtoa_r+0x8cc>)
 800c2ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2be:	f7f4 f805 	bl	80002cc <__adddf3>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ca:	f7f4 fc45 	bl	8000b58 <__aeabi_dcmpgt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d145      	bne.n	800c35e <_dtoa_r+0x6be>
 800c2d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2d6:	49a5      	ldr	r1, [pc, #660]	@ (800c56c <_dtoa_r+0x8cc>)
 800c2d8:	2000      	movs	r0, #0
 800c2da:	f7f3 fff5 	bl	80002c8 <__aeabi_dsub>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2e6:	f7f4 fc19 	bl	8000b1c <__aeabi_dcmplt>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	f43f aef5 	beq.w	800c0da <_dtoa_r+0x43a>
 800c2f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c2f2:	1e73      	subs	r3, r6, #1
 800c2f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c2f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2fa:	2b30      	cmp	r3, #48	@ 0x30
 800c2fc:	d0f8      	beq.n	800c2f0 <_dtoa_r+0x650>
 800c2fe:	9f04      	ldr	r7, [sp, #16]
 800c300:	e73e      	b.n	800c180 <_dtoa_r+0x4e0>
 800c302:	4b9b      	ldr	r3, [pc, #620]	@ (800c570 <_dtoa_r+0x8d0>)
 800c304:	f7f4 f998 	bl	8000638 <__aeabi_dmul>
 800c308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c30c:	e7bc      	b.n	800c288 <_dtoa_r+0x5e8>
 800c30e:	d10c      	bne.n	800c32a <_dtoa_r+0x68a>
 800c310:	4b98      	ldr	r3, [pc, #608]	@ (800c574 <_dtoa_r+0x8d4>)
 800c312:	2200      	movs	r2, #0
 800c314:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c318:	f7f4 f98e 	bl	8000638 <__aeabi_dmul>
 800c31c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c320:	f7f4 fc10 	bl	8000b44 <__aeabi_dcmpge>
 800c324:	2800      	cmp	r0, #0
 800c326:	f000 8157 	beq.w	800c5d8 <_dtoa_r+0x938>
 800c32a:	2400      	movs	r4, #0
 800c32c:	4625      	mov	r5, r4
 800c32e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c330:	43db      	mvns	r3, r3
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	4656      	mov	r6, sl
 800c336:	2700      	movs	r7, #0
 800c338:	4621      	mov	r1, r4
 800c33a:	4658      	mov	r0, fp
 800c33c:	f000 ff00 	bl	800d140 <_Bfree>
 800c340:	2d00      	cmp	r5, #0
 800c342:	d0dc      	beq.n	800c2fe <_dtoa_r+0x65e>
 800c344:	b12f      	cbz	r7, 800c352 <_dtoa_r+0x6b2>
 800c346:	42af      	cmp	r7, r5
 800c348:	d003      	beq.n	800c352 <_dtoa_r+0x6b2>
 800c34a:	4639      	mov	r1, r7
 800c34c:	4658      	mov	r0, fp
 800c34e:	f000 fef7 	bl	800d140 <_Bfree>
 800c352:	4629      	mov	r1, r5
 800c354:	4658      	mov	r0, fp
 800c356:	f000 fef3 	bl	800d140 <_Bfree>
 800c35a:	e7d0      	b.n	800c2fe <_dtoa_r+0x65e>
 800c35c:	9704      	str	r7, [sp, #16]
 800c35e:	4633      	mov	r3, r6
 800c360:	461e      	mov	r6, r3
 800c362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c366:	2a39      	cmp	r2, #57	@ 0x39
 800c368:	d107      	bne.n	800c37a <_dtoa_r+0x6da>
 800c36a:	459a      	cmp	sl, r3
 800c36c:	d1f8      	bne.n	800c360 <_dtoa_r+0x6c0>
 800c36e:	9a04      	ldr	r2, [sp, #16]
 800c370:	3201      	adds	r2, #1
 800c372:	9204      	str	r2, [sp, #16]
 800c374:	2230      	movs	r2, #48	@ 0x30
 800c376:	f88a 2000 	strb.w	r2, [sl]
 800c37a:	781a      	ldrb	r2, [r3, #0]
 800c37c:	3201      	adds	r2, #1
 800c37e:	701a      	strb	r2, [r3, #0]
 800c380:	e7bd      	b.n	800c2fe <_dtoa_r+0x65e>
 800c382:	4b7b      	ldr	r3, [pc, #492]	@ (800c570 <_dtoa_r+0x8d0>)
 800c384:	2200      	movs	r2, #0
 800c386:	f7f4 f957 	bl	8000638 <__aeabi_dmul>
 800c38a:	2200      	movs	r2, #0
 800c38c:	2300      	movs	r3, #0
 800c38e:	4604      	mov	r4, r0
 800c390:	460d      	mov	r5, r1
 800c392:	f7f4 fbb9 	bl	8000b08 <__aeabi_dcmpeq>
 800c396:	2800      	cmp	r0, #0
 800c398:	f43f aebb 	beq.w	800c112 <_dtoa_r+0x472>
 800c39c:	e6f0      	b.n	800c180 <_dtoa_r+0x4e0>
 800c39e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c3a0:	2a00      	cmp	r2, #0
 800c3a2:	f000 80db 	beq.w	800c55c <_dtoa_r+0x8bc>
 800c3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3a8:	2a01      	cmp	r2, #1
 800c3aa:	f300 80bf 	bgt.w	800c52c <_dtoa_r+0x88c>
 800c3ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c3b0:	2a00      	cmp	r2, #0
 800c3b2:	f000 80b7 	beq.w	800c524 <_dtoa_r+0x884>
 800c3b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c3ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3bc:	4646      	mov	r6, r8
 800c3be:	9a08      	ldr	r2, [sp, #32]
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	441a      	add	r2, r3
 800c3c4:	4658      	mov	r0, fp
 800c3c6:	4498      	add	r8, r3
 800c3c8:	9208      	str	r2, [sp, #32]
 800c3ca:	f000 ffb7 	bl	800d33c <__i2b>
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	b15e      	cbz	r6, 800c3ea <_dtoa_r+0x74a>
 800c3d2:	9b08      	ldr	r3, [sp, #32]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dd08      	ble.n	800c3ea <_dtoa_r+0x74a>
 800c3d8:	42b3      	cmp	r3, r6
 800c3da:	9a08      	ldr	r2, [sp, #32]
 800c3dc:	bfa8      	it	ge
 800c3de:	4633      	movge	r3, r6
 800c3e0:	eba8 0803 	sub.w	r8, r8, r3
 800c3e4:	1af6      	subs	r6, r6, r3
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	9308      	str	r3, [sp, #32]
 800c3ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ec:	b1f3      	cbz	r3, 800c42c <_dtoa_r+0x78c>
 800c3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 80b7 	beq.w	800c564 <_dtoa_r+0x8c4>
 800c3f6:	b18c      	cbz	r4, 800c41c <_dtoa_r+0x77c>
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	4658      	mov	r0, fp
 800c3fe:	f001 f85d 	bl	800d4bc <__pow5mult>
 800c402:	464a      	mov	r2, r9
 800c404:	4601      	mov	r1, r0
 800c406:	4605      	mov	r5, r0
 800c408:	4658      	mov	r0, fp
 800c40a:	f000 ffad 	bl	800d368 <__multiply>
 800c40e:	4649      	mov	r1, r9
 800c410:	9004      	str	r0, [sp, #16]
 800c412:	4658      	mov	r0, fp
 800c414:	f000 fe94 	bl	800d140 <_Bfree>
 800c418:	9b04      	ldr	r3, [sp, #16]
 800c41a:	4699      	mov	r9, r3
 800c41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c41e:	1b1a      	subs	r2, r3, r4
 800c420:	d004      	beq.n	800c42c <_dtoa_r+0x78c>
 800c422:	4649      	mov	r1, r9
 800c424:	4658      	mov	r0, fp
 800c426:	f001 f849 	bl	800d4bc <__pow5mult>
 800c42a:	4681      	mov	r9, r0
 800c42c:	2101      	movs	r1, #1
 800c42e:	4658      	mov	r0, fp
 800c430:	f000 ff84 	bl	800d33c <__i2b>
 800c434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c436:	4604      	mov	r4, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 81cf 	beq.w	800c7dc <_dtoa_r+0xb3c>
 800c43e:	461a      	mov	r2, r3
 800c440:	4601      	mov	r1, r0
 800c442:	4658      	mov	r0, fp
 800c444:	f001 f83a 	bl	800d4bc <__pow5mult>
 800c448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	4604      	mov	r4, r0
 800c44e:	f300 8095 	bgt.w	800c57c <_dtoa_r+0x8dc>
 800c452:	9b02      	ldr	r3, [sp, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	f040 8087 	bne.w	800c568 <_dtoa_r+0x8c8>
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c460:	2b00      	cmp	r3, #0
 800c462:	f040 8089 	bne.w	800c578 <_dtoa_r+0x8d8>
 800c466:	9b03      	ldr	r3, [sp, #12]
 800c468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c46c:	0d1b      	lsrs	r3, r3, #20
 800c46e:	051b      	lsls	r3, r3, #20
 800c470:	b12b      	cbz	r3, 800c47e <_dtoa_r+0x7de>
 800c472:	9b08      	ldr	r3, [sp, #32]
 800c474:	3301      	adds	r3, #1
 800c476:	9308      	str	r3, [sp, #32]
 800c478:	f108 0801 	add.w	r8, r8, #1
 800c47c:	2301      	movs	r3, #1
 800c47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 81b0 	beq.w	800c7e8 <_dtoa_r+0xb48>
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c48e:	6918      	ldr	r0, [r3, #16]
 800c490:	f000 ff08 	bl	800d2a4 <__hi0bits>
 800c494:	f1c0 0020 	rsb	r0, r0, #32
 800c498:	9b08      	ldr	r3, [sp, #32]
 800c49a:	4418      	add	r0, r3
 800c49c:	f010 001f 	ands.w	r0, r0, #31
 800c4a0:	d077      	beq.n	800c592 <_dtoa_r+0x8f2>
 800c4a2:	f1c0 0320 	rsb	r3, r0, #32
 800c4a6:	2b04      	cmp	r3, #4
 800c4a8:	dd6b      	ble.n	800c582 <_dtoa_r+0x8e2>
 800c4aa:	9b08      	ldr	r3, [sp, #32]
 800c4ac:	f1c0 001c 	rsb	r0, r0, #28
 800c4b0:	4403      	add	r3, r0
 800c4b2:	4480      	add	r8, r0
 800c4b4:	4406      	add	r6, r0
 800c4b6:	9308      	str	r3, [sp, #32]
 800c4b8:	f1b8 0f00 	cmp.w	r8, #0
 800c4bc:	dd05      	ble.n	800c4ca <_dtoa_r+0x82a>
 800c4be:	4649      	mov	r1, r9
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	4658      	mov	r0, fp
 800c4c4:	f001 f854 	bl	800d570 <__lshift>
 800c4c8:	4681      	mov	r9, r0
 800c4ca:	9b08      	ldr	r3, [sp, #32]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dd05      	ble.n	800c4dc <_dtoa_r+0x83c>
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	4658      	mov	r0, fp
 800c4d6:	f001 f84b 	bl	800d570 <__lshift>
 800c4da:	4604      	mov	r4, r0
 800c4dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d059      	beq.n	800c596 <_dtoa_r+0x8f6>
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4648      	mov	r0, r9
 800c4e6:	f001 f8af 	bl	800d648 <__mcmp>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	da53      	bge.n	800c596 <_dtoa_r+0x8f6>
 800c4ee:	1e7b      	subs	r3, r7, #1
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	4649      	mov	r1, r9
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	220a      	movs	r2, #10
 800c4f8:	4658      	mov	r0, fp
 800c4fa:	f000 fe43 	bl	800d184 <__multadd>
 800c4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c500:	4681      	mov	r9, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 8172 	beq.w	800c7ec <_dtoa_r+0xb4c>
 800c508:	2300      	movs	r3, #0
 800c50a:	4629      	mov	r1, r5
 800c50c:	220a      	movs	r2, #10
 800c50e:	4658      	mov	r0, fp
 800c510:	f000 fe38 	bl	800d184 <__multadd>
 800c514:	9b00      	ldr	r3, [sp, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	4605      	mov	r5, r0
 800c51a:	dc67      	bgt.n	800c5ec <_dtoa_r+0x94c>
 800c51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c51e:	2b02      	cmp	r3, #2
 800c520:	dc41      	bgt.n	800c5a6 <_dtoa_r+0x906>
 800c522:	e063      	b.n	800c5ec <_dtoa_r+0x94c>
 800c524:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c52a:	e746      	b.n	800c3ba <_dtoa_r+0x71a>
 800c52c:	9b07      	ldr	r3, [sp, #28]
 800c52e:	1e5c      	subs	r4, r3, #1
 800c530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c532:	42a3      	cmp	r3, r4
 800c534:	bfbf      	itttt	lt
 800c536:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c538:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c53a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c53c:	1ae3      	sublt	r3, r4, r3
 800c53e:	bfb4      	ite	lt
 800c540:	18d2      	addlt	r2, r2, r3
 800c542:	1b1c      	subge	r4, r3, r4
 800c544:	9b07      	ldr	r3, [sp, #28]
 800c546:	bfbc      	itt	lt
 800c548:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c54a:	2400      	movlt	r4, #0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	bfb5      	itete	lt
 800c550:	eba8 0603 	sublt.w	r6, r8, r3
 800c554:	9b07      	ldrge	r3, [sp, #28]
 800c556:	2300      	movlt	r3, #0
 800c558:	4646      	movge	r6, r8
 800c55a:	e730      	b.n	800c3be <_dtoa_r+0x71e>
 800c55c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c55e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c560:	4646      	mov	r6, r8
 800c562:	e735      	b.n	800c3d0 <_dtoa_r+0x730>
 800c564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c566:	e75c      	b.n	800c422 <_dtoa_r+0x782>
 800c568:	2300      	movs	r3, #0
 800c56a:	e788      	b.n	800c47e <_dtoa_r+0x7de>
 800c56c:	3fe00000 	.word	0x3fe00000
 800c570:	40240000 	.word	0x40240000
 800c574:	40140000 	.word	0x40140000
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	e780      	b.n	800c47e <_dtoa_r+0x7de>
 800c57c:	2300      	movs	r3, #0
 800c57e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c580:	e782      	b.n	800c488 <_dtoa_r+0x7e8>
 800c582:	d099      	beq.n	800c4b8 <_dtoa_r+0x818>
 800c584:	9a08      	ldr	r2, [sp, #32]
 800c586:	331c      	adds	r3, #28
 800c588:	441a      	add	r2, r3
 800c58a:	4498      	add	r8, r3
 800c58c:	441e      	add	r6, r3
 800c58e:	9208      	str	r2, [sp, #32]
 800c590:	e792      	b.n	800c4b8 <_dtoa_r+0x818>
 800c592:	4603      	mov	r3, r0
 800c594:	e7f6      	b.n	800c584 <_dtoa_r+0x8e4>
 800c596:	9b07      	ldr	r3, [sp, #28]
 800c598:	9704      	str	r7, [sp, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	dc20      	bgt.n	800c5e0 <_dtoa_r+0x940>
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	dd1e      	ble.n	800c5e4 <_dtoa_r+0x944>
 800c5a6:	9b00      	ldr	r3, [sp, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f47f aec0 	bne.w	800c32e <_dtoa_r+0x68e>
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	2205      	movs	r2, #5
 800c5b2:	4658      	mov	r0, fp
 800c5b4:	f000 fde6 	bl	800d184 <__multadd>
 800c5b8:	4601      	mov	r1, r0
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4648      	mov	r0, r9
 800c5be:	f001 f843 	bl	800d648 <__mcmp>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	f77f aeb3 	ble.w	800c32e <_dtoa_r+0x68e>
 800c5c8:	4656      	mov	r6, sl
 800c5ca:	2331      	movs	r3, #49	@ 0x31
 800c5cc:	f806 3b01 	strb.w	r3, [r6], #1
 800c5d0:	9b04      	ldr	r3, [sp, #16]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	e6ae      	b.n	800c336 <_dtoa_r+0x696>
 800c5d8:	9c07      	ldr	r4, [sp, #28]
 800c5da:	9704      	str	r7, [sp, #16]
 800c5dc:	4625      	mov	r5, r4
 800c5de:	e7f3      	b.n	800c5c8 <_dtoa_r+0x928>
 800c5e0:	9b07      	ldr	r3, [sp, #28]
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 8104 	beq.w	800c7f4 <_dtoa_r+0xb54>
 800c5ec:	2e00      	cmp	r6, #0
 800c5ee:	dd05      	ble.n	800c5fc <_dtoa_r+0x95c>
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4632      	mov	r2, r6
 800c5f4:	4658      	mov	r0, fp
 800c5f6:	f000 ffbb 	bl	800d570 <__lshift>
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d05a      	beq.n	800c6b8 <_dtoa_r+0xa18>
 800c602:	6869      	ldr	r1, [r5, #4]
 800c604:	4658      	mov	r0, fp
 800c606:	f000 fd5b 	bl	800d0c0 <_Balloc>
 800c60a:	4606      	mov	r6, r0
 800c60c:	b928      	cbnz	r0, 800c61a <_dtoa_r+0x97a>
 800c60e:	4b84      	ldr	r3, [pc, #528]	@ (800c820 <_dtoa_r+0xb80>)
 800c610:	4602      	mov	r2, r0
 800c612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c616:	f7ff bb5a 	b.w	800bcce <_dtoa_r+0x2e>
 800c61a:	692a      	ldr	r2, [r5, #16]
 800c61c:	3202      	adds	r2, #2
 800c61e:	0092      	lsls	r2, r2, #2
 800c620:	f105 010c 	add.w	r1, r5, #12
 800c624:	300c      	adds	r0, #12
 800c626:	f7ff fa9a 	bl	800bb5e <memcpy>
 800c62a:	2201      	movs	r2, #1
 800c62c:	4631      	mov	r1, r6
 800c62e:	4658      	mov	r0, fp
 800c630:	f000 ff9e 	bl	800d570 <__lshift>
 800c634:	f10a 0301 	add.w	r3, sl, #1
 800c638:	9307      	str	r3, [sp, #28]
 800c63a:	9b00      	ldr	r3, [sp, #0]
 800c63c:	4453      	add	r3, sl
 800c63e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c640:	9b02      	ldr	r3, [sp, #8]
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	462f      	mov	r7, r5
 800c648:	930a      	str	r3, [sp, #40]	@ 0x28
 800c64a:	4605      	mov	r5, r0
 800c64c:	9b07      	ldr	r3, [sp, #28]
 800c64e:	4621      	mov	r1, r4
 800c650:	3b01      	subs	r3, #1
 800c652:	4648      	mov	r0, r9
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	f7ff fa9b 	bl	800bb90 <quorem>
 800c65a:	4639      	mov	r1, r7
 800c65c:	9002      	str	r0, [sp, #8]
 800c65e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c662:	4648      	mov	r0, r9
 800c664:	f000 fff0 	bl	800d648 <__mcmp>
 800c668:	462a      	mov	r2, r5
 800c66a:	9008      	str	r0, [sp, #32]
 800c66c:	4621      	mov	r1, r4
 800c66e:	4658      	mov	r0, fp
 800c670:	f001 f806 	bl	800d680 <__mdiff>
 800c674:	68c2      	ldr	r2, [r0, #12]
 800c676:	4606      	mov	r6, r0
 800c678:	bb02      	cbnz	r2, 800c6bc <_dtoa_r+0xa1c>
 800c67a:	4601      	mov	r1, r0
 800c67c:	4648      	mov	r0, r9
 800c67e:	f000 ffe3 	bl	800d648 <__mcmp>
 800c682:	4602      	mov	r2, r0
 800c684:	4631      	mov	r1, r6
 800c686:	4658      	mov	r0, fp
 800c688:	920e      	str	r2, [sp, #56]	@ 0x38
 800c68a:	f000 fd59 	bl	800d140 <_Bfree>
 800c68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c692:	9e07      	ldr	r6, [sp, #28]
 800c694:	ea43 0102 	orr.w	r1, r3, r2
 800c698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c69a:	4319      	orrs	r1, r3
 800c69c:	d110      	bne.n	800c6c0 <_dtoa_r+0xa20>
 800c69e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6a2:	d029      	beq.n	800c6f8 <_dtoa_r+0xa58>
 800c6a4:	9b08      	ldr	r3, [sp, #32]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	dd02      	ble.n	800c6b0 <_dtoa_r+0xa10>
 800c6aa:	9b02      	ldr	r3, [sp, #8]
 800c6ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c6b0:	9b00      	ldr	r3, [sp, #0]
 800c6b2:	f883 8000 	strb.w	r8, [r3]
 800c6b6:	e63f      	b.n	800c338 <_dtoa_r+0x698>
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	e7bb      	b.n	800c634 <_dtoa_r+0x994>
 800c6bc:	2201      	movs	r2, #1
 800c6be:	e7e1      	b.n	800c684 <_dtoa_r+0x9e4>
 800c6c0:	9b08      	ldr	r3, [sp, #32]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	db04      	blt.n	800c6d0 <_dtoa_r+0xa30>
 800c6c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6cc:	430b      	orrs	r3, r1
 800c6ce:	d120      	bne.n	800c712 <_dtoa_r+0xa72>
 800c6d0:	2a00      	cmp	r2, #0
 800c6d2:	dded      	ble.n	800c6b0 <_dtoa_r+0xa10>
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	4658      	mov	r0, fp
 800c6da:	f000 ff49 	bl	800d570 <__lshift>
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4681      	mov	r9, r0
 800c6e2:	f000 ffb1 	bl	800d648 <__mcmp>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	dc03      	bgt.n	800c6f2 <_dtoa_r+0xa52>
 800c6ea:	d1e1      	bne.n	800c6b0 <_dtoa_r+0xa10>
 800c6ec:	f018 0f01 	tst.w	r8, #1
 800c6f0:	d0de      	beq.n	800c6b0 <_dtoa_r+0xa10>
 800c6f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6f6:	d1d8      	bne.n	800c6aa <_dtoa_r+0xa0a>
 800c6f8:	9a00      	ldr	r2, [sp, #0]
 800c6fa:	2339      	movs	r3, #57	@ 0x39
 800c6fc:	7013      	strb	r3, [r2, #0]
 800c6fe:	4633      	mov	r3, r6
 800c700:	461e      	mov	r6, r3
 800c702:	3b01      	subs	r3, #1
 800c704:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c708:	2a39      	cmp	r2, #57	@ 0x39
 800c70a:	d052      	beq.n	800c7b2 <_dtoa_r+0xb12>
 800c70c:	3201      	adds	r2, #1
 800c70e:	701a      	strb	r2, [r3, #0]
 800c710:	e612      	b.n	800c338 <_dtoa_r+0x698>
 800c712:	2a00      	cmp	r2, #0
 800c714:	dd07      	ble.n	800c726 <_dtoa_r+0xa86>
 800c716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c71a:	d0ed      	beq.n	800c6f8 <_dtoa_r+0xa58>
 800c71c:	9a00      	ldr	r2, [sp, #0]
 800c71e:	f108 0301 	add.w	r3, r8, #1
 800c722:	7013      	strb	r3, [r2, #0]
 800c724:	e608      	b.n	800c338 <_dtoa_r+0x698>
 800c726:	9b07      	ldr	r3, [sp, #28]
 800c728:	9a07      	ldr	r2, [sp, #28]
 800c72a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c72e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c730:	4293      	cmp	r3, r2
 800c732:	d028      	beq.n	800c786 <_dtoa_r+0xae6>
 800c734:	4649      	mov	r1, r9
 800c736:	2300      	movs	r3, #0
 800c738:	220a      	movs	r2, #10
 800c73a:	4658      	mov	r0, fp
 800c73c:	f000 fd22 	bl	800d184 <__multadd>
 800c740:	42af      	cmp	r7, r5
 800c742:	4681      	mov	r9, r0
 800c744:	f04f 0300 	mov.w	r3, #0
 800c748:	f04f 020a 	mov.w	r2, #10
 800c74c:	4639      	mov	r1, r7
 800c74e:	4658      	mov	r0, fp
 800c750:	d107      	bne.n	800c762 <_dtoa_r+0xac2>
 800c752:	f000 fd17 	bl	800d184 <__multadd>
 800c756:	4607      	mov	r7, r0
 800c758:	4605      	mov	r5, r0
 800c75a:	9b07      	ldr	r3, [sp, #28]
 800c75c:	3301      	adds	r3, #1
 800c75e:	9307      	str	r3, [sp, #28]
 800c760:	e774      	b.n	800c64c <_dtoa_r+0x9ac>
 800c762:	f000 fd0f 	bl	800d184 <__multadd>
 800c766:	4629      	mov	r1, r5
 800c768:	4607      	mov	r7, r0
 800c76a:	2300      	movs	r3, #0
 800c76c:	220a      	movs	r2, #10
 800c76e:	4658      	mov	r0, fp
 800c770:	f000 fd08 	bl	800d184 <__multadd>
 800c774:	4605      	mov	r5, r0
 800c776:	e7f0      	b.n	800c75a <_dtoa_r+0xaba>
 800c778:	9b00      	ldr	r3, [sp, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	bfcc      	ite	gt
 800c77e:	461e      	movgt	r6, r3
 800c780:	2601      	movle	r6, #1
 800c782:	4456      	add	r6, sl
 800c784:	2700      	movs	r7, #0
 800c786:	4649      	mov	r1, r9
 800c788:	2201      	movs	r2, #1
 800c78a:	4658      	mov	r0, fp
 800c78c:	f000 fef0 	bl	800d570 <__lshift>
 800c790:	4621      	mov	r1, r4
 800c792:	4681      	mov	r9, r0
 800c794:	f000 ff58 	bl	800d648 <__mcmp>
 800c798:	2800      	cmp	r0, #0
 800c79a:	dcb0      	bgt.n	800c6fe <_dtoa_r+0xa5e>
 800c79c:	d102      	bne.n	800c7a4 <_dtoa_r+0xb04>
 800c79e:	f018 0f01 	tst.w	r8, #1
 800c7a2:	d1ac      	bne.n	800c6fe <_dtoa_r+0xa5e>
 800c7a4:	4633      	mov	r3, r6
 800c7a6:	461e      	mov	r6, r3
 800c7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7ac:	2a30      	cmp	r2, #48	@ 0x30
 800c7ae:	d0fa      	beq.n	800c7a6 <_dtoa_r+0xb06>
 800c7b0:	e5c2      	b.n	800c338 <_dtoa_r+0x698>
 800c7b2:	459a      	cmp	sl, r3
 800c7b4:	d1a4      	bne.n	800c700 <_dtoa_r+0xa60>
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	2331      	movs	r3, #49	@ 0x31
 800c7be:	f88a 3000 	strb.w	r3, [sl]
 800c7c2:	e5b9      	b.n	800c338 <_dtoa_r+0x698>
 800c7c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c7c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c824 <_dtoa_r+0xb84>
 800c7ca:	b11b      	cbz	r3, 800c7d4 <_dtoa_r+0xb34>
 800c7cc:	f10a 0308 	add.w	r3, sl, #8
 800c7d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c7d2:	6013      	str	r3, [r2, #0]
 800c7d4:	4650      	mov	r0, sl
 800c7d6:	b019      	add	sp, #100	@ 0x64
 800c7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	f77f ae37 	ble.w	800c452 <_dtoa_r+0x7b2>
 800c7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	e655      	b.n	800c498 <_dtoa_r+0x7f8>
 800c7ec:	9b00      	ldr	r3, [sp, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f77f aed6 	ble.w	800c5a0 <_dtoa_r+0x900>
 800c7f4:	4656      	mov	r6, sl
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	4648      	mov	r0, r9
 800c7fa:	f7ff f9c9 	bl	800bb90 <quorem>
 800c7fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c802:	f806 8b01 	strb.w	r8, [r6], #1
 800c806:	9b00      	ldr	r3, [sp, #0]
 800c808:	eba6 020a 	sub.w	r2, r6, sl
 800c80c:	4293      	cmp	r3, r2
 800c80e:	ddb3      	ble.n	800c778 <_dtoa_r+0xad8>
 800c810:	4649      	mov	r1, r9
 800c812:	2300      	movs	r3, #0
 800c814:	220a      	movs	r2, #10
 800c816:	4658      	mov	r0, fp
 800c818:	f000 fcb4 	bl	800d184 <__multadd>
 800c81c:	4681      	mov	r9, r0
 800c81e:	e7ea      	b.n	800c7f6 <_dtoa_r+0xb56>
 800c820:	0800e809 	.word	0x0800e809
 800c824:	0800e78d 	.word	0x0800e78d

0800c828 <_free_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4605      	mov	r5, r0
 800c82c:	2900      	cmp	r1, #0
 800c82e:	d041      	beq.n	800c8b4 <_free_r+0x8c>
 800c830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c834:	1f0c      	subs	r4, r1, #4
 800c836:	2b00      	cmp	r3, #0
 800c838:	bfb8      	it	lt
 800c83a:	18e4      	addlt	r4, r4, r3
 800c83c:	f000 fc34 	bl	800d0a8 <__malloc_lock>
 800c840:	4a1d      	ldr	r2, [pc, #116]	@ (800c8b8 <_free_r+0x90>)
 800c842:	6813      	ldr	r3, [r2, #0]
 800c844:	b933      	cbnz	r3, 800c854 <_free_r+0x2c>
 800c846:	6063      	str	r3, [r4, #4]
 800c848:	6014      	str	r4, [r2, #0]
 800c84a:	4628      	mov	r0, r5
 800c84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c850:	f000 bc30 	b.w	800d0b4 <__malloc_unlock>
 800c854:	42a3      	cmp	r3, r4
 800c856:	d908      	bls.n	800c86a <_free_r+0x42>
 800c858:	6820      	ldr	r0, [r4, #0]
 800c85a:	1821      	adds	r1, r4, r0
 800c85c:	428b      	cmp	r3, r1
 800c85e:	bf01      	itttt	eq
 800c860:	6819      	ldreq	r1, [r3, #0]
 800c862:	685b      	ldreq	r3, [r3, #4]
 800c864:	1809      	addeq	r1, r1, r0
 800c866:	6021      	streq	r1, [r4, #0]
 800c868:	e7ed      	b.n	800c846 <_free_r+0x1e>
 800c86a:	461a      	mov	r2, r3
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	b10b      	cbz	r3, 800c874 <_free_r+0x4c>
 800c870:	42a3      	cmp	r3, r4
 800c872:	d9fa      	bls.n	800c86a <_free_r+0x42>
 800c874:	6811      	ldr	r1, [r2, #0]
 800c876:	1850      	adds	r0, r2, r1
 800c878:	42a0      	cmp	r0, r4
 800c87a:	d10b      	bne.n	800c894 <_free_r+0x6c>
 800c87c:	6820      	ldr	r0, [r4, #0]
 800c87e:	4401      	add	r1, r0
 800c880:	1850      	adds	r0, r2, r1
 800c882:	4283      	cmp	r3, r0
 800c884:	6011      	str	r1, [r2, #0]
 800c886:	d1e0      	bne.n	800c84a <_free_r+0x22>
 800c888:	6818      	ldr	r0, [r3, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	6053      	str	r3, [r2, #4]
 800c88e:	4408      	add	r0, r1
 800c890:	6010      	str	r0, [r2, #0]
 800c892:	e7da      	b.n	800c84a <_free_r+0x22>
 800c894:	d902      	bls.n	800c89c <_free_r+0x74>
 800c896:	230c      	movs	r3, #12
 800c898:	602b      	str	r3, [r5, #0]
 800c89a:	e7d6      	b.n	800c84a <_free_r+0x22>
 800c89c:	6820      	ldr	r0, [r4, #0]
 800c89e:	1821      	adds	r1, r4, r0
 800c8a0:	428b      	cmp	r3, r1
 800c8a2:	bf04      	itt	eq
 800c8a4:	6819      	ldreq	r1, [r3, #0]
 800c8a6:	685b      	ldreq	r3, [r3, #4]
 800c8a8:	6063      	str	r3, [r4, #4]
 800c8aa:	bf04      	itt	eq
 800c8ac:	1809      	addeq	r1, r1, r0
 800c8ae:	6021      	streq	r1, [r4, #0]
 800c8b0:	6054      	str	r4, [r2, #4]
 800c8b2:	e7ca      	b.n	800c84a <_free_r+0x22>
 800c8b4:	bd38      	pop	{r3, r4, r5, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20000bac 	.word	0x20000bac

0800c8bc <rshift>:
 800c8bc:	6903      	ldr	r3, [r0, #16]
 800c8be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c8c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c8ca:	f100 0414 	add.w	r4, r0, #20
 800c8ce:	dd45      	ble.n	800c95c <rshift+0xa0>
 800c8d0:	f011 011f 	ands.w	r1, r1, #31
 800c8d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c8d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c8dc:	d10c      	bne.n	800c8f8 <rshift+0x3c>
 800c8de:	f100 0710 	add.w	r7, r0, #16
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	42b1      	cmp	r1, r6
 800c8e6:	d334      	bcc.n	800c952 <rshift+0x96>
 800c8e8:	1a9b      	subs	r3, r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	1eea      	subs	r2, r5, #3
 800c8ee:	4296      	cmp	r6, r2
 800c8f0:	bf38      	it	cc
 800c8f2:	2300      	movcc	r3, #0
 800c8f4:	4423      	add	r3, r4
 800c8f6:	e015      	b.n	800c924 <rshift+0x68>
 800c8f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c8fc:	f1c1 0820 	rsb	r8, r1, #32
 800c900:	40cf      	lsrs	r7, r1
 800c902:	f105 0e04 	add.w	lr, r5, #4
 800c906:	46a1      	mov	r9, r4
 800c908:	4576      	cmp	r6, lr
 800c90a:	46f4      	mov	ip, lr
 800c90c:	d815      	bhi.n	800c93a <rshift+0x7e>
 800c90e:	1a9a      	subs	r2, r3, r2
 800c910:	0092      	lsls	r2, r2, #2
 800c912:	3a04      	subs	r2, #4
 800c914:	3501      	adds	r5, #1
 800c916:	42ae      	cmp	r6, r5
 800c918:	bf38      	it	cc
 800c91a:	2200      	movcc	r2, #0
 800c91c:	18a3      	adds	r3, r4, r2
 800c91e:	50a7      	str	r7, [r4, r2]
 800c920:	b107      	cbz	r7, 800c924 <rshift+0x68>
 800c922:	3304      	adds	r3, #4
 800c924:	1b1a      	subs	r2, r3, r4
 800c926:	42a3      	cmp	r3, r4
 800c928:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c92c:	bf08      	it	eq
 800c92e:	2300      	moveq	r3, #0
 800c930:	6102      	str	r2, [r0, #16]
 800c932:	bf08      	it	eq
 800c934:	6143      	streq	r3, [r0, #20]
 800c936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c93a:	f8dc c000 	ldr.w	ip, [ip]
 800c93e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c942:	ea4c 0707 	orr.w	r7, ip, r7
 800c946:	f849 7b04 	str.w	r7, [r9], #4
 800c94a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c94e:	40cf      	lsrs	r7, r1
 800c950:	e7da      	b.n	800c908 <rshift+0x4c>
 800c952:	f851 cb04 	ldr.w	ip, [r1], #4
 800c956:	f847 cf04 	str.w	ip, [r7, #4]!
 800c95a:	e7c3      	b.n	800c8e4 <rshift+0x28>
 800c95c:	4623      	mov	r3, r4
 800c95e:	e7e1      	b.n	800c924 <rshift+0x68>

0800c960 <__hexdig_fun>:
 800c960:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c964:	2b09      	cmp	r3, #9
 800c966:	d802      	bhi.n	800c96e <__hexdig_fun+0xe>
 800c968:	3820      	subs	r0, #32
 800c96a:	b2c0      	uxtb	r0, r0
 800c96c:	4770      	bx	lr
 800c96e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c972:	2b05      	cmp	r3, #5
 800c974:	d801      	bhi.n	800c97a <__hexdig_fun+0x1a>
 800c976:	3847      	subs	r0, #71	@ 0x47
 800c978:	e7f7      	b.n	800c96a <__hexdig_fun+0xa>
 800c97a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c97e:	2b05      	cmp	r3, #5
 800c980:	d801      	bhi.n	800c986 <__hexdig_fun+0x26>
 800c982:	3827      	subs	r0, #39	@ 0x27
 800c984:	e7f1      	b.n	800c96a <__hexdig_fun+0xa>
 800c986:	2000      	movs	r0, #0
 800c988:	4770      	bx	lr
	...

0800c98c <__gethex>:
 800c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c990:	b085      	sub	sp, #20
 800c992:	468a      	mov	sl, r1
 800c994:	9302      	str	r3, [sp, #8]
 800c996:	680b      	ldr	r3, [r1, #0]
 800c998:	9001      	str	r0, [sp, #4]
 800c99a:	4690      	mov	r8, r2
 800c99c:	1c9c      	adds	r4, r3, #2
 800c99e:	46a1      	mov	r9, r4
 800c9a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c9a4:	2830      	cmp	r0, #48	@ 0x30
 800c9a6:	d0fa      	beq.n	800c99e <__gethex+0x12>
 800c9a8:	eba9 0303 	sub.w	r3, r9, r3
 800c9ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800c9b0:	f7ff ffd6 	bl	800c960 <__hexdig_fun>
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d168      	bne.n	800ca8c <__gethex+0x100>
 800c9ba:	49a0      	ldr	r1, [pc, #640]	@ (800cc3c <__gethex+0x2b0>)
 800c9bc:	2201      	movs	r2, #1
 800c9be:	4648      	mov	r0, r9
 800c9c0:	f7ff f843 	bl	800ba4a <strncmp>
 800c9c4:	4607      	mov	r7, r0
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d167      	bne.n	800ca9a <__gethex+0x10e>
 800c9ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c9ce:	4626      	mov	r6, r4
 800c9d0:	f7ff ffc6 	bl	800c960 <__hexdig_fun>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d062      	beq.n	800ca9e <__gethex+0x112>
 800c9d8:	4623      	mov	r3, r4
 800c9da:	7818      	ldrb	r0, [r3, #0]
 800c9dc:	2830      	cmp	r0, #48	@ 0x30
 800c9de:	4699      	mov	r9, r3
 800c9e0:	f103 0301 	add.w	r3, r3, #1
 800c9e4:	d0f9      	beq.n	800c9da <__gethex+0x4e>
 800c9e6:	f7ff ffbb 	bl	800c960 <__hexdig_fun>
 800c9ea:	fab0 f580 	clz	r5, r0
 800c9ee:	096d      	lsrs	r5, r5, #5
 800c9f0:	f04f 0b01 	mov.w	fp, #1
 800c9f4:	464a      	mov	r2, r9
 800c9f6:	4616      	mov	r6, r2
 800c9f8:	3201      	adds	r2, #1
 800c9fa:	7830      	ldrb	r0, [r6, #0]
 800c9fc:	f7ff ffb0 	bl	800c960 <__hexdig_fun>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d1f8      	bne.n	800c9f6 <__gethex+0x6a>
 800ca04:	498d      	ldr	r1, [pc, #564]	@ (800cc3c <__gethex+0x2b0>)
 800ca06:	2201      	movs	r2, #1
 800ca08:	4630      	mov	r0, r6
 800ca0a:	f7ff f81e 	bl	800ba4a <strncmp>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d13f      	bne.n	800ca92 <__gethex+0x106>
 800ca12:	b944      	cbnz	r4, 800ca26 <__gethex+0x9a>
 800ca14:	1c74      	adds	r4, r6, #1
 800ca16:	4622      	mov	r2, r4
 800ca18:	4616      	mov	r6, r2
 800ca1a:	3201      	adds	r2, #1
 800ca1c:	7830      	ldrb	r0, [r6, #0]
 800ca1e:	f7ff ff9f 	bl	800c960 <__hexdig_fun>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d1f8      	bne.n	800ca18 <__gethex+0x8c>
 800ca26:	1ba4      	subs	r4, r4, r6
 800ca28:	00a7      	lsls	r7, r4, #2
 800ca2a:	7833      	ldrb	r3, [r6, #0]
 800ca2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ca30:	2b50      	cmp	r3, #80	@ 0x50
 800ca32:	d13e      	bne.n	800cab2 <__gethex+0x126>
 800ca34:	7873      	ldrb	r3, [r6, #1]
 800ca36:	2b2b      	cmp	r3, #43	@ 0x2b
 800ca38:	d033      	beq.n	800caa2 <__gethex+0x116>
 800ca3a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ca3c:	d034      	beq.n	800caa8 <__gethex+0x11c>
 800ca3e:	1c71      	adds	r1, r6, #1
 800ca40:	2400      	movs	r4, #0
 800ca42:	7808      	ldrb	r0, [r1, #0]
 800ca44:	f7ff ff8c 	bl	800c960 <__hexdig_fun>
 800ca48:	1e43      	subs	r3, r0, #1
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	2b18      	cmp	r3, #24
 800ca4e:	d830      	bhi.n	800cab2 <__gethex+0x126>
 800ca50:	f1a0 0210 	sub.w	r2, r0, #16
 800ca54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca58:	f7ff ff82 	bl	800c960 <__hexdig_fun>
 800ca5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ca60:	fa5f fc8c 	uxtb.w	ip, ip
 800ca64:	f1bc 0f18 	cmp.w	ip, #24
 800ca68:	f04f 030a 	mov.w	r3, #10
 800ca6c:	d91e      	bls.n	800caac <__gethex+0x120>
 800ca6e:	b104      	cbz	r4, 800ca72 <__gethex+0xe6>
 800ca70:	4252      	negs	r2, r2
 800ca72:	4417      	add	r7, r2
 800ca74:	f8ca 1000 	str.w	r1, [sl]
 800ca78:	b1ed      	cbz	r5, 800cab6 <__gethex+0x12a>
 800ca7a:	f1bb 0f00 	cmp.w	fp, #0
 800ca7e:	bf0c      	ite	eq
 800ca80:	2506      	moveq	r5, #6
 800ca82:	2500      	movne	r5, #0
 800ca84:	4628      	mov	r0, r5
 800ca86:	b005      	add	sp, #20
 800ca88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8c:	2500      	movs	r5, #0
 800ca8e:	462c      	mov	r4, r5
 800ca90:	e7b0      	b.n	800c9f4 <__gethex+0x68>
 800ca92:	2c00      	cmp	r4, #0
 800ca94:	d1c7      	bne.n	800ca26 <__gethex+0x9a>
 800ca96:	4627      	mov	r7, r4
 800ca98:	e7c7      	b.n	800ca2a <__gethex+0x9e>
 800ca9a:	464e      	mov	r6, r9
 800ca9c:	462f      	mov	r7, r5
 800ca9e:	2501      	movs	r5, #1
 800caa0:	e7c3      	b.n	800ca2a <__gethex+0x9e>
 800caa2:	2400      	movs	r4, #0
 800caa4:	1cb1      	adds	r1, r6, #2
 800caa6:	e7cc      	b.n	800ca42 <__gethex+0xb6>
 800caa8:	2401      	movs	r4, #1
 800caaa:	e7fb      	b.n	800caa4 <__gethex+0x118>
 800caac:	fb03 0002 	mla	r0, r3, r2, r0
 800cab0:	e7ce      	b.n	800ca50 <__gethex+0xc4>
 800cab2:	4631      	mov	r1, r6
 800cab4:	e7de      	b.n	800ca74 <__gethex+0xe8>
 800cab6:	eba6 0309 	sub.w	r3, r6, r9
 800caba:	3b01      	subs	r3, #1
 800cabc:	4629      	mov	r1, r5
 800cabe:	2b07      	cmp	r3, #7
 800cac0:	dc0a      	bgt.n	800cad8 <__gethex+0x14c>
 800cac2:	9801      	ldr	r0, [sp, #4]
 800cac4:	f000 fafc 	bl	800d0c0 <_Balloc>
 800cac8:	4604      	mov	r4, r0
 800caca:	b940      	cbnz	r0, 800cade <__gethex+0x152>
 800cacc:	4b5c      	ldr	r3, [pc, #368]	@ (800cc40 <__gethex+0x2b4>)
 800cace:	4602      	mov	r2, r0
 800cad0:	21e4      	movs	r1, #228	@ 0xe4
 800cad2:	485c      	ldr	r0, [pc, #368]	@ (800cc44 <__gethex+0x2b8>)
 800cad4:	f001 f9e0 	bl	800de98 <__assert_func>
 800cad8:	3101      	adds	r1, #1
 800cada:	105b      	asrs	r3, r3, #1
 800cadc:	e7ef      	b.n	800cabe <__gethex+0x132>
 800cade:	f100 0a14 	add.w	sl, r0, #20
 800cae2:	2300      	movs	r3, #0
 800cae4:	4655      	mov	r5, sl
 800cae6:	469b      	mov	fp, r3
 800cae8:	45b1      	cmp	r9, r6
 800caea:	d337      	bcc.n	800cb5c <__gethex+0x1d0>
 800caec:	f845 bb04 	str.w	fp, [r5], #4
 800caf0:	eba5 050a 	sub.w	r5, r5, sl
 800caf4:	10ad      	asrs	r5, r5, #2
 800caf6:	6125      	str	r5, [r4, #16]
 800caf8:	4658      	mov	r0, fp
 800cafa:	f000 fbd3 	bl	800d2a4 <__hi0bits>
 800cafe:	016d      	lsls	r5, r5, #5
 800cb00:	f8d8 6000 	ldr.w	r6, [r8]
 800cb04:	1a2d      	subs	r5, r5, r0
 800cb06:	42b5      	cmp	r5, r6
 800cb08:	dd54      	ble.n	800cbb4 <__gethex+0x228>
 800cb0a:	1bad      	subs	r5, r5, r6
 800cb0c:	4629      	mov	r1, r5
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f000 ff67 	bl	800d9e2 <__any_on>
 800cb14:	4681      	mov	r9, r0
 800cb16:	b178      	cbz	r0, 800cb38 <__gethex+0x1ac>
 800cb18:	1e6b      	subs	r3, r5, #1
 800cb1a:	1159      	asrs	r1, r3, #5
 800cb1c:	f003 021f 	and.w	r2, r3, #31
 800cb20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb24:	f04f 0901 	mov.w	r9, #1
 800cb28:	fa09 f202 	lsl.w	r2, r9, r2
 800cb2c:	420a      	tst	r2, r1
 800cb2e:	d003      	beq.n	800cb38 <__gethex+0x1ac>
 800cb30:	454b      	cmp	r3, r9
 800cb32:	dc36      	bgt.n	800cba2 <__gethex+0x216>
 800cb34:	f04f 0902 	mov.w	r9, #2
 800cb38:	4629      	mov	r1, r5
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f7ff febe 	bl	800c8bc <rshift>
 800cb40:	442f      	add	r7, r5
 800cb42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb46:	42bb      	cmp	r3, r7
 800cb48:	da42      	bge.n	800cbd0 <__gethex+0x244>
 800cb4a:	9801      	ldr	r0, [sp, #4]
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	f000 faf7 	bl	800d140 <_Bfree>
 800cb52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb54:	2300      	movs	r3, #0
 800cb56:	6013      	str	r3, [r2, #0]
 800cb58:	25a3      	movs	r5, #163	@ 0xa3
 800cb5a:	e793      	b.n	800ca84 <__gethex+0xf8>
 800cb5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cb60:	2a2e      	cmp	r2, #46	@ 0x2e
 800cb62:	d012      	beq.n	800cb8a <__gethex+0x1fe>
 800cb64:	2b20      	cmp	r3, #32
 800cb66:	d104      	bne.n	800cb72 <__gethex+0x1e6>
 800cb68:	f845 bb04 	str.w	fp, [r5], #4
 800cb6c:	f04f 0b00 	mov.w	fp, #0
 800cb70:	465b      	mov	r3, fp
 800cb72:	7830      	ldrb	r0, [r6, #0]
 800cb74:	9303      	str	r3, [sp, #12]
 800cb76:	f7ff fef3 	bl	800c960 <__hexdig_fun>
 800cb7a:	9b03      	ldr	r3, [sp, #12]
 800cb7c:	f000 000f 	and.w	r0, r0, #15
 800cb80:	4098      	lsls	r0, r3
 800cb82:	ea4b 0b00 	orr.w	fp, fp, r0
 800cb86:	3304      	adds	r3, #4
 800cb88:	e7ae      	b.n	800cae8 <__gethex+0x15c>
 800cb8a:	45b1      	cmp	r9, r6
 800cb8c:	d8ea      	bhi.n	800cb64 <__gethex+0x1d8>
 800cb8e:	492b      	ldr	r1, [pc, #172]	@ (800cc3c <__gethex+0x2b0>)
 800cb90:	9303      	str	r3, [sp, #12]
 800cb92:	2201      	movs	r2, #1
 800cb94:	4630      	mov	r0, r6
 800cb96:	f7fe ff58 	bl	800ba4a <strncmp>
 800cb9a:	9b03      	ldr	r3, [sp, #12]
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d1e1      	bne.n	800cb64 <__gethex+0x1d8>
 800cba0:	e7a2      	b.n	800cae8 <__gethex+0x15c>
 800cba2:	1ea9      	subs	r1, r5, #2
 800cba4:	4620      	mov	r0, r4
 800cba6:	f000 ff1c 	bl	800d9e2 <__any_on>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d0c2      	beq.n	800cb34 <__gethex+0x1a8>
 800cbae:	f04f 0903 	mov.w	r9, #3
 800cbb2:	e7c1      	b.n	800cb38 <__gethex+0x1ac>
 800cbb4:	da09      	bge.n	800cbca <__gethex+0x23e>
 800cbb6:	1b75      	subs	r5, r6, r5
 800cbb8:	4621      	mov	r1, r4
 800cbba:	9801      	ldr	r0, [sp, #4]
 800cbbc:	462a      	mov	r2, r5
 800cbbe:	f000 fcd7 	bl	800d570 <__lshift>
 800cbc2:	1b7f      	subs	r7, r7, r5
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	f100 0a14 	add.w	sl, r0, #20
 800cbca:	f04f 0900 	mov.w	r9, #0
 800cbce:	e7b8      	b.n	800cb42 <__gethex+0x1b6>
 800cbd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cbd4:	42bd      	cmp	r5, r7
 800cbd6:	dd6f      	ble.n	800ccb8 <__gethex+0x32c>
 800cbd8:	1bed      	subs	r5, r5, r7
 800cbda:	42ae      	cmp	r6, r5
 800cbdc:	dc34      	bgt.n	800cc48 <__gethex+0x2bc>
 800cbde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d022      	beq.n	800cc2c <__gethex+0x2a0>
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d024      	beq.n	800cc34 <__gethex+0x2a8>
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d115      	bne.n	800cc1a <__gethex+0x28e>
 800cbee:	42ae      	cmp	r6, r5
 800cbf0:	d113      	bne.n	800cc1a <__gethex+0x28e>
 800cbf2:	2e01      	cmp	r6, #1
 800cbf4:	d10b      	bne.n	800cc0e <__gethex+0x282>
 800cbf6:	9a02      	ldr	r2, [sp, #8]
 800cbf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbfc:	6013      	str	r3, [r2, #0]
 800cbfe:	2301      	movs	r3, #1
 800cc00:	6123      	str	r3, [r4, #16]
 800cc02:	f8ca 3000 	str.w	r3, [sl]
 800cc06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc08:	2562      	movs	r5, #98	@ 0x62
 800cc0a:	601c      	str	r4, [r3, #0]
 800cc0c:	e73a      	b.n	800ca84 <__gethex+0xf8>
 800cc0e:	1e71      	subs	r1, r6, #1
 800cc10:	4620      	mov	r0, r4
 800cc12:	f000 fee6 	bl	800d9e2 <__any_on>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d1ed      	bne.n	800cbf6 <__gethex+0x26a>
 800cc1a:	9801      	ldr	r0, [sp, #4]
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	f000 fa8f 	bl	800d140 <_Bfree>
 800cc22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc24:	2300      	movs	r3, #0
 800cc26:	6013      	str	r3, [r2, #0]
 800cc28:	2550      	movs	r5, #80	@ 0x50
 800cc2a:	e72b      	b.n	800ca84 <__gethex+0xf8>
 800cc2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1f3      	bne.n	800cc1a <__gethex+0x28e>
 800cc32:	e7e0      	b.n	800cbf6 <__gethex+0x26a>
 800cc34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1dd      	bne.n	800cbf6 <__gethex+0x26a>
 800cc3a:	e7ee      	b.n	800cc1a <__gethex+0x28e>
 800cc3c:	0800e5f8 	.word	0x0800e5f8
 800cc40:	0800e809 	.word	0x0800e809
 800cc44:	0800e81a 	.word	0x0800e81a
 800cc48:	1e6f      	subs	r7, r5, #1
 800cc4a:	f1b9 0f00 	cmp.w	r9, #0
 800cc4e:	d130      	bne.n	800ccb2 <__gethex+0x326>
 800cc50:	b127      	cbz	r7, 800cc5c <__gethex+0x2d0>
 800cc52:	4639      	mov	r1, r7
 800cc54:	4620      	mov	r0, r4
 800cc56:	f000 fec4 	bl	800d9e2 <__any_on>
 800cc5a:	4681      	mov	r9, r0
 800cc5c:	117a      	asrs	r2, r7, #5
 800cc5e:	2301      	movs	r3, #1
 800cc60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cc64:	f007 071f 	and.w	r7, r7, #31
 800cc68:	40bb      	lsls	r3, r7
 800cc6a:	4213      	tst	r3, r2
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	4620      	mov	r0, r4
 800cc70:	bf18      	it	ne
 800cc72:	f049 0902 	orrne.w	r9, r9, #2
 800cc76:	f7ff fe21 	bl	800c8bc <rshift>
 800cc7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cc7e:	1b76      	subs	r6, r6, r5
 800cc80:	2502      	movs	r5, #2
 800cc82:	f1b9 0f00 	cmp.w	r9, #0
 800cc86:	d047      	beq.n	800cd18 <__gethex+0x38c>
 800cc88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d015      	beq.n	800ccbc <__gethex+0x330>
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d017      	beq.n	800ccc4 <__gethex+0x338>
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d109      	bne.n	800ccac <__gethex+0x320>
 800cc98:	f019 0f02 	tst.w	r9, #2
 800cc9c:	d006      	beq.n	800ccac <__gethex+0x320>
 800cc9e:	f8da 3000 	ldr.w	r3, [sl]
 800cca2:	ea49 0903 	orr.w	r9, r9, r3
 800cca6:	f019 0f01 	tst.w	r9, #1
 800ccaa:	d10e      	bne.n	800ccca <__gethex+0x33e>
 800ccac:	f045 0510 	orr.w	r5, r5, #16
 800ccb0:	e032      	b.n	800cd18 <__gethex+0x38c>
 800ccb2:	f04f 0901 	mov.w	r9, #1
 800ccb6:	e7d1      	b.n	800cc5c <__gethex+0x2d0>
 800ccb8:	2501      	movs	r5, #1
 800ccba:	e7e2      	b.n	800cc82 <__gethex+0x2f6>
 800ccbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccbe:	f1c3 0301 	rsb	r3, r3, #1
 800ccc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d0f0      	beq.n	800ccac <__gethex+0x320>
 800ccca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ccce:	f104 0314 	add.w	r3, r4, #20
 800ccd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ccd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ccda:	f04f 0c00 	mov.w	ip, #0
 800ccde:	4618      	mov	r0, r3
 800cce0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cce4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cce8:	d01b      	beq.n	800cd22 <__gethex+0x396>
 800ccea:	3201      	adds	r2, #1
 800ccec:	6002      	str	r2, [r0, #0]
 800ccee:	2d02      	cmp	r5, #2
 800ccf0:	f104 0314 	add.w	r3, r4, #20
 800ccf4:	d13c      	bne.n	800cd70 <__gethex+0x3e4>
 800ccf6:	f8d8 2000 	ldr.w	r2, [r8]
 800ccfa:	3a01      	subs	r2, #1
 800ccfc:	42b2      	cmp	r2, r6
 800ccfe:	d109      	bne.n	800cd14 <__gethex+0x388>
 800cd00:	1171      	asrs	r1, r6, #5
 800cd02:	2201      	movs	r2, #1
 800cd04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd08:	f006 061f 	and.w	r6, r6, #31
 800cd0c:	fa02 f606 	lsl.w	r6, r2, r6
 800cd10:	421e      	tst	r6, r3
 800cd12:	d13a      	bne.n	800cd8a <__gethex+0x3fe>
 800cd14:	f045 0520 	orr.w	r5, r5, #32
 800cd18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd1a:	601c      	str	r4, [r3, #0]
 800cd1c:	9b02      	ldr	r3, [sp, #8]
 800cd1e:	601f      	str	r7, [r3, #0]
 800cd20:	e6b0      	b.n	800ca84 <__gethex+0xf8>
 800cd22:	4299      	cmp	r1, r3
 800cd24:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd28:	d8d9      	bhi.n	800ccde <__gethex+0x352>
 800cd2a:	68a3      	ldr	r3, [r4, #8]
 800cd2c:	459b      	cmp	fp, r3
 800cd2e:	db17      	blt.n	800cd60 <__gethex+0x3d4>
 800cd30:	6861      	ldr	r1, [r4, #4]
 800cd32:	9801      	ldr	r0, [sp, #4]
 800cd34:	3101      	adds	r1, #1
 800cd36:	f000 f9c3 	bl	800d0c0 <_Balloc>
 800cd3a:	4681      	mov	r9, r0
 800cd3c:	b918      	cbnz	r0, 800cd46 <__gethex+0x3ba>
 800cd3e:	4b1a      	ldr	r3, [pc, #104]	@ (800cda8 <__gethex+0x41c>)
 800cd40:	4602      	mov	r2, r0
 800cd42:	2184      	movs	r1, #132	@ 0x84
 800cd44:	e6c5      	b.n	800cad2 <__gethex+0x146>
 800cd46:	6922      	ldr	r2, [r4, #16]
 800cd48:	3202      	adds	r2, #2
 800cd4a:	f104 010c 	add.w	r1, r4, #12
 800cd4e:	0092      	lsls	r2, r2, #2
 800cd50:	300c      	adds	r0, #12
 800cd52:	f7fe ff04 	bl	800bb5e <memcpy>
 800cd56:	4621      	mov	r1, r4
 800cd58:	9801      	ldr	r0, [sp, #4]
 800cd5a:	f000 f9f1 	bl	800d140 <_Bfree>
 800cd5e:	464c      	mov	r4, r9
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	1c5a      	adds	r2, r3, #1
 800cd64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd68:	6122      	str	r2, [r4, #16]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	615a      	str	r2, [r3, #20]
 800cd6e:	e7be      	b.n	800ccee <__gethex+0x362>
 800cd70:	6922      	ldr	r2, [r4, #16]
 800cd72:	455a      	cmp	r2, fp
 800cd74:	dd0b      	ble.n	800cd8e <__gethex+0x402>
 800cd76:	2101      	movs	r1, #1
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f7ff fd9f 	bl	800c8bc <rshift>
 800cd7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd82:	3701      	adds	r7, #1
 800cd84:	42bb      	cmp	r3, r7
 800cd86:	f6ff aee0 	blt.w	800cb4a <__gethex+0x1be>
 800cd8a:	2501      	movs	r5, #1
 800cd8c:	e7c2      	b.n	800cd14 <__gethex+0x388>
 800cd8e:	f016 061f 	ands.w	r6, r6, #31
 800cd92:	d0fa      	beq.n	800cd8a <__gethex+0x3fe>
 800cd94:	4453      	add	r3, sl
 800cd96:	f1c6 0620 	rsb	r6, r6, #32
 800cd9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd9e:	f000 fa81 	bl	800d2a4 <__hi0bits>
 800cda2:	42b0      	cmp	r0, r6
 800cda4:	dbe7      	blt.n	800cd76 <__gethex+0x3ea>
 800cda6:	e7f0      	b.n	800cd8a <__gethex+0x3fe>
 800cda8:	0800e809 	.word	0x0800e809

0800cdac <L_shift>:
 800cdac:	f1c2 0208 	rsb	r2, r2, #8
 800cdb0:	0092      	lsls	r2, r2, #2
 800cdb2:	b570      	push	{r4, r5, r6, lr}
 800cdb4:	f1c2 0620 	rsb	r6, r2, #32
 800cdb8:	6843      	ldr	r3, [r0, #4]
 800cdba:	6804      	ldr	r4, [r0, #0]
 800cdbc:	fa03 f506 	lsl.w	r5, r3, r6
 800cdc0:	432c      	orrs	r4, r5
 800cdc2:	40d3      	lsrs	r3, r2
 800cdc4:	6004      	str	r4, [r0, #0]
 800cdc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdca:	4288      	cmp	r0, r1
 800cdcc:	d3f4      	bcc.n	800cdb8 <L_shift+0xc>
 800cdce:	bd70      	pop	{r4, r5, r6, pc}

0800cdd0 <__match>:
 800cdd0:	b530      	push	{r4, r5, lr}
 800cdd2:	6803      	ldr	r3, [r0, #0]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdda:	b914      	cbnz	r4, 800cde2 <__match+0x12>
 800cddc:	6003      	str	r3, [r0, #0]
 800cdde:	2001      	movs	r0, #1
 800cde0:	bd30      	pop	{r4, r5, pc}
 800cde2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cde6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cdea:	2d19      	cmp	r5, #25
 800cdec:	bf98      	it	ls
 800cdee:	3220      	addls	r2, #32
 800cdf0:	42a2      	cmp	r2, r4
 800cdf2:	d0f0      	beq.n	800cdd6 <__match+0x6>
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	e7f3      	b.n	800cde0 <__match+0x10>

0800cdf8 <__hexnan>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	680b      	ldr	r3, [r1, #0]
 800cdfe:	6801      	ldr	r1, [r0, #0]
 800ce00:	115e      	asrs	r6, r3, #5
 800ce02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce06:	f013 031f 	ands.w	r3, r3, #31
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	bf18      	it	ne
 800ce0e:	3604      	addne	r6, #4
 800ce10:	2500      	movs	r5, #0
 800ce12:	1f37      	subs	r7, r6, #4
 800ce14:	4682      	mov	sl, r0
 800ce16:	4690      	mov	r8, r2
 800ce18:	9301      	str	r3, [sp, #4]
 800ce1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce1e:	46b9      	mov	r9, r7
 800ce20:	463c      	mov	r4, r7
 800ce22:	9502      	str	r5, [sp, #8]
 800ce24:	46ab      	mov	fp, r5
 800ce26:	784a      	ldrb	r2, [r1, #1]
 800ce28:	1c4b      	adds	r3, r1, #1
 800ce2a:	9303      	str	r3, [sp, #12]
 800ce2c:	b342      	cbz	r2, 800ce80 <__hexnan+0x88>
 800ce2e:	4610      	mov	r0, r2
 800ce30:	9105      	str	r1, [sp, #20]
 800ce32:	9204      	str	r2, [sp, #16]
 800ce34:	f7ff fd94 	bl	800c960 <__hexdig_fun>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d151      	bne.n	800cee0 <__hexnan+0xe8>
 800ce3c:	9a04      	ldr	r2, [sp, #16]
 800ce3e:	9905      	ldr	r1, [sp, #20]
 800ce40:	2a20      	cmp	r2, #32
 800ce42:	d818      	bhi.n	800ce76 <__hexnan+0x7e>
 800ce44:	9b02      	ldr	r3, [sp, #8]
 800ce46:	459b      	cmp	fp, r3
 800ce48:	dd13      	ble.n	800ce72 <__hexnan+0x7a>
 800ce4a:	454c      	cmp	r4, r9
 800ce4c:	d206      	bcs.n	800ce5c <__hexnan+0x64>
 800ce4e:	2d07      	cmp	r5, #7
 800ce50:	dc04      	bgt.n	800ce5c <__hexnan+0x64>
 800ce52:	462a      	mov	r2, r5
 800ce54:	4649      	mov	r1, r9
 800ce56:	4620      	mov	r0, r4
 800ce58:	f7ff ffa8 	bl	800cdac <L_shift>
 800ce5c:	4544      	cmp	r4, r8
 800ce5e:	d952      	bls.n	800cf06 <__hexnan+0x10e>
 800ce60:	2300      	movs	r3, #0
 800ce62:	f1a4 0904 	sub.w	r9, r4, #4
 800ce66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce6a:	f8cd b008 	str.w	fp, [sp, #8]
 800ce6e:	464c      	mov	r4, r9
 800ce70:	461d      	mov	r5, r3
 800ce72:	9903      	ldr	r1, [sp, #12]
 800ce74:	e7d7      	b.n	800ce26 <__hexnan+0x2e>
 800ce76:	2a29      	cmp	r2, #41	@ 0x29
 800ce78:	d157      	bne.n	800cf2a <__hexnan+0x132>
 800ce7a:	3102      	adds	r1, #2
 800ce7c:	f8ca 1000 	str.w	r1, [sl]
 800ce80:	f1bb 0f00 	cmp.w	fp, #0
 800ce84:	d051      	beq.n	800cf2a <__hexnan+0x132>
 800ce86:	454c      	cmp	r4, r9
 800ce88:	d206      	bcs.n	800ce98 <__hexnan+0xa0>
 800ce8a:	2d07      	cmp	r5, #7
 800ce8c:	dc04      	bgt.n	800ce98 <__hexnan+0xa0>
 800ce8e:	462a      	mov	r2, r5
 800ce90:	4649      	mov	r1, r9
 800ce92:	4620      	mov	r0, r4
 800ce94:	f7ff ff8a 	bl	800cdac <L_shift>
 800ce98:	4544      	cmp	r4, r8
 800ce9a:	d936      	bls.n	800cf0a <__hexnan+0x112>
 800ce9c:	f1a8 0204 	sub.w	r2, r8, #4
 800cea0:	4623      	mov	r3, r4
 800cea2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cea6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ceaa:	429f      	cmp	r7, r3
 800ceac:	d2f9      	bcs.n	800cea2 <__hexnan+0xaa>
 800ceae:	1b3b      	subs	r3, r7, r4
 800ceb0:	f023 0303 	bic.w	r3, r3, #3
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	3401      	adds	r4, #1
 800ceb8:	3e03      	subs	r6, #3
 800ceba:	42b4      	cmp	r4, r6
 800cebc:	bf88      	it	hi
 800cebe:	2304      	movhi	r3, #4
 800cec0:	4443      	add	r3, r8
 800cec2:	2200      	movs	r2, #0
 800cec4:	f843 2b04 	str.w	r2, [r3], #4
 800cec8:	429f      	cmp	r7, r3
 800ceca:	d2fb      	bcs.n	800cec4 <__hexnan+0xcc>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	b91b      	cbnz	r3, 800ced8 <__hexnan+0xe0>
 800ced0:	4547      	cmp	r7, r8
 800ced2:	d128      	bne.n	800cf26 <__hexnan+0x12e>
 800ced4:	2301      	movs	r3, #1
 800ced6:	603b      	str	r3, [r7, #0]
 800ced8:	2005      	movs	r0, #5
 800ceda:	b007      	add	sp, #28
 800cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee0:	3501      	adds	r5, #1
 800cee2:	2d08      	cmp	r5, #8
 800cee4:	f10b 0b01 	add.w	fp, fp, #1
 800cee8:	dd06      	ble.n	800cef8 <__hexnan+0x100>
 800ceea:	4544      	cmp	r4, r8
 800ceec:	d9c1      	bls.n	800ce72 <__hexnan+0x7a>
 800ceee:	2300      	movs	r3, #0
 800cef0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cef4:	2501      	movs	r5, #1
 800cef6:	3c04      	subs	r4, #4
 800cef8:	6822      	ldr	r2, [r4, #0]
 800cefa:	f000 000f 	and.w	r0, r0, #15
 800cefe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf02:	6020      	str	r0, [r4, #0]
 800cf04:	e7b5      	b.n	800ce72 <__hexnan+0x7a>
 800cf06:	2508      	movs	r5, #8
 800cf08:	e7b3      	b.n	800ce72 <__hexnan+0x7a>
 800cf0a:	9b01      	ldr	r3, [sp, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d0dd      	beq.n	800cecc <__hexnan+0xd4>
 800cf10:	f1c3 0320 	rsb	r3, r3, #32
 800cf14:	f04f 32ff 	mov.w	r2, #4294967295
 800cf18:	40da      	lsrs	r2, r3
 800cf1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf1e:	4013      	ands	r3, r2
 800cf20:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf24:	e7d2      	b.n	800cecc <__hexnan+0xd4>
 800cf26:	3f04      	subs	r7, #4
 800cf28:	e7d0      	b.n	800cecc <__hexnan+0xd4>
 800cf2a:	2004      	movs	r0, #4
 800cf2c:	e7d5      	b.n	800ceda <__hexnan+0xe2>
	...

0800cf30 <malloc>:
 800cf30:	4b02      	ldr	r3, [pc, #8]	@ (800cf3c <malloc+0xc>)
 800cf32:	4601      	mov	r1, r0
 800cf34:	6818      	ldr	r0, [r3, #0]
 800cf36:	f000 b825 	b.w	800cf84 <_malloc_r>
 800cf3a:	bf00      	nop
 800cf3c:	200001e4 	.word	0x200001e4

0800cf40 <sbrk_aligned>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	4e0f      	ldr	r6, [pc, #60]	@ (800cf80 <sbrk_aligned+0x40>)
 800cf44:	460c      	mov	r4, r1
 800cf46:	6831      	ldr	r1, [r6, #0]
 800cf48:	4605      	mov	r5, r0
 800cf4a:	b911      	cbnz	r1, 800cf52 <sbrk_aligned+0x12>
 800cf4c:	f000 ff94 	bl	800de78 <_sbrk_r>
 800cf50:	6030      	str	r0, [r6, #0]
 800cf52:	4621      	mov	r1, r4
 800cf54:	4628      	mov	r0, r5
 800cf56:	f000 ff8f 	bl	800de78 <_sbrk_r>
 800cf5a:	1c43      	adds	r3, r0, #1
 800cf5c:	d103      	bne.n	800cf66 <sbrk_aligned+0x26>
 800cf5e:	f04f 34ff 	mov.w	r4, #4294967295
 800cf62:	4620      	mov	r0, r4
 800cf64:	bd70      	pop	{r4, r5, r6, pc}
 800cf66:	1cc4      	adds	r4, r0, #3
 800cf68:	f024 0403 	bic.w	r4, r4, #3
 800cf6c:	42a0      	cmp	r0, r4
 800cf6e:	d0f8      	beq.n	800cf62 <sbrk_aligned+0x22>
 800cf70:	1a21      	subs	r1, r4, r0
 800cf72:	4628      	mov	r0, r5
 800cf74:	f000 ff80 	bl	800de78 <_sbrk_r>
 800cf78:	3001      	adds	r0, #1
 800cf7a:	d1f2      	bne.n	800cf62 <sbrk_aligned+0x22>
 800cf7c:	e7ef      	b.n	800cf5e <sbrk_aligned+0x1e>
 800cf7e:	bf00      	nop
 800cf80:	20000ba8 	.word	0x20000ba8

0800cf84 <_malloc_r>:
 800cf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf88:	1ccd      	adds	r5, r1, #3
 800cf8a:	f025 0503 	bic.w	r5, r5, #3
 800cf8e:	3508      	adds	r5, #8
 800cf90:	2d0c      	cmp	r5, #12
 800cf92:	bf38      	it	cc
 800cf94:	250c      	movcc	r5, #12
 800cf96:	2d00      	cmp	r5, #0
 800cf98:	4606      	mov	r6, r0
 800cf9a:	db01      	blt.n	800cfa0 <_malloc_r+0x1c>
 800cf9c:	42a9      	cmp	r1, r5
 800cf9e:	d904      	bls.n	800cfaa <_malloc_r+0x26>
 800cfa0:	230c      	movs	r3, #12
 800cfa2:	6033      	str	r3, [r6, #0]
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d080 <_malloc_r+0xfc>
 800cfae:	f000 f87b 	bl	800d0a8 <__malloc_lock>
 800cfb2:	f8d8 3000 	ldr.w	r3, [r8]
 800cfb6:	461c      	mov	r4, r3
 800cfb8:	bb44      	cbnz	r4, 800d00c <_malloc_r+0x88>
 800cfba:	4629      	mov	r1, r5
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	f7ff ffbf 	bl	800cf40 <sbrk_aligned>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	d158      	bne.n	800d07a <_malloc_r+0xf6>
 800cfc8:	f8d8 4000 	ldr.w	r4, [r8]
 800cfcc:	4627      	mov	r7, r4
 800cfce:	2f00      	cmp	r7, #0
 800cfd0:	d143      	bne.n	800d05a <_malloc_r+0xd6>
 800cfd2:	2c00      	cmp	r4, #0
 800cfd4:	d04b      	beq.n	800d06e <_malloc_r+0xea>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	4639      	mov	r1, r7
 800cfda:	4630      	mov	r0, r6
 800cfdc:	eb04 0903 	add.w	r9, r4, r3
 800cfe0:	f000 ff4a 	bl	800de78 <_sbrk_r>
 800cfe4:	4581      	cmp	r9, r0
 800cfe6:	d142      	bne.n	800d06e <_malloc_r+0xea>
 800cfe8:	6821      	ldr	r1, [r4, #0]
 800cfea:	1a6d      	subs	r5, r5, r1
 800cfec:	4629      	mov	r1, r5
 800cfee:	4630      	mov	r0, r6
 800cff0:	f7ff ffa6 	bl	800cf40 <sbrk_aligned>
 800cff4:	3001      	adds	r0, #1
 800cff6:	d03a      	beq.n	800d06e <_malloc_r+0xea>
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	442b      	add	r3, r5
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	f8d8 3000 	ldr.w	r3, [r8]
 800d002:	685a      	ldr	r2, [r3, #4]
 800d004:	bb62      	cbnz	r2, 800d060 <_malloc_r+0xdc>
 800d006:	f8c8 7000 	str.w	r7, [r8]
 800d00a:	e00f      	b.n	800d02c <_malloc_r+0xa8>
 800d00c:	6822      	ldr	r2, [r4, #0]
 800d00e:	1b52      	subs	r2, r2, r5
 800d010:	d420      	bmi.n	800d054 <_malloc_r+0xd0>
 800d012:	2a0b      	cmp	r2, #11
 800d014:	d917      	bls.n	800d046 <_malloc_r+0xc2>
 800d016:	1961      	adds	r1, r4, r5
 800d018:	42a3      	cmp	r3, r4
 800d01a:	6025      	str	r5, [r4, #0]
 800d01c:	bf18      	it	ne
 800d01e:	6059      	strne	r1, [r3, #4]
 800d020:	6863      	ldr	r3, [r4, #4]
 800d022:	bf08      	it	eq
 800d024:	f8c8 1000 	streq.w	r1, [r8]
 800d028:	5162      	str	r2, [r4, r5]
 800d02a:	604b      	str	r3, [r1, #4]
 800d02c:	4630      	mov	r0, r6
 800d02e:	f000 f841 	bl	800d0b4 <__malloc_unlock>
 800d032:	f104 000b 	add.w	r0, r4, #11
 800d036:	1d23      	adds	r3, r4, #4
 800d038:	f020 0007 	bic.w	r0, r0, #7
 800d03c:	1ac2      	subs	r2, r0, r3
 800d03e:	bf1c      	itt	ne
 800d040:	1a1b      	subne	r3, r3, r0
 800d042:	50a3      	strne	r3, [r4, r2]
 800d044:	e7af      	b.n	800cfa6 <_malloc_r+0x22>
 800d046:	6862      	ldr	r2, [r4, #4]
 800d048:	42a3      	cmp	r3, r4
 800d04a:	bf0c      	ite	eq
 800d04c:	f8c8 2000 	streq.w	r2, [r8]
 800d050:	605a      	strne	r2, [r3, #4]
 800d052:	e7eb      	b.n	800d02c <_malloc_r+0xa8>
 800d054:	4623      	mov	r3, r4
 800d056:	6864      	ldr	r4, [r4, #4]
 800d058:	e7ae      	b.n	800cfb8 <_malloc_r+0x34>
 800d05a:	463c      	mov	r4, r7
 800d05c:	687f      	ldr	r7, [r7, #4]
 800d05e:	e7b6      	b.n	800cfce <_malloc_r+0x4a>
 800d060:	461a      	mov	r2, r3
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	42a3      	cmp	r3, r4
 800d066:	d1fb      	bne.n	800d060 <_malloc_r+0xdc>
 800d068:	2300      	movs	r3, #0
 800d06a:	6053      	str	r3, [r2, #4]
 800d06c:	e7de      	b.n	800d02c <_malloc_r+0xa8>
 800d06e:	230c      	movs	r3, #12
 800d070:	6033      	str	r3, [r6, #0]
 800d072:	4630      	mov	r0, r6
 800d074:	f000 f81e 	bl	800d0b4 <__malloc_unlock>
 800d078:	e794      	b.n	800cfa4 <_malloc_r+0x20>
 800d07a:	6005      	str	r5, [r0, #0]
 800d07c:	e7d6      	b.n	800d02c <_malloc_r+0xa8>
 800d07e:	bf00      	nop
 800d080:	20000bac 	.word	0x20000bac

0800d084 <__ascii_mbtowc>:
 800d084:	b082      	sub	sp, #8
 800d086:	b901      	cbnz	r1, 800d08a <__ascii_mbtowc+0x6>
 800d088:	a901      	add	r1, sp, #4
 800d08a:	b142      	cbz	r2, 800d09e <__ascii_mbtowc+0x1a>
 800d08c:	b14b      	cbz	r3, 800d0a2 <__ascii_mbtowc+0x1e>
 800d08e:	7813      	ldrb	r3, [r2, #0]
 800d090:	600b      	str	r3, [r1, #0]
 800d092:	7812      	ldrb	r2, [r2, #0]
 800d094:	1e10      	subs	r0, r2, #0
 800d096:	bf18      	it	ne
 800d098:	2001      	movne	r0, #1
 800d09a:	b002      	add	sp, #8
 800d09c:	4770      	bx	lr
 800d09e:	4610      	mov	r0, r2
 800d0a0:	e7fb      	b.n	800d09a <__ascii_mbtowc+0x16>
 800d0a2:	f06f 0001 	mvn.w	r0, #1
 800d0a6:	e7f8      	b.n	800d09a <__ascii_mbtowc+0x16>

0800d0a8 <__malloc_lock>:
 800d0a8:	4801      	ldr	r0, [pc, #4]	@ (800d0b0 <__malloc_lock+0x8>)
 800d0aa:	f7fe bd56 	b.w	800bb5a <__retarget_lock_acquire_recursive>
 800d0ae:	bf00      	nop
 800d0b0:	20000ba4 	.word	0x20000ba4

0800d0b4 <__malloc_unlock>:
 800d0b4:	4801      	ldr	r0, [pc, #4]	@ (800d0bc <__malloc_unlock+0x8>)
 800d0b6:	f7fe bd51 	b.w	800bb5c <__retarget_lock_release_recursive>
 800d0ba:	bf00      	nop
 800d0bc:	20000ba4 	.word	0x20000ba4

0800d0c0 <_Balloc>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	69c6      	ldr	r6, [r0, #28]
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	460d      	mov	r5, r1
 800d0c8:	b976      	cbnz	r6, 800d0e8 <_Balloc+0x28>
 800d0ca:	2010      	movs	r0, #16
 800d0cc:	f7ff ff30 	bl	800cf30 <malloc>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	61e0      	str	r0, [r4, #28]
 800d0d4:	b920      	cbnz	r0, 800d0e0 <_Balloc+0x20>
 800d0d6:	4b18      	ldr	r3, [pc, #96]	@ (800d138 <_Balloc+0x78>)
 800d0d8:	4818      	ldr	r0, [pc, #96]	@ (800d13c <_Balloc+0x7c>)
 800d0da:	216b      	movs	r1, #107	@ 0x6b
 800d0dc:	f000 fedc 	bl	800de98 <__assert_func>
 800d0e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0e4:	6006      	str	r6, [r0, #0]
 800d0e6:	60c6      	str	r6, [r0, #12]
 800d0e8:	69e6      	ldr	r6, [r4, #28]
 800d0ea:	68f3      	ldr	r3, [r6, #12]
 800d0ec:	b183      	cbz	r3, 800d110 <_Balloc+0x50>
 800d0ee:	69e3      	ldr	r3, [r4, #28]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d0f6:	b9b8      	cbnz	r0, 800d128 <_Balloc+0x68>
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	fa01 f605 	lsl.w	r6, r1, r5
 800d0fe:	1d72      	adds	r2, r6, #5
 800d100:	0092      	lsls	r2, r2, #2
 800d102:	4620      	mov	r0, r4
 800d104:	f000 fee6 	bl	800ded4 <_calloc_r>
 800d108:	b160      	cbz	r0, 800d124 <_Balloc+0x64>
 800d10a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d10e:	e00e      	b.n	800d12e <_Balloc+0x6e>
 800d110:	2221      	movs	r2, #33	@ 0x21
 800d112:	2104      	movs	r1, #4
 800d114:	4620      	mov	r0, r4
 800d116:	f000 fedd 	bl	800ded4 <_calloc_r>
 800d11a:	69e3      	ldr	r3, [r4, #28]
 800d11c:	60f0      	str	r0, [r6, #12]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1e4      	bne.n	800d0ee <_Balloc+0x2e>
 800d124:	2000      	movs	r0, #0
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	6802      	ldr	r2, [r0, #0]
 800d12a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d12e:	2300      	movs	r3, #0
 800d130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d134:	e7f7      	b.n	800d126 <_Balloc+0x66>
 800d136:	bf00      	nop
 800d138:	0800e79a 	.word	0x0800e79a
 800d13c:	0800e87a 	.word	0x0800e87a

0800d140 <_Bfree>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	69c6      	ldr	r6, [r0, #28]
 800d144:	4605      	mov	r5, r0
 800d146:	460c      	mov	r4, r1
 800d148:	b976      	cbnz	r6, 800d168 <_Bfree+0x28>
 800d14a:	2010      	movs	r0, #16
 800d14c:	f7ff fef0 	bl	800cf30 <malloc>
 800d150:	4602      	mov	r2, r0
 800d152:	61e8      	str	r0, [r5, #28]
 800d154:	b920      	cbnz	r0, 800d160 <_Bfree+0x20>
 800d156:	4b09      	ldr	r3, [pc, #36]	@ (800d17c <_Bfree+0x3c>)
 800d158:	4809      	ldr	r0, [pc, #36]	@ (800d180 <_Bfree+0x40>)
 800d15a:	218f      	movs	r1, #143	@ 0x8f
 800d15c:	f000 fe9c 	bl	800de98 <__assert_func>
 800d160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d164:	6006      	str	r6, [r0, #0]
 800d166:	60c6      	str	r6, [r0, #12]
 800d168:	b13c      	cbz	r4, 800d17a <_Bfree+0x3a>
 800d16a:	69eb      	ldr	r3, [r5, #28]
 800d16c:	6862      	ldr	r2, [r4, #4]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d174:	6021      	str	r1, [r4, #0]
 800d176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d17a:	bd70      	pop	{r4, r5, r6, pc}
 800d17c:	0800e79a 	.word	0x0800e79a
 800d180:	0800e87a 	.word	0x0800e87a

0800d184 <__multadd>:
 800d184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d188:	690d      	ldr	r5, [r1, #16]
 800d18a:	4607      	mov	r7, r0
 800d18c:	460c      	mov	r4, r1
 800d18e:	461e      	mov	r6, r3
 800d190:	f101 0c14 	add.w	ip, r1, #20
 800d194:	2000      	movs	r0, #0
 800d196:	f8dc 3000 	ldr.w	r3, [ip]
 800d19a:	b299      	uxth	r1, r3
 800d19c:	fb02 6101 	mla	r1, r2, r1, r6
 800d1a0:	0c1e      	lsrs	r6, r3, #16
 800d1a2:	0c0b      	lsrs	r3, r1, #16
 800d1a4:	fb02 3306 	mla	r3, r2, r6, r3
 800d1a8:	b289      	uxth	r1, r1
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1b0:	4285      	cmp	r5, r0
 800d1b2:	f84c 1b04 	str.w	r1, [ip], #4
 800d1b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1ba:	dcec      	bgt.n	800d196 <__multadd+0x12>
 800d1bc:	b30e      	cbz	r6, 800d202 <__multadd+0x7e>
 800d1be:	68a3      	ldr	r3, [r4, #8]
 800d1c0:	42ab      	cmp	r3, r5
 800d1c2:	dc19      	bgt.n	800d1f8 <__multadd+0x74>
 800d1c4:	6861      	ldr	r1, [r4, #4]
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	3101      	adds	r1, #1
 800d1ca:	f7ff ff79 	bl	800d0c0 <_Balloc>
 800d1ce:	4680      	mov	r8, r0
 800d1d0:	b928      	cbnz	r0, 800d1de <__multadd+0x5a>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d208 <__multadd+0x84>)
 800d1d6:	480d      	ldr	r0, [pc, #52]	@ (800d20c <__multadd+0x88>)
 800d1d8:	21ba      	movs	r1, #186	@ 0xba
 800d1da:	f000 fe5d 	bl	800de98 <__assert_func>
 800d1de:	6922      	ldr	r2, [r4, #16]
 800d1e0:	3202      	adds	r2, #2
 800d1e2:	f104 010c 	add.w	r1, r4, #12
 800d1e6:	0092      	lsls	r2, r2, #2
 800d1e8:	300c      	adds	r0, #12
 800d1ea:	f7fe fcb8 	bl	800bb5e <memcpy>
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f7ff ffa5 	bl	800d140 <_Bfree>
 800d1f6:	4644      	mov	r4, r8
 800d1f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1fc:	3501      	adds	r5, #1
 800d1fe:	615e      	str	r6, [r3, #20]
 800d200:	6125      	str	r5, [r4, #16]
 800d202:	4620      	mov	r0, r4
 800d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d208:	0800e809 	.word	0x0800e809
 800d20c:	0800e87a 	.word	0x0800e87a

0800d210 <__s2b>:
 800d210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d214:	460c      	mov	r4, r1
 800d216:	4615      	mov	r5, r2
 800d218:	461f      	mov	r7, r3
 800d21a:	2209      	movs	r2, #9
 800d21c:	3308      	adds	r3, #8
 800d21e:	4606      	mov	r6, r0
 800d220:	fb93 f3f2 	sdiv	r3, r3, r2
 800d224:	2100      	movs	r1, #0
 800d226:	2201      	movs	r2, #1
 800d228:	429a      	cmp	r2, r3
 800d22a:	db09      	blt.n	800d240 <__s2b+0x30>
 800d22c:	4630      	mov	r0, r6
 800d22e:	f7ff ff47 	bl	800d0c0 <_Balloc>
 800d232:	b940      	cbnz	r0, 800d246 <__s2b+0x36>
 800d234:	4602      	mov	r2, r0
 800d236:	4b19      	ldr	r3, [pc, #100]	@ (800d29c <__s2b+0x8c>)
 800d238:	4819      	ldr	r0, [pc, #100]	@ (800d2a0 <__s2b+0x90>)
 800d23a:	21d3      	movs	r1, #211	@ 0xd3
 800d23c:	f000 fe2c 	bl	800de98 <__assert_func>
 800d240:	0052      	lsls	r2, r2, #1
 800d242:	3101      	adds	r1, #1
 800d244:	e7f0      	b.n	800d228 <__s2b+0x18>
 800d246:	9b08      	ldr	r3, [sp, #32]
 800d248:	6143      	str	r3, [r0, #20]
 800d24a:	2d09      	cmp	r5, #9
 800d24c:	f04f 0301 	mov.w	r3, #1
 800d250:	6103      	str	r3, [r0, #16]
 800d252:	dd16      	ble.n	800d282 <__s2b+0x72>
 800d254:	f104 0909 	add.w	r9, r4, #9
 800d258:	46c8      	mov	r8, r9
 800d25a:	442c      	add	r4, r5
 800d25c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d260:	4601      	mov	r1, r0
 800d262:	3b30      	subs	r3, #48	@ 0x30
 800d264:	220a      	movs	r2, #10
 800d266:	4630      	mov	r0, r6
 800d268:	f7ff ff8c 	bl	800d184 <__multadd>
 800d26c:	45a0      	cmp	r8, r4
 800d26e:	d1f5      	bne.n	800d25c <__s2b+0x4c>
 800d270:	f1a5 0408 	sub.w	r4, r5, #8
 800d274:	444c      	add	r4, r9
 800d276:	1b2d      	subs	r5, r5, r4
 800d278:	1963      	adds	r3, r4, r5
 800d27a:	42bb      	cmp	r3, r7
 800d27c:	db04      	blt.n	800d288 <__s2b+0x78>
 800d27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d282:	340a      	adds	r4, #10
 800d284:	2509      	movs	r5, #9
 800d286:	e7f6      	b.n	800d276 <__s2b+0x66>
 800d288:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d28c:	4601      	mov	r1, r0
 800d28e:	3b30      	subs	r3, #48	@ 0x30
 800d290:	220a      	movs	r2, #10
 800d292:	4630      	mov	r0, r6
 800d294:	f7ff ff76 	bl	800d184 <__multadd>
 800d298:	e7ee      	b.n	800d278 <__s2b+0x68>
 800d29a:	bf00      	nop
 800d29c:	0800e809 	.word	0x0800e809
 800d2a0:	0800e87a 	.word	0x0800e87a

0800d2a4 <__hi0bits>:
 800d2a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	bf36      	itet	cc
 800d2ac:	0403      	lslcc	r3, r0, #16
 800d2ae:	2000      	movcs	r0, #0
 800d2b0:	2010      	movcc	r0, #16
 800d2b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2b6:	bf3c      	itt	cc
 800d2b8:	021b      	lslcc	r3, r3, #8
 800d2ba:	3008      	addcc	r0, #8
 800d2bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2c0:	bf3c      	itt	cc
 800d2c2:	011b      	lslcc	r3, r3, #4
 800d2c4:	3004      	addcc	r0, #4
 800d2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2ca:	bf3c      	itt	cc
 800d2cc:	009b      	lslcc	r3, r3, #2
 800d2ce:	3002      	addcc	r0, #2
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	db05      	blt.n	800d2e0 <__hi0bits+0x3c>
 800d2d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d2d8:	f100 0001 	add.w	r0, r0, #1
 800d2dc:	bf08      	it	eq
 800d2de:	2020      	moveq	r0, #32
 800d2e0:	4770      	bx	lr

0800d2e2 <__lo0bits>:
 800d2e2:	6803      	ldr	r3, [r0, #0]
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	f013 0007 	ands.w	r0, r3, #7
 800d2ea:	d00b      	beq.n	800d304 <__lo0bits+0x22>
 800d2ec:	07d9      	lsls	r1, r3, #31
 800d2ee:	d421      	bmi.n	800d334 <__lo0bits+0x52>
 800d2f0:	0798      	lsls	r0, r3, #30
 800d2f2:	bf49      	itett	mi
 800d2f4:	085b      	lsrmi	r3, r3, #1
 800d2f6:	089b      	lsrpl	r3, r3, #2
 800d2f8:	2001      	movmi	r0, #1
 800d2fa:	6013      	strmi	r3, [r2, #0]
 800d2fc:	bf5c      	itt	pl
 800d2fe:	6013      	strpl	r3, [r2, #0]
 800d300:	2002      	movpl	r0, #2
 800d302:	4770      	bx	lr
 800d304:	b299      	uxth	r1, r3
 800d306:	b909      	cbnz	r1, 800d30c <__lo0bits+0x2a>
 800d308:	0c1b      	lsrs	r3, r3, #16
 800d30a:	2010      	movs	r0, #16
 800d30c:	b2d9      	uxtb	r1, r3
 800d30e:	b909      	cbnz	r1, 800d314 <__lo0bits+0x32>
 800d310:	3008      	adds	r0, #8
 800d312:	0a1b      	lsrs	r3, r3, #8
 800d314:	0719      	lsls	r1, r3, #28
 800d316:	bf04      	itt	eq
 800d318:	091b      	lsreq	r3, r3, #4
 800d31a:	3004      	addeq	r0, #4
 800d31c:	0799      	lsls	r1, r3, #30
 800d31e:	bf04      	itt	eq
 800d320:	089b      	lsreq	r3, r3, #2
 800d322:	3002      	addeq	r0, #2
 800d324:	07d9      	lsls	r1, r3, #31
 800d326:	d403      	bmi.n	800d330 <__lo0bits+0x4e>
 800d328:	085b      	lsrs	r3, r3, #1
 800d32a:	f100 0001 	add.w	r0, r0, #1
 800d32e:	d003      	beq.n	800d338 <__lo0bits+0x56>
 800d330:	6013      	str	r3, [r2, #0]
 800d332:	4770      	bx	lr
 800d334:	2000      	movs	r0, #0
 800d336:	4770      	bx	lr
 800d338:	2020      	movs	r0, #32
 800d33a:	4770      	bx	lr

0800d33c <__i2b>:
 800d33c:	b510      	push	{r4, lr}
 800d33e:	460c      	mov	r4, r1
 800d340:	2101      	movs	r1, #1
 800d342:	f7ff febd 	bl	800d0c0 <_Balloc>
 800d346:	4602      	mov	r2, r0
 800d348:	b928      	cbnz	r0, 800d356 <__i2b+0x1a>
 800d34a:	4b05      	ldr	r3, [pc, #20]	@ (800d360 <__i2b+0x24>)
 800d34c:	4805      	ldr	r0, [pc, #20]	@ (800d364 <__i2b+0x28>)
 800d34e:	f240 1145 	movw	r1, #325	@ 0x145
 800d352:	f000 fda1 	bl	800de98 <__assert_func>
 800d356:	2301      	movs	r3, #1
 800d358:	6144      	str	r4, [r0, #20]
 800d35a:	6103      	str	r3, [r0, #16]
 800d35c:	bd10      	pop	{r4, pc}
 800d35e:	bf00      	nop
 800d360:	0800e809 	.word	0x0800e809
 800d364:	0800e87a 	.word	0x0800e87a

0800d368 <__multiply>:
 800d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	4614      	mov	r4, r2
 800d36e:	690a      	ldr	r2, [r1, #16]
 800d370:	6923      	ldr	r3, [r4, #16]
 800d372:	429a      	cmp	r2, r3
 800d374:	bfa8      	it	ge
 800d376:	4623      	movge	r3, r4
 800d378:	460f      	mov	r7, r1
 800d37a:	bfa4      	itt	ge
 800d37c:	460c      	movge	r4, r1
 800d37e:	461f      	movge	r7, r3
 800d380:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d384:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d388:	68a3      	ldr	r3, [r4, #8]
 800d38a:	6861      	ldr	r1, [r4, #4]
 800d38c:	eb0a 0609 	add.w	r6, sl, r9
 800d390:	42b3      	cmp	r3, r6
 800d392:	b085      	sub	sp, #20
 800d394:	bfb8      	it	lt
 800d396:	3101      	addlt	r1, #1
 800d398:	f7ff fe92 	bl	800d0c0 <_Balloc>
 800d39c:	b930      	cbnz	r0, 800d3ac <__multiply+0x44>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	4b44      	ldr	r3, [pc, #272]	@ (800d4b4 <__multiply+0x14c>)
 800d3a2:	4845      	ldr	r0, [pc, #276]	@ (800d4b8 <__multiply+0x150>)
 800d3a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d3a8:	f000 fd76 	bl	800de98 <__assert_func>
 800d3ac:	f100 0514 	add.w	r5, r0, #20
 800d3b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3b4:	462b      	mov	r3, r5
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	4543      	cmp	r3, r8
 800d3ba:	d321      	bcc.n	800d400 <__multiply+0x98>
 800d3bc:	f107 0114 	add.w	r1, r7, #20
 800d3c0:	f104 0214 	add.w	r2, r4, #20
 800d3c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d3c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d3cc:	9302      	str	r3, [sp, #8]
 800d3ce:	1b13      	subs	r3, r2, r4
 800d3d0:	3b15      	subs	r3, #21
 800d3d2:	f023 0303 	bic.w	r3, r3, #3
 800d3d6:	3304      	adds	r3, #4
 800d3d8:	f104 0715 	add.w	r7, r4, #21
 800d3dc:	42ba      	cmp	r2, r7
 800d3de:	bf38      	it	cc
 800d3e0:	2304      	movcc	r3, #4
 800d3e2:	9301      	str	r3, [sp, #4]
 800d3e4:	9b02      	ldr	r3, [sp, #8]
 800d3e6:	9103      	str	r1, [sp, #12]
 800d3e8:	428b      	cmp	r3, r1
 800d3ea:	d80c      	bhi.n	800d406 <__multiply+0x9e>
 800d3ec:	2e00      	cmp	r6, #0
 800d3ee:	dd03      	ble.n	800d3f8 <__multiply+0x90>
 800d3f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d05b      	beq.n	800d4b0 <__multiply+0x148>
 800d3f8:	6106      	str	r6, [r0, #16]
 800d3fa:	b005      	add	sp, #20
 800d3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d400:	f843 2b04 	str.w	r2, [r3], #4
 800d404:	e7d8      	b.n	800d3b8 <__multiply+0x50>
 800d406:	f8b1 a000 	ldrh.w	sl, [r1]
 800d40a:	f1ba 0f00 	cmp.w	sl, #0
 800d40e:	d024      	beq.n	800d45a <__multiply+0xf2>
 800d410:	f104 0e14 	add.w	lr, r4, #20
 800d414:	46a9      	mov	r9, r5
 800d416:	f04f 0c00 	mov.w	ip, #0
 800d41a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d41e:	f8d9 3000 	ldr.w	r3, [r9]
 800d422:	fa1f fb87 	uxth.w	fp, r7
 800d426:	b29b      	uxth	r3, r3
 800d428:	fb0a 330b 	mla	r3, sl, fp, r3
 800d42c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d430:	f8d9 7000 	ldr.w	r7, [r9]
 800d434:	4463      	add	r3, ip
 800d436:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d43a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d43e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d442:	b29b      	uxth	r3, r3
 800d444:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d448:	4572      	cmp	r2, lr
 800d44a:	f849 3b04 	str.w	r3, [r9], #4
 800d44e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d452:	d8e2      	bhi.n	800d41a <__multiply+0xb2>
 800d454:	9b01      	ldr	r3, [sp, #4]
 800d456:	f845 c003 	str.w	ip, [r5, r3]
 800d45a:	9b03      	ldr	r3, [sp, #12]
 800d45c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d460:	3104      	adds	r1, #4
 800d462:	f1b9 0f00 	cmp.w	r9, #0
 800d466:	d021      	beq.n	800d4ac <__multiply+0x144>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	f104 0c14 	add.w	ip, r4, #20
 800d46e:	46ae      	mov	lr, r5
 800d470:	f04f 0a00 	mov.w	sl, #0
 800d474:	f8bc b000 	ldrh.w	fp, [ip]
 800d478:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d47c:	fb09 770b 	mla	r7, r9, fp, r7
 800d480:	4457      	add	r7, sl
 800d482:	b29b      	uxth	r3, r3
 800d484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d488:	f84e 3b04 	str.w	r3, [lr], #4
 800d48c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d490:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d494:	f8be 3000 	ldrh.w	r3, [lr]
 800d498:	fb09 330a 	mla	r3, r9, sl, r3
 800d49c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d4a0:	4562      	cmp	r2, ip
 800d4a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4a6:	d8e5      	bhi.n	800d474 <__multiply+0x10c>
 800d4a8:	9f01      	ldr	r7, [sp, #4]
 800d4aa:	51eb      	str	r3, [r5, r7]
 800d4ac:	3504      	adds	r5, #4
 800d4ae:	e799      	b.n	800d3e4 <__multiply+0x7c>
 800d4b0:	3e01      	subs	r6, #1
 800d4b2:	e79b      	b.n	800d3ec <__multiply+0x84>
 800d4b4:	0800e809 	.word	0x0800e809
 800d4b8:	0800e87a 	.word	0x0800e87a

0800d4bc <__pow5mult>:
 800d4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c0:	4615      	mov	r5, r2
 800d4c2:	f012 0203 	ands.w	r2, r2, #3
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	460e      	mov	r6, r1
 800d4ca:	d007      	beq.n	800d4dc <__pow5mult+0x20>
 800d4cc:	4c25      	ldr	r4, [pc, #148]	@ (800d564 <__pow5mult+0xa8>)
 800d4ce:	3a01      	subs	r2, #1
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4d6:	f7ff fe55 	bl	800d184 <__multadd>
 800d4da:	4606      	mov	r6, r0
 800d4dc:	10ad      	asrs	r5, r5, #2
 800d4de:	d03d      	beq.n	800d55c <__pow5mult+0xa0>
 800d4e0:	69fc      	ldr	r4, [r7, #28]
 800d4e2:	b97c      	cbnz	r4, 800d504 <__pow5mult+0x48>
 800d4e4:	2010      	movs	r0, #16
 800d4e6:	f7ff fd23 	bl	800cf30 <malloc>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	61f8      	str	r0, [r7, #28]
 800d4ee:	b928      	cbnz	r0, 800d4fc <__pow5mult+0x40>
 800d4f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d568 <__pow5mult+0xac>)
 800d4f2:	481e      	ldr	r0, [pc, #120]	@ (800d56c <__pow5mult+0xb0>)
 800d4f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d4f8:	f000 fcce 	bl	800de98 <__assert_func>
 800d4fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d500:	6004      	str	r4, [r0, #0]
 800d502:	60c4      	str	r4, [r0, #12]
 800d504:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d50c:	b94c      	cbnz	r4, 800d522 <__pow5mult+0x66>
 800d50e:	f240 2171 	movw	r1, #625	@ 0x271
 800d512:	4638      	mov	r0, r7
 800d514:	f7ff ff12 	bl	800d33c <__i2b>
 800d518:	2300      	movs	r3, #0
 800d51a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d51e:	4604      	mov	r4, r0
 800d520:	6003      	str	r3, [r0, #0]
 800d522:	f04f 0900 	mov.w	r9, #0
 800d526:	07eb      	lsls	r3, r5, #31
 800d528:	d50a      	bpl.n	800d540 <__pow5mult+0x84>
 800d52a:	4631      	mov	r1, r6
 800d52c:	4622      	mov	r2, r4
 800d52e:	4638      	mov	r0, r7
 800d530:	f7ff ff1a 	bl	800d368 <__multiply>
 800d534:	4631      	mov	r1, r6
 800d536:	4680      	mov	r8, r0
 800d538:	4638      	mov	r0, r7
 800d53a:	f7ff fe01 	bl	800d140 <_Bfree>
 800d53e:	4646      	mov	r6, r8
 800d540:	106d      	asrs	r5, r5, #1
 800d542:	d00b      	beq.n	800d55c <__pow5mult+0xa0>
 800d544:	6820      	ldr	r0, [r4, #0]
 800d546:	b938      	cbnz	r0, 800d558 <__pow5mult+0x9c>
 800d548:	4622      	mov	r2, r4
 800d54a:	4621      	mov	r1, r4
 800d54c:	4638      	mov	r0, r7
 800d54e:	f7ff ff0b 	bl	800d368 <__multiply>
 800d552:	6020      	str	r0, [r4, #0]
 800d554:	f8c0 9000 	str.w	r9, [r0]
 800d558:	4604      	mov	r4, r0
 800d55a:	e7e4      	b.n	800d526 <__pow5mult+0x6a>
 800d55c:	4630      	mov	r0, r6
 800d55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d562:	bf00      	nop
 800d564:	0800e8d4 	.word	0x0800e8d4
 800d568:	0800e79a 	.word	0x0800e79a
 800d56c:	0800e87a 	.word	0x0800e87a

0800d570 <__lshift>:
 800d570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d574:	460c      	mov	r4, r1
 800d576:	6849      	ldr	r1, [r1, #4]
 800d578:	6923      	ldr	r3, [r4, #16]
 800d57a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d57e:	68a3      	ldr	r3, [r4, #8]
 800d580:	4607      	mov	r7, r0
 800d582:	4691      	mov	r9, r2
 800d584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d588:	f108 0601 	add.w	r6, r8, #1
 800d58c:	42b3      	cmp	r3, r6
 800d58e:	db0b      	blt.n	800d5a8 <__lshift+0x38>
 800d590:	4638      	mov	r0, r7
 800d592:	f7ff fd95 	bl	800d0c0 <_Balloc>
 800d596:	4605      	mov	r5, r0
 800d598:	b948      	cbnz	r0, 800d5ae <__lshift+0x3e>
 800d59a:	4602      	mov	r2, r0
 800d59c:	4b28      	ldr	r3, [pc, #160]	@ (800d640 <__lshift+0xd0>)
 800d59e:	4829      	ldr	r0, [pc, #164]	@ (800d644 <__lshift+0xd4>)
 800d5a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d5a4:	f000 fc78 	bl	800de98 <__assert_func>
 800d5a8:	3101      	adds	r1, #1
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	e7ee      	b.n	800d58c <__lshift+0x1c>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f100 0114 	add.w	r1, r0, #20
 800d5b4:	f100 0210 	add.w	r2, r0, #16
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	4553      	cmp	r3, sl
 800d5bc:	db33      	blt.n	800d626 <__lshift+0xb6>
 800d5be:	6920      	ldr	r0, [r4, #16]
 800d5c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5c4:	f104 0314 	add.w	r3, r4, #20
 800d5c8:	f019 091f 	ands.w	r9, r9, #31
 800d5cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d5d4:	d02b      	beq.n	800d62e <__lshift+0xbe>
 800d5d6:	f1c9 0e20 	rsb	lr, r9, #32
 800d5da:	468a      	mov	sl, r1
 800d5dc:	2200      	movs	r2, #0
 800d5de:	6818      	ldr	r0, [r3, #0]
 800d5e0:	fa00 f009 	lsl.w	r0, r0, r9
 800d5e4:	4310      	orrs	r0, r2
 800d5e6:	f84a 0b04 	str.w	r0, [sl], #4
 800d5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ee:	459c      	cmp	ip, r3
 800d5f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5f4:	d8f3      	bhi.n	800d5de <__lshift+0x6e>
 800d5f6:	ebac 0304 	sub.w	r3, ip, r4
 800d5fa:	3b15      	subs	r3, #21
 800d5fc:	f023 0303 	bic.w	r3, r3, #3
 800d600:	3304      	adds	r3, #4
 800d602:	f104 0015 	add.w	r0, r4, #21
 800d606:	4584      	cmp	ip, r0
 800d608:	bf38      	it	cc
 800d60a:	2304      	movcc	r3, #4
 800d60c:	50ca      	str	r2, [r1, r3]
 800d60e:	b10a      	cbz	r2, 800d614 <__lshift+0xa4>
 800d610:	f108 0602 	add.w	r6, r8, #2
 800d614:	3e01      	subs	r6, #1
 800d616:	4638      	mov	r0, r7
 800d618:	612e      	str	r6, [r5, #16]
 800d61a:	4621      	mov	r1, r4
 800d61c:	f7ff fd90 	bl	800d140 <_Bfree>
 800d620:	4628      	mov	r0, r5
 800d622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d626:	f842 0f04 	str.w	r0, [r2, #4]!
 800d62a:	3301      	adds	r3, #1
 800d62c:	e7c5      	b.n	800d5ba <__lshift+0x4a>
 800d62e:	3904      	subs	r1, #4
 800d630:	f853 2b04 	ldr.w	r2, [r3], #4
 800d634:	f841 2f04 	str.w	r2, [r1, #4]!
 800d638:	459c      	cmp	ip, r3
 800d63a:	d8f9      	bhi.n	800d630 <__lshift+0xc0>
 800d63c:	e7ea      	b.n	800d614 <__lshift+0xa4>
 800d63e:	bf00      	nop
 800d640:	0800e809 	.word	0x0800e809
 800d644:	0800e87a 	.word	0x0800e87a

0800d648 <__mcmp>:
 800d648:	690a      	ldr	r2, [r1, #16]
 800d64a:	4603      	mov	r3, r0
 800d64c:	6900      	ldr	r0, [r0, #16]
 800d64e:	1a80      	subs	r0, r0, r2
 800d650:	b530      	push	{r4, r5, lr}
 800d652:	d10e      	bne.n	800d672 <__mcmp+0x2a>
 800d654:	3314      	adds	r3, #20
 800d656:	3114      	adds	r1, #20
 800d658:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d65c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d668:	4295      	cmp	r5, r2
 800d66a:	d003      	beq.n	800d674 <__mcmp+0x2c>
 800d66c:	d205      	bcs.n	800d67a <__mcmp+0x32>
 800d66e:	f04f 30ff 	mov.w	r0, #4294967295
 800d672:	bd30      	pop	{r4, r5, pc}
 800d674:	42a3      	cmp	r3, r4
 800d676:	d3f3      	bcc.n	800d660 <__mcmp+0x18>
 800d678:	e7fb      	b.n	800d672 <__mcmp+0x2a>
 800d67a:	2001      	movs	r0, #1
 800d67c:	e7f9      	b.n	800d672 <__mcmp+0x2a>
	...

0800d680 <__mdiff>:
 800d680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d684:	4689      	mov	r9, r1
 800d686:	4606      	mov	r6, r0
 800d688:	4611      	mov	r1, r2
 800d68a:	4648      	mov	r0, r9
 800d68c:	4614      	mov	r4, r2
 800d68e:	f7ff ffdb 	bl	800d648 <__mcmp>
 800d692:	1e05      	subs	r5, r0, #0
 800d694:	d112      	bne.n	800d6bc <__mdiff+0x3c>
 800d696:	4629      	mov	r1, r5
 800d698:	4630      	mov	r0, r6
 800d69a:	f7ff fd11 	bl	800d0c0 <_Balloc>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	b928      	cbnz	r0, 800d6ae <__mdiff+0x2e>
 800d6a2:	4b3f      	ldr	r3, [pc, #252]	@ (800d7a0 <__mdiff+0x120>)
 800d6a4:	f240 2137 	movw	r1, #567	@ 0x237
 800d6a8:	483e      	ldr	r0, [pc, #248]	@ (800d7a4 <__mdiff+0x124>)
 800d6aa:	f000 fbf5 	bl	800de98 <__assert_func>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6b4:	4610      	mov	r0, r2
 800d6b6:	b003      	add	sp, #12
 800d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6bc:	bfbc      	itt	lt
 800d6be:	464b      	movlt	r3, r9
 800d6c0:	46a1      	movlt	r9, r4
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d6c8:	bfba      	itte	lt
 800d6ca:	461c      	movlt	r4, r3
 800d6cc:	2501      	movlt	r5, #1
 800d6ce:	2500      	movge	r5, #0
 800d6d0:	f7ff fcf6 	bl	800d0c0 <_Balloc>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	b918      	cbnz	r0, 800d6e0 <__mdiff+0x60>
 800d6d8:	4b31      	ldr	r3, [pc, #196]	@ (800d7a0 <__mdiff+0x120>)
 800d6da:	f240 2145 	movw	r1, #581	@ 0x245
 800d6de:	e7e3      	b.n	800d6a8 <__mdiff+0x28>
 800d6e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d6e4:	6926      	ldr	r6, [r4, #16]
 800d6e6:	60c5      	str	r5, [r0, #12]
 800d6e8:	f109 0310 	add.w	r3, r9, #16
 800d6ec:	f109 0514 	add.w	r5, r9, #20
 800d6f0:	f104 0e14 	add.w	lr, r4, #20
 800d6f4:	f100 0b14 	add.w	fp, r0, #20
 800d6f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d6fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	46d9      	mov	r9, fp
 800d704:	f04f 0c00 	mov.w	ip, #0
 800d708:	9b01      	ldr	r3, [sp, #4]
 800d70a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d70e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d712:	9301      	str	r3, [sp, #4]
 800d714:	fa1f f38a 	uxth.w	r3, sl
 800d718:	4619      	mov	r1, r3
 800d71a:	b283      	uxth	r3, r0
 800d71c:	1acb      	subs	r3, r1, r3
 800d71e:	0c00      	lsrs	r0, r0, #16
 800d720:	4463      	add	r3, ip
 800d722:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d726:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d730:	4576      	cmp	r6, lr
 800d732:	f849 3b04 	str.w	r3, [r9], #4
 800d736:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d73a:	d8e5      	bhi.n	800d708 <__mdiff+0x88>
 800d73c:	1b33      	subs	r3, r6, r4
 800d73e:	3b15      	subs	r3, #21
 800d740:	f023 0303 	bic.w	r3, r3, #3
 800d744:	3415      	adds	r4, #21
 800d746:	3304      	adds	r3, #4
 800d748:	42a6      	cmp	r6, r4
 800d74a:	bf38      	it	cc
 800d74c:	2304      	movcc	r3, #4
 800d74e:	441d      	add	r5, r3
 800d750:	445b      	add	r3, fp
 800d752:	461e      	mov	r6, r3
 800d754:	462c      	mov	r4, r5
 800d756:	4544      	cmp	r4, r8
 800d758:	d30e      	bcc.n	800d778 <__mdiff+0xf8>
 800d75a:	f108 0103 	add.w	r1, r8, #3
 800d75e:	1b49      	subs	r1, r1, r5
 800d760:	f021 0103 	bic.w	r1, r1, #3
 800d764:	3d03      	subs	r5, #3
 800d766:	45a8      	cmp	r8, r5
 800d768:	bf38      	it	cc
 800d76a:	2100      	movcc	r1, #0
 800d76c:	440b      	add	r3, r1
 800d76e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d772:	b191      	cbz	r1, 800d79a <__mdiff+0x11a>
 800d774:	6117      	str	r7, [r2, #16]
 800d776:	e79d      	b.n	800d6b4 <__mdiff+0x34>
 800d778:	f854 1b04 	ldr.w	r1, [r4], #4
 800d77c:	46e6      	mov	lr, ip
 800d77e:	0c08      	lsrs	r0, r1, #16
 800d780:	fa1c fc81 	uxtah	ip, ip, r1
 800d784:	4471      	add	r1, lr
 800d786:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d78a:	b289      	uxth	r1, r1
 800d78c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d790:	f846 1b04 	str.w	r1, [r6], #4
 800d794:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d798:	e7dd      	b.n	800d756 <__mdiff+0xd6>
 800d79a:	3f01      	subs	r7, #1
 800d79c:	e7e7      	b.n	800d76e <__mdiff+0xee>
 800d79e:	bf00      	nop
 800d7a0:	0800e809 	.word	0x0800e809
 800d7a4:	0800e87a 	.word	0x0800e87a

0800d7a8 <__ulp>:
 800d7a8:	b082      	sub	sp, #8
 800d7aa:	ed8d 0b00 	vstr	d0, [sp]
 800d7ae:	9a01      	ldr	r2, [sp, #4]
 800d7b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f0 <__ulp+0x48>)
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	dc08      	bgt.n	800d7ce <__ulp+0x26>
 800d7bc:	425b      	negs	r3, r3
 800d7be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d7c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d7c6:	da04      	bge.n	800d7d2 <__ulp+0x2a>
 800d7c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d7cc:	4113      	asrs	r3, r2
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	e008      	b.n	800d7e4 <__ulp+0x3c>
 800d7d2:	f1a2 0314 	sub.w	r3, r2, #20
 800d7d6:	2b1e      	cmp	r3, #30
 800d7d8:	bfda      	itte	le
 800d7da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d7de:	40da      	lsrle	r2, r3
 800d7e0:	2201      	movgt	r2, #1
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	ec41 0b10 	vmov	d0, r0, r1
 800d7ec:	b002      	add	sp, #8
 800d7ee:	4770      	bx	lr
 800d7f0:	7ff00000 	.word	0x7ff00000

0800d7f4 <__b2d>:
 800d7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f8:	6906      	ldr	r6, [r0, #16]
 800d7fa:	f100 0814 	add.w	r8, r0, #20
 800d7fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d802:	1f37      	subs	r7, r6, #4
 800d804:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d808:	4610      	mov	r0, r2
 800d80a:	f7ff fd4b 	bl	800d2a4 <__hi0bits>
 800d80e:	f1c0 0320 	rsb	r3, r0, #32
 800d812:	280a      	cmp	r0, #10
 800d814:	600b      	str	r3, [r1, #0]
 800d816:	491b      	ldr	r1, [pc, #108]	@ (800d884 <__b2d+0x90>)
 800d818:	dc15      	bgt.n	800d846 <__b2d+0x52>
 800d81a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d81e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d822:	45b8      	cmp	r8, r7
 800d824:	ea43 0501 	orr.w	r5, r3, r1
 800d828:	bf34      	ite	cc
 800d82a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d82e:	2300      	movcs	r3, #0
 800d830:	3015      	adds	r0, #21
 800d832:	fa02 f000 	lsl.w	r0, r2, r0
 800d836:	fa23 f30c 	lsr.w	r3, r3, ip
 800d83a:	4303      	orrs	r3, r0
 800d83c:	461c      	mov	r4, r3
 800d83e:	ec45 4b10 	vmov	d0, r4, r5
 800d842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d846:	45b8      	cmp	r8, r7
 800d848:	bf3a      	itte	cc
 800d84a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d84e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d852:	2300      	movcs	r3, #0
 800d854:	380b      	subs	r0, #11
 800d856:	d012      	beq.n	800d87e <__b2d+0x8a>
 800d858:	f1c0 0120 	rsb	r1, r0, #32
 800d85c:	fa23 f401 	lsr.w	r4, r3, r1
 800d860:	4082      	lsls	r2, r0
 800d862:	4322      	orrs	r2, r4
 800d864:	4547      	cmp	r7, r8
 800d866:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d86a:	bf8c      	ite	hi
 800d86c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d870:	2200      	movls	r2, #0
 800d872:	4083      	lsls	r3, r0
 800d874:	40ca      	lsrs	r2, r1
 800d876:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d87a:	4313      	orrs	r3, r2
 800d87c:	e7de      	b.n	800d83c <__b2d+0x48>
 800d87e:	ea42 0501 	orr.w	r5, r2, r1
 800d882:	e7db      	b.n	800d83c <__b2d+0x48>
 800d884:	3ff00000 	.word	0x3ff00000

0800d888 <__d2b>:
 800d888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d88c:	460f      	mov	r7, r1
 800d88e:	2101      	movs	r1, #1
 800d890:	ec59 8b10 	vmov	r8, r9, d0
 800d894:	4616      	mov	r6, r2
 800d896:	f7ff fc13 	bl	800d0c0 <_Balloc>
 800d89a:	4604      	mov	r4, r0
 800d89c:	b930      	cbnz	r0, 800d8ac <__d2b+0x24>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	4b23      	ldr	r3, [pc, #140]	@ (800d930 <__d2b+0xa8>)
 800d8a2:	4824      	ldr	r0, [pc, #144]	@ (800d934 <__d2b+0xac>)
 800d8a4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8a8:	f000 faf6 	bl	800de98 <__assert_func>
 800d8ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8b4:	b10d      	cbz	r5, 800d8ba <__d2b+0x32>
 800d8b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8ba:	9301      	str	r3, [sp, #4]
 800d8bc:	f1b8 0300 	subs.w	r3, r8, #0
 800d8c0:	d023      	beq.n	800d90a <__d2b+0x82>
 800d8c2:	4668      	mov	r0, sp
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	f7ff fd0c 	bl	800d2e2 <__lo0bits>
 800d8ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8ce:	b1d0      	cbz	r0, 800d906 <__d2b+0x7e>
 800d8d0:	f1c0 0320 	rsb	r3, r0, #32
 800d8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d8:	430b      	orrs	r3, r1
 800d8da:	40c2      	lsrs	r2, r0
 800d8dc:	6163      	str	r3, [r4, #20]
 800d8de:	9201      	str	r2, [sp, #4]
 800d8e0:	9b01      	ldr	r3, [sp, #4]
 800d8e2:	61a3      	str	r3, [r4, #24]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	bf0c      	ite	eq
 800d8e8:	2201      	moveq	r2, #1
 800d8ea:	2202      	movne	r2, #2
 800d8ec:	6122      	str	r2, [r4, #16]
 800d8ee:	b1a5      	cbz	r5, 800d91a <__d2b+0x92>
 800d8f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d8f4:	4405      	add	r5, r0
 800d8f6:	603d      	str	r5, [r7, #0]
 800d8f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d8fc:	6030      	str	r0, [r6, #0]
 800d8fe:	4620      	mov	r0, r4
 800d900:	b003      	add	sp, #12
 800d902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d906:	6161      	str	r1, [r4, #20]
 800d908:	e7ea      	b.n	800d8e0 <__d2b+0x58>
 800d90a:	a801      	add	r0, sp, #4
 800d90c:	f7ff fce9 	bl	800d2e2 <__lo0bits>
 800d910:	9b01      	ldr	r3, [sp, #4]
 800d912:	6163      	str	r3, [r4, #20]
 800d914:	3020      	adds	r0, #32
 800d916:	2201      	movs	r2, #1
 800d918:	e7e8      	b.n	800d8ec <__d2b+0x64>
 800d91a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d91e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d922:	6038      	str	r0, [r7, #0]
 800d924:	6918      	ldr	r0, [r3, #16]
 800d926:	f7ff fcbd 	bl	800d2a4 <__hi0bits>
 800d92a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d92e:	e7e5      	b.n	800d8fc <__d2b+0x74>
 800d930:	0800e809 	.word	0x0800e809
 800d934:	0800e87a 	.word	0x0800e87a

0800d938 <__ratio>:
 800d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93c:	b085      	sub	sp, #20
 800d93e:	e9cd 1000 	strd	r1, r0, [sp]
 800d942:	a902      	add	r1, sp, #8
 800d944:	f7ff ff56 	bl	800d7f4 <__b2d>
 800d948:	9800      	ldr	r0, [sp, #0]
 800d94a:	a903      	add	r1, sp, #12
 800d94c:	ec55 4b10 	vmov	r4, r5, d0
 800d950:	f7ff ff50 	bl	800d7f4 <__b2d>
 800d954:	9b01      	ldr	r3, [sp, #4]
 800d956:	6919      	ldr	r1, [r3, #16]
 800d958:	9b00      	ldr	r3, [sp, #0]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	1ac9      	subs	r1, r1, r3
 800d95e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d962:	1a9b      	subs	r3, r3, r2
 800d964:	ec5b ab10 	vmov	sl, fp, d0
 800d968:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	bfce      	itee	gt
 800d970:	462a      	movgt	r2, r5
 800d972:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d976:	465a      	movle	r2, fp
 800d978:	462f      	mov	r7, r5
 800d97a:	46d9      	mov	r9, fp
 800d97c:	bfcc      	ite	gt
 800d97e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d982:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d986:	464b      	mov	r3, r9
 800d988:	4652      	mov	r2, sl
 800d98a:	4620      	mov	r0, r4
 800d98c:	4639      	mov	r1, r7
 800d98e:	f7f2 ff7d 	bl	800088c <__aeabi_ddiv>
 800d992:	ec41 0b10 	vmov	d0, r0, r1
 800d996:	b005      	add	sp, #20
 800d998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d99c <__copybits>:
 800d99c:	3901      	subs	r1, #1
 800d99e:	b570      	push	{r4, r5, r6, lr}
 800d9a0:	1149      	asrs	r1, r1, #5
 800d9a2:	6914      	ldr	r4, [r2, #16]
 800d9a4:	3101      	adds	r1, #1
 800d9a6:	f102 0314 	add.w	r3, r2, #20
 800d9aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d9ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9b2:	1f05      	subs	r5, r0, #4
 800d9b4:	42a3      	cmp	r3, r4
 800d9b6:	d30c      	bcc.n	800d9d2 <__copybits+0x36>
 800d9b8:	1aa3      	subs	r3, r4, r2
 800d9ba:	3b11      	subs	r3, #17
 800d9bc:	f023 0303 	bic.w	r3, r3, #3
 800d9c0:	3211      	adds	r2, #17
 800d9c2:	42a2      	cmp	r2, r4
 800d9c4:	bf88      	it	hi
 800d9c6:	2300      	movhi	r3, #0
 800d9c8:	4418      	add	r0, r3
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	4288      	cmp	r0, r1
 800d9ce:	d305      	bcc.n	800d9dc <__copybits+0x40>
 800d9d0:	bd70      	pop	{r4, r5, r6, pc}
 800d9d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d9d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d9da:	e7eb      	b.n	800d9b4 <__copybits+0x18>
 800d9dc:	f840 3b04 	str.w	r3, [r0], #4
 800d9e0:	e7f4      	b.n	800d9cc <__copybits+0x30>

0800d9e2 <__any_on>:
 800d9e2:	f100 0214 	add.w	r2, r0, #20
 800d9e6:	6900      	ldr	r0, [r0, #16]
 800d9e8:	114b      	asrs	r3, r1, #5
 800d9ea:	4298      	cmp	r0, r3
 800d9ec:	b510      	push	{r4, lr}
 800d9ee:	db11      	blt.n	800da14 <__any_on+0x32>
 800d9f0:	dd0a      	ble.n	800da08 <__any_on+0x26>
 800d9f2:	f011 011f 	ands.w	r1, r1, #31
 800d9f6:	d007      	beq.n	800da08 <__any_on+0x26>
 800d9f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d9fc:	fa24 f001 	lsr.w	r0, r4, r1
 800da00:	fa00 f101 	lsl.w	r1, r0, r1
 800da04:	428c      	cmp	r4, r1
 800da06:	d10b      	bne.n	800da20 <__any_on+0x3e>
 800da08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d803      	bhi.n	800da18 <__any_on+0x36>
 800da10:	2000      	movs	r0, #0
 800da12:	bd10      	pop	{r4, pc}
 800da14:	4603      	mov	r3, r0
 800da16:	e7f7      	b.n	800da08 <__any_on+0x26>
 800da18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da1c:	2900      	cmp	r1, #0
 800da1e:	d0f5      	beq.n	800da0c <__any_on+0x2a>
 800da20:	2001      	movs	r0, #1
 800da22:	e7f6      	b.n	800da12 <__any_on+0x30>

0800da24 <__ascii_wctomb>:
 800da24:	4603      	mov	r3, r0
 800da26:	4608      	mov	r0, r1
 800da28:	b141      	cbz	r1, 800da3c <__ascii_wctomb+0x18>
 800da2a:	2aff      	cmp	r2, #255	@ 0xff
 800da2c:	d904      	bls.n	800da38 <__ascii_wctomb+0x14>
 800da2e:	228a      	movs	r2, #138	@ 0x8a
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	f04f 30ff 	mov.w	r0, #4294967295
 800da36:	4770      	bx	lr
 800da38:	700a      	strb	r2, [r1, #0]
 800da3a:	2001      	movs	r0, #1
 800da3c:	4770      	bx	lr

0800da3e <__ssputs_r>:
 800da3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da42:	688e      	ldr	r6, [r1, #8]
 800da44:	461f      	mov	r7, r3
 800da46:	42be      	cmp	r6, r7
 800da48:	680b      	ldr	r3, [r1, #0]
 800da4a:	4682      	mov	sl, r0
 800da4c:	460c      	mov	r4, r1
 800da4e:	4690      	mov	r8, r2
 800da50:	d82d      	bhi.n	800daae <__ssputs_r+0x70>
 800da52:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da56:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da5a:	d026      	beq.n	800daaa <__ssputs_r+0x6c>
 800da5c:	6965      	ldr	r5, [r4, #20]
 800da5e:	6909      	ldr	r1, [r1, #16]
 800da60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da64:	eba3 0901 	sub.w	r9, r3, r1
 800da68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da6c:	1c7b      	adds	r3, r7, #1
 800da6e:	444b      	add	r3, r9
 800da70:	106d      	asrs	r5, r5, #1
 800da72:	429d      	cmp	r5, r3
 800da74:	bf38      	it	cc
 800da76:	461d      	movcc	r5, r3
 800da78:	0553      	lsls	r3, r2, #21
 800da7a:	d527      	bpl.n	800dacc <__ssputs_r+0x8e>
 800da7c:	4629      	mov	r1, r5
 800da7e:	f7ff fa81 	bl	800cf84 <_malloc_r>
 800da82:	4606      	mov	r6, r0
 800da84:	b360      	cbz	r0, 800dae0 <__ssputs_r+0xa2>
 800da86:	6921      	ldr	r1, [r4, #16]
 800da88:	464a      	mov	r2, r9
 800da8a:	f7fe f868 	bl	800bb5e <memcpy>
 800da8e:	89a3      	ldrh	r3, [r4, #12]
 800da90:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da98:	81a3      	strh	r3, [r4, #12]
 800da9a:	6126      	str	r6, [r4, #16]
 800da9c:	6165      	str	r5, [r4, #20]
 800da9e:	444e      	add	r6, r9
 800daa0:	eba5 0509 	sub.w	r5, r5, r9
 800daa4:	6026      	str	r6, [r4, #0]
 800daa6:	60a5      	str	r5, [r4, #8]
 800daa8:	463e      	mov	r6, r7
 800daaa:	42be      	cmp	r6, r7
 800daac:	d900      	bls.n	800dab0 <__ssputs_r+0x72>
 800daae:	463e      	mov	r6, r7
 800dab0:	6820      	ldr	r0, [r4, #0]
 800dab2:	4632      	mov	r2, r6
 800dab4:	4641      	mov	r1, r8
 800dab6:	f000 f9c5 	bl	800de44 <memmove>
 800daba:	68a3      	ldr	r3, [r4, #8]
 800dabc:	1b9b      	subs	r3, r3, r6
 800dabe:	60a3      	str	r3, [r4, #8]
 800dac0:	6823      	ldr	r3, [r4, #0]
 800dac2:	4433      	add	r3, r6
 800dac4:	6023      	str	r3, [r4, #0]
 800dac6:	2000      	movs	r0, #0
 800dac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dacc:	462a      	mov	r2, r5
 800dace:	f000 fa15 	bl	800defc <_realloc_r>
 800dad2:	4606      	mov	r6, r0
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d1e0      	bne.n	800da9a <__ssputs_r+0x5c>
 800dad8:	6921      	ldr	r1, [r4, #16]
 800dada:	4650      	mov	r0, sl
 800dadc:	f7fe fea4 	bl	800c828 <_free_r>
 800dae0:	230c      	movs	r3, #12
 800dae2:	f8ca 3000 	str.w	r3, [sl]
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daec:	81a3      	strh	r3, [r4, #12]
 800daee:	f04f 30ff 	mov.w	r0, #4294967295
 800daf2:	e7e9      	b.n	800dac8 <__ssputs_r+0x8a>

0800daf4 <_svfiprintf_r>:
 800daf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf8:	4698      	mov	r8, r3
 800dafa:	898b      	ldrh	r3, [r1, #12]
 800dafc:	061b      	lsls	r3, r3, #24
 800dafe:	b09d      	sub	sp, #116	@ 0x74
 800db00:	4607      	mov	r7, r0
 800db02:	460d      	mov	r5, r1
 800db04:	4614      	mov	r4, r2
 800db06:	d510      	bpl.n	800db2a <_svfiprintf_r+0x36>
 800db08:	690b      	ldr	r3, [r1, #16]
 800db0a:	b973      	cbnz	r3, 800db2a <_svfiprintf_r+0x36>
 800db0c:	2140      	movs	r1, #64	@ 0x40
 800db0e:	f7ff fa39 	bl	800cf84 <_malloc_r>
 800db12:	6028      	str	r0, [r5, #0]
 800db14:	6128      	str	r0, [r5, #16]
 800db16:	b930      	cbnz	r0, 800db26 <_svfiprintf_r+0x32>
 800db18:	230c      	movs	r3, #12
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	b01d      	add	sp, #116	@ 0x74
 800db22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db26:	2340      	movs	r3, #64	@ 0x40
 800db28:	616b      	str	r3, [r5, #20]
 800db2a:	2300      	movs	r3, #0
 800db2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db2e:	2320      	movs	r3, #32
 800db30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db34:	f8cd 800c 	str.w	r8, [sp, #12]
 800db38:	2330      	movs	r3, #48	@ 0x30
 800db3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dcd8 <_svfiprintf_r+0x1e4>
 800db3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db42:	f04f 0901 	mov.w	r9, #1
 800db46:	4623      	mov	r3, r4
 800db48:	469a      	mov	sl, r3
 800db4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db4e:	b10a      	cbz	r2, 800db54 <_svfiprintf_r+0x60>
 800db50:	2a25      	cmp	r2, #37	@ 0x25
 800db52:	d1f9      	bne.n	800db48 <_svfiprintf_r+0x54>
 800db54:	ebba 0b04 	subs.w	fp, sl, r4
 800db58:	d00b      	beq.n	800db72 <_svfiprintf_r+0x7e>
 800db5a:	465b      	mov	r3, fp
 800db5c:	4622      	mov	r2, r4
 800db5e:	4629      	mov	r1, r5
 800db60:	4638      	mov	r0, r7
 800db62:	f7ff ff6c 	bl	800da3e <__ssputs_r>
 800db66:	3001      	adds	r0, #1
 800db68:	f000 80a7 	beq.w	800dcba <_svfiprintf_r+0x1c6>
 800db6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db6e:	445a      	add	r2, fp
 800db70:	9209      	str	r2, [sp, #36]	@ 0x24
 800db72:	f89a 3000 	ldrb.w	r3, [sl]
 800db76:	2b00      	cmp	r3, #0
 800db78:	f000 809f 	beq.w	800dcba <_svfiprintf_r+0x1c6>
 800db7c:	2300      	movs	r3, #0
 800db7e:	f04f 32ff 	mov.w	r2, #4294967295
 800db82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db86:	f10a 0a01 	add.w	sl, sl, #1
 800db8a:	9304      	str	r3, [sp, #16]
 800db8c:	9307      	str	r3, [sp, #28]
 800db8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db92:	931a      	str	r3, [sp, #104]	@ 0x68
 800db94:	4654      	mov	r4, sl
 800db96:	2205      	movs	r2, #5
 800db98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9c:	484e      	ldr	r0, [pc, #312]	@ (800dcd8 <_svfiprintf_r+0x1e4>)
 800db9e:	f7f2 fb37 	bl	8000210 <memchr>
 800dba2:	9a04      	ldr	r2, [sp, #16]
 800dba4:	b9d8      	cbnz	r0, 800dbde <_svfiprintf_r+0xea>
 800dba6:	06d0      	lsls	r0, r2, #27
 800dba8:	bf44      	itt	mi
 800dbaa:	2320      	movmi	r3, #32
 800dbac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbb0:	0711      	lsls	r1, r2, #28
 800dbb2:	bf44      	itt	mi
 800dbb4:	232b      	movmi	r3, #43	@ 0x2b
 800dbb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbba:	f89a 3000 	ldrb.w	r3, [sl]
 800dbbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbc0:	d015      	beq.n	800dbee <_svfiprintf_r+0xfa>
 800dbc2:	9a07      	ldr	r2, [sp, #28]
 800dbc4:	4654      	mov	r4, sl
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	f04f 0c0a 	mov.w	ip, #10
 800dbcc:	4621      	mov	r1, r4
 800dbce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbd2:	3b30      	subs	r3, #48	@ 0x30
 800dbd4:	2b09      	cmp	r3, #9
 800dbd6:	d94b      	bls.n	800dc70 <_svfiprintf_r+0x17c>
 800dbd8:	b1b0      	cbz	r0, 800dc08 <_svfiprintf_r+0x114>
 800dbda:	9207      	str	r2, [sp, #28]
 800dbdc:	e014      	b.n	800dc08 <_svfiprintf_r+0x114>
 800dbde:	eba0 0308 	sub.w	r3, r0, r8
 800dbe2:	fa09 f303 	lsl.w	r3, r9, r3
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	9304      	str	r3, [sp, #16]
 800dbea:	46a2      	mov	sl, r4
 800dbec:	e7d2      	b.n	800db94 <_svfiprintf_r+0xa0>
 800dbee:	9b03      	ldr	r3, [sp, #12]
 800dbf0:	1d19      	adds	r1, r3, #4
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	9103      	str	r1, [sp, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	bfbb      	ittet	lt
 800dbfa:	425b      	neglt	r3, r3
 800dbfc:	f042 0202 	orrlt.w	r2, r2, #2
 800dc00:	9307      	strge	r3, [sp, #28]
 800dc02:	9307      	strlt	r3, [sp, #28]
 800dc04:	bfb8      	it	lt
 800dc06:	9204      	strlt	r2, [sp, #16]
 800dc08:	7823      	ldrb	r3, [r4, #0]
 800dc0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc0c:	d10a      	bne.n	800dc24 <_svfiprintf_r+0x130>
 800dc0e:	7863      	ldrb	r3, [r4, #1]
 800dc10:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc12:	d132      	bne.n	800dc7a <_svfiprintf_r+0x186>
 800dc14:	9b03      	ldr	r3, [sp, #12]
 800dc16:	1d1a      	adds	r2, r3, #4
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	9203      	str	r2, [sp, #12]
 800dc1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc20:	3402      	adds	r4, #2
 800dc22:	9305      	str	r3, [sp, #20]
 800dc24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dce8 <_svfiprintf_r+0x1f4>
 800dc28:	7821      	ldrb	r1, [r4, #0]
 800dc2a:	2203      	movs	r2, #3
 800dc2c:	4650      	mov	r0, sl
 800dc2e:	f7f2 faef 	bl	8000210 <memchr>
 800dc32:	b138      	cbz	r0, 800dc44 <_svfiprintf_r+0x150>
 800dc34:	9b04      	ldr	r3, [sp, #16]
 800dc36:	eba0 000a 	sub.w	r0, r0, sl
 800dc3a:	2240      	movs	r2, #64	@ 0x40
 800dc3c:	4082      	lsls	r2, r0
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	3401      	adds	r4, #1
 800dc42:	9304      	str	r3, [sp, #16]
 800dc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc48:	4824      	ldr	r0, [pc, #144]	@ (800dcdc <_svfiprintf_r+0x1e8>)
 800dc4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc4e:	2206      	movs	r2, #6
 800dc50:	f7f2 fade 	bl	8000210 <memchr>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d036      	beq.n	800dcc6 <_svfiprintf_r+0x1d2>
 800dc58:	4b21      	ldr	r3, [pc, #132]	@ (800dce0 <_svfiprintf_r+0x1ec>)
 800dc5a:	bb1b      	cbnz	r3, 800dca4 <_svfiprintf_r+0x1b0>
 800dc5c:	9b03      	ldr	r3, [sp, #12]
 800dc5e:	3307      	adds	r3, #7
 800dc60:	f023 0307 	bic.w	r3, r3, #7
 800dc64:	3308      	adds	r3, #8
 800dc66:	9303      	str	r3, [sp, #12]
 800dc68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc6a:	4433      	add	r3, r6
 800dc6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc6e:	e76a      	b.n	800db46 <_svfiprintf_r+0x52>
 800dc70:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc74:	460c      	mov	r4, r1
 800dc76:	2001      	movs	r0, #1
 800dc78:	e7a8      	b.n	800dbcc <_svfiprintf_r+0xd8>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	3401      	adds	r4, #1
 800dc7e:	9305      	str	r3, [sp, #20]
 800dc80:	4619      	mov	r1, r3
 800dc82:	f04f 0c0a 	mov.w	ip, #10
 800dc86:	4620      	mov	r0, r4
 800dc88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc8c:	3a30      	subs	r2, #48	@ 0x30
 800dc8e:	2a09      	cmp	r2, #9
 800dc90:	d903      	bls.n	800dc9a <_svfiprintf_r+0x1a6>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d0c6      	beq.n	800dc24 <_svfiprintf_r+0x130>
 800dc96:	9105      	str	r1, [sp, #20]
 800dc98:	e7c4      	b.n	800dc24 <_svfiprintf_r+0x130>
 800dc9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc9e:	4604      	mov	r4, r0
 800dca0:	2301      	movs	r3, #1
 800dca2:	e7f0      	b.n	800dc86 <_svfiprintf_r+0x192>
 800dca4:	ab03      	add	r3, sp, #12
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	462a      	mov	r2, r5
 800dcaa:	4b0e      	ldr	r3, [pc, #56]	@ (800dce4 <_svfiprintf_r+0x1f0>)
 800dcac:	a904      	add	r1, sp, #16
 800dcae:	4638      	mov	r0, r7
 800dcb0:	f7fd f9b2 	bl	800b018 <_printf_float>
 800dcb4:	1c42      	adds	r2, r0, #1
 800dcb6:	4606      	mov	r6, r0
 800dcb8:	d1d6      	bne.n	800dc68 <_svfiprintf_r+0x174>
 800dcba:	89ab      	ldrh	r3, [r5, #12]
 800dcbc:	065b      	lsls	r3, r3, #25
 800dcbe:	f53f af2d 	bmi.w	800db1c <_svfiprintf_r+0x28>
 800dcc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcc4:	e72c      	b.n	800db20 <_svfiprintf_r+0x2c>
 800dcc6:	ab03      	add	r3, sp, #12
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	462a      	mov	r2, r5
 800dccc:	4b05      	ldr	r3, [pc, #20]	@ (800dce4 <_svfiprintf_r+0x1f0>)
 800dcce:	a904      	add	r1, sp, #16
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	f7fd fc39 	bl	800b548 <_printf_i>
 800dcd6:	e7ed      	b.n	800dcb4 <_svfiprintf_r+0x1c0>
 800dcd8:	0800e9d0 	.word	0x0800e9d0
 800dcdc:	0800e9da 	.word	0x0800e9da
 800dce0:	0800b019 	.word	0x0800b019
 800dce4:	0800da3f 	.word	0x0800da3f
 800dce8:	0800e9d6 	.word	0x0800e9d6

0800dcec <__sflush_r>:
 800dcec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf4:	0716      	lsls	r6, r2, #28
 800dcf6:	4605      	mov	r5, r0
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	d454      	bmi.n	800dda6 <__sflush_r+0xba>
 800dcfc:	684b      	ldr	r3, [r1, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	dc02      	bgt.n	800dd08 <__sflush_r+0x1c>
 800dd02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	dd48      	ble.n	800dd9a <__sflush_r+0xae>
 800dd08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd0a:	2e00      	cmp	r6, #0
 800dd0c:	d045      	beq.n	800dd9a <__sflush_r+0xae>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd14:	682f      	ldr	r7, [r5, #0]
 800dd16:	6a21      	ldr	r1, [r4, #32]
 800dd18:	602b      	str	r3, [r5, #0]
 800dd1a:	d030      	beq.n	800dd7e <__sflush_r+0x92>
 800dd1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd1e:	89a3      	ldrh	r3, [r4, #12]
 800dd20:	0759      	lsls	r1, r3, #29
 800dd22:	d505      	bpl.n	800dd30 <__sflush_r+0x44>
 800dd24:	6863      	ldr	r3, [r4, #4]
 800dd26:	1ad2      	subs	r2, r2, r3
 800dd28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd2a:	b10b      	cbz	r3, 800dd30 <__sflush_r+0x44>
 800dd2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd2e:	1ad2      	subs	r2, r2, r3
 800dd30:	2300      	movs	r3, #0
 800dd32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd34:	6a21      	ldr	r1, [r4, #32]
 800dd36:	4628      	mov	r0, r5
 800dd38:	47b0      	blx	r6
 800dd3a:	1c43      	adds	r3, r0, #1
 800dd3c:	89a3      	ldrh	r3, [r4, #12]
 800dd3e:	d106      	bne.n	800dd4e <__sflush_r+0x62>
 800dd40:	6829      	ldr	r1, [r5, #0]
 800dd42:	291d      	cmp	r1, #29
 800dd44:	d82b      	bhi.n	800dd9e <__sflush_r+0xb2>
 800dd46:	4a2a      	ldr	r2, [pc, #168]	@ (800ddf0 <__sflush_r+0x104>)
 800dd48:	410a      	asrs	r2, r1
 800dd4a:	07d6      	lsls	r6, r2, #31
 800dd4c:	d427      	bmi.n	800dd9e <__sflush_r+0xb2>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	6062      	str	r2, [r4, #4]
 800dd52:	04d9      	lsls	r1, r3, #19
 800dd54:	6922      	ldr	r2, [r4, #16]
 800dd56:	6022      	str	r2, [r4, #0]
 800dd58:	d504      	bpl.n	800dd64 <__sflush_r+0x78>
 800dd5a:	1c42      	adds	r2, r0, #1
 800dd5c:	d101      	bne.n	800dd62 <__sflush_r+0x76>
 800dd5e:	682b      	ldr	r3, [r5, #0]
 800dd60:	b903      	cbnz	r3, 800dd64 <__sflush_r+0x78>
 800dd62:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd66:	602f      	str	r7, [r5, #0]
 800dd68:	b1b9      	cbz	r1, 800dd9a <__sflush_r+0xae>
 800dd6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd6e:	4299      	cmp	r1, r3
 800dd70:	d002      	beq.n	800dd78 <__sflush_r+0x8c>
 800dd72:	4628      	mov	r0, r5
 800dd74:	f7fe fd58 	bl	800c828 <_free_r>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd7c:	e00d      	b.n	800dd9a <__sflush_r+0xae>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	4628      	mov	r0, r5
 800dd82:	47b0      	blx	r6
 800dd84:	4602      	mov	r2, r0
 800dd86:	1c50      	adds	r0, r2, #1
 800dd88:	d1c9      	bne.n	800dd1e <__sflush_r+0x32>
 800dd8a:	682b      	ldr	r3, [r5, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d0c6      	beq.n	800dd1e <__sflush_r+0x32>
 800dd90:	2b1d      	cmp	r3, #29
 800dd92:	d001      	beq.n	800dd98 <__sflush_r+0xac>
 800dd94:	2b16      	cmp	r3, #22
 800dd96:	d11e      	bne.n	800ddd6 <__sflush_r+0xea>
 800dd98:	602f      	str	r7, [r5, #0]
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	e022      	b.n	800dde4 <__sflush_r+0xf8>
 800dd9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dda2:	b21b      	sxth	r3, r3
 800dda4:	e01b      	b.n	800ddde <__sflush_r+0xf2>
 800dda6:	690f      	ldr	r7, [r1, #16]
 800dda8:	2f00      	cmp	r7, #0
 800ddaa:	d0f6      	beq.n	800dd9a <__sflush_r+0xae>
 800ddac:	0793      	lsls	r3, r2, #30
 800ddae:	680e      	ldr	r6, [r1, #0]
 800ddb0:	bf08      	it	eq
 800ddb2:	694b      	ldreq	r3, [r1, #20]
 800ddb4:	600f      	str	r7, [r1, #0]
 800ddb6:	bf18      	it	ne
 800ddb8:	2300      	movne	r3, #0
 800ddba:	eba6 0807 	sub.w	r8, r6, r7
 800ddbe:	608b      	str	r3, [r1, #8]
 800ddc0:	f1b8 0f00 	cmp.w	r8, #0
 800ddc4:	dde9      	ble.n	800dd9a <__sflush_r+0xae>
 800ddc6:	6a21      	ldr	r1, [r4, #32]
 800ddc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ddca:	4643      	mov	r3, r8
 800ddcc:	463a      	mov	r2, r7
 800ddce:	4628      	mov	r0, r5
 800ddd0:	47b0      	blx	r6
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	dc08      	bgt.n	800dde8 <__sflush_r+0xfc>
 800ddd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddde:	81a3      	strh	r3, [r4, #12]
 800dde0:	f04f 30ff 	mov.w	r0, #4294967295
 800dde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde8:	4407      	add	r7, r0
 800ddea:	eba8 0800 	sub.w	r8, r8, r0
 800ddee:	e7e7      	b.n	800ddc0 <__sflush_r+0xd4>
 800ddf0:	dfbffffe 	.word	0xdfbffffe

0800ddf4 <_fflush_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	690b      	ldr	r3, [r1, #16]
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	b913      	cbnz	r3, 800de04 <_fflush_r+0x10>
 800ddfe:	2500      	movs	r5, #0
 800de00:	4628      	mov	r0, r5
 800de02:	bd38      	pop	{r3, r4, r5, pc}
 800de04:	b118      	cbz	r0, 800de0e <_fflush_r+0x1a>
 800de06:	6a03      	ldr	r3, [r0, #32]
 800de08:	b90b      	cbnz	r3, 800de0e <_fflush_r+0x1a>
 800de0a:	f7fd fd49 	bl	800b8a0 <__sinit>
 800de0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0f3      	beq.n	800ddfe <_fflush_r+0xa>
 800de16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de18:	07d0      	lsls	r0, r2, #31
 800de1a:	d404      	bmi.n	800de26 <_fflush_r+0x32>
 800de1c:	0599      	lsls	r1, r3, #22
 800de1e:	d402      	bmi.n	800de26 <_fflush_r+0x32>
 800de20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de22:	f7fd fe9a 	bl	800bb5a <__retarget_lock_acquire_recursive>
 800de26:	4628      	mov	r0, r5
 800de28:	4621      	mov	r1, r4
 800de2a:	f7ff ff5f 	bl	800dcec <__sflush_r>
 800de2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de30:	07da      	lsls	r2, r3, #31
 800de32:	4605      	mov	r5, r0
 800de34:	d4e4      	bmi.n	800de00 <_fflush_r+0xc>
 800de36:	89a3      	ldrh	r3, [r4, #12]
 800de38:	059b      	lsls	r3, r3, #22
 800de3a:	d4e1      	bmi.n	800de00 <_fflush_r+0xc>
 800de3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de3e:	f7fd fe8d 	bl	800bb5c <__retarget_lock_release_recursive>
 800de42:	e7dd      	b.n	800de00 <_fflush_r+0xc>

0800de44 <memmove>:
 800de44:	4288      	cmp	r0, r1
 800de46:	b510      	push	{r4, lr}
 800de48:	eb01 0402 	add.w	r4, r1, r2
 800de4c:	d902      	bls.n	800de54 <memmove+0x10>
 800de4e:	4284      	cmp	r4, r0
 800de50:	4623      	mov	r3, r4
 800de52:	d807      	bhi.n	800de64 <memmove+0x20>
 800de54:	1e43      	subs	r3, r0, #1
 800de56:	42a1      	cmp	r1, r4
 800de58:	d008      	beq.n	800de6c <memmove+0x28>
 800de5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de62:	e7f8      	b.n	800de56 <memmove+0x12>
 800de64:	4402      	add	r2, r0
 800de66:	4601      	mov	r1, r0
 800de68:	428a      	cmp	r2, r1
 800de6a:	d100      	bne.n	800de6e <memmove+0x2a>
 800de6c:	bd10      	pop	{r4, pc}
 800de6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de76:	e7f7      	b.n	800de68 <memmove+0x24>

0800de78 <_sbrk_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d06      	ldr	r5, [pc, #24]	@ (800de94 <_sbrk_r+0x1c>)
 800de7c:	2300      	movs	r3, #0
 800de7e:	4604      	mov	r4, r0
 800de80:	4608      	mov	r0, r1
 800de82:	602b      	str	r3, [r5, #0]
 800de84:	f7f5 fa6a 	bl	800335c <_sbrk>
 800de88:	1c43      	adds	r3, r0, #1
 800de8a:	d102      	bne.n	800de92 <_sbrk_r+0x1a>
 800de8c:	682b      	ldr	r3, [r5, #0]
 800de8e:	b103      	cbz	r3, 800de92 <_sbrk_r+0x1a>
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	20000ba0 	.word	0x20000ba0

0800de98 <__assert_func>:
 800de98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de9a:	4614      	mov	r4, r2
 800de9c:	461a      	mov	r2, r3
 800de9e:	4b09      	ldr	r3, [pc, #36]	@ (800dec4 <__assert_func+0x2c>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4605      	mov	r5, r0
 800dea4:	68d8      	ldr	r0, [r3, #12]
 800dea6:	b954      	cbnz	r4, 800debe <__assert_func+0x26>
 800dea8:	4b07      	ldr	r3, [pc, #28]	@ (800dec8 <__assert_func+0x30>)
 800deaa:	461c      	mov	r4, r3
 800deac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800deb0:	9100      	str	r1, [sp, #0]
 800deb2:	462b      	mov	r3, r5
 800deb4:	4905      	ldr	r1, [pc, #20]	@ (800decc <__assert_func+0x34>)
 800deb6:	f000 f84f 	bl	800df58 <fiprintf>
 800deba:	f000 f85f 	bl	800df7c <abort>
 800debe:	4b04      	ldr	r3, [pc, #16]	@ (800ded0 <__assert_func+0x38>)
 800dec0:	e7f4      	b.n	800deac <__assert_func+0x14>
 800dec2:	bf00      	nop
 800dec4:	200001e4 	.word	0x200001e4
 800dec8:	0800ea1c 	.word	0x0800ea1c
 800decc:	0800e9ee 	.word	0x0800e9ee
 800ded0:	0800e9e1 	.word	0x0800e9e1

0800ded4 <_calloc_r>:
 800ded4:	b570      	push	{r4, r5, r6, lr}
 800ded6:	fba1 5402 	umull	r5, r4, r1, r2
 800deda:	b93c      	cbnz	r4, 800deec <_calloc_r+0x18>
 800dedc:	4629      	mov	r1, r5
 800dede:	f7ff f851 	bl	800cf84 <_malloc_r>
 800dee2:	4606      	mov	r6, r0
 800dee4:	b928      	cbnz	r0, 800def2 <_calloc_r+0x1e>
 800dee6:	2600      	movs	r6, #0
 800dee8:	4630      	mov	r0, r6
 800deea:	bd70      	pop	{r4, r5, r6, pc}
 800deec:	220c      	movs	r2, #12
 800deee:	6002      	str	r2, [r0, #0]
 800def0:	e7f9      	b.n	800dee6 <_calloc_r+0x12>
 800def2:	462a      	mov	r2, r5
 800def4:	4621      	mov	r1, r4
 800def6:	f7fd fda0 	bl	800ba3a <memset>
 800defa:	e7f5      	b.n	800dee8 <_calloc_r+0x14>

0800defc <_realloc_r>:
 800defc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df00:	4680      	mov	r8, r0
 800df02:	4615      	mov	r5, r2
 800df04:	460c      	mov	r4, r1
 800df06:	b921      	cbnz	r1, 800df12 <_realloc_r+0x16>
 800df08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df0c:	4611      	mov	r1, r2
 800df0e:	f7ff b839 	b.w	800cf84 <_malloc_r>
 800df12:	b92a      	cbnz	r2, 800df20 <_realloc_r+0x24>
 800df14:	f7fe fc88 	bl	800c828 <_free_r>
 800df18:	2400      	movs	r4, #0
 800df1a:	4620      	mov	r0, r4
 800df1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df20:	f000 f833 	bl	800df8a <_malloc_usable_size_r>
 800df24:	4285      	cmp	r5, r0
 800df26:	4606      	mov	r6, r0
 800df28:	d802      	bhi.n	800df30 <_realloc_r+0x34>
 800df2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800df2e:	d8f4      	bhi.n	800df1a <_realloc_r+0x1e>
 800df30:	4629      	mov	r1, r5
 800df32:	4640      	mov	r0, r8
 800df34:	f7ff f826 	bl	800cf84 <_malloc_r>
 800df38:	4607      	mov	r7, r0
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d0ec      	beq.n	800df18 <_realloc_r+0x1c>
 800df3e:	42b5      	cmp	r5, r6
 800df40:	462a      	mov	r2, r5
 800df42:	4621      	mov	r1, r4
 800df44:	bf28      	it	cs
 800df46:	4632      	movcs	r2, r6
 800df48:	f7fd fe09 	bl	800bb5e <memcpy>
 800df4c:	4621      	mov	r1, r4
 800df4e:	4640      	mov	r0, r8
 800df50:	f7fe fc6a 	bl	800c828 <_free_r>
 800df54:	463c      	mov	r4, r7
 800df56:	e7e0      	b.n	800df1a <_realloc_r+0x1e>

0800df58 <fiprintf>:
 800df58:	b40e      	push	{r1, r2, r3}
 800df5a:	b503      	push	{r0, r1, lr}
 800df5c:	4601      	mov	r1, r0
 800df5e:	ab03      	add	r3, sp, #12
 800df60:	4805      	ldr	r0, [pc, #20]	@ (800df78 <fiprintf+0x20>)
 800df62:	f853 2b04 	ldr.w	r2, [r3], #4
 800df66:	6800      	ldr	r0, [r0, #0]
 800df68:	9301      	str	r3, [sp, #4]
 800df6a:	f000 f83f 	bl	800dfec <_vfiprintf_r>
 800df6e:	b002      	add	sp, #8
 800df70:	f85d eb04 	ldr.w	lr, [sp], #4
 800df74:	b003      	add	sp, #12
 800df76:	4770      	bx	lr
 800df78:	200001e4 	.word	0x200001e4

0800df7c <abort>:
 800df7c:	b508      	push	{r3, lr}
 800df7e:	2006      	movs	r0, #6
 800df80:	f000 fa08 	bl	800e394 <raise>
 800df84:	2001      	movs	r0, #1
 800df86:	f7f5 f971 	bl	800326c <_exit>

0800df8a <_malloc_usable_size_r>:
 800df8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df8e:	1f18      	subs	r0, r3, #4
 800df90:	2b00      	cmp	r3, #0
 800df92:	bfbc      	itt	lt
 800df94:	580b      	ldrlt	r3, [r1, r0]
 800df96:	18c0      	addlt	r0, r0, r3
 800df98:	4770      	bx	lr

0800df9a <__sfputc_r>:
 800df9a:	6893      	ldr	r3, [r2, #8]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	b410      	push	{r4}
 800dfa2:	6093      	str	r3, [r2, #8]
 800dfa4:	da08      	bge.n	800dfb8 <__sfputc_r+0x1e>
 800dfa6:	6994      	ldr	r4, [r2, #24]
 800dfa8:	42a3      	cmp	r3, r4
 800dfaa:	db01      	blt.n	800dfb0 <__sfputc_r+0x16>
 800dfac:	290a      	cmp	r1, #10
 800dfae:	d103      	bne.n	800dfb8 <__sfputc_r+0x1e>
 800dfb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfb4:	f000 b932 	b.w	800e21c <__swbuf_r>
 800dfb8:	6813      	ldr	r3, [r2, #0]
 800dfba:	1c58      	adds	r0, r3, #1
 800dfbc:	6010      	str	r0, [r2, #0]
 800dfbe:	7019      	strb	r1, [r3, #0]
 800dfc0:	4608      	mov	r0, r1
 800dfc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <__sfputs_r>:
 800dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460f      	mov	r7, r1
 800dfce:	4614      	mov	r4, r2
 800dfd0:	18d5      	adds	r5, r2, r3
 800dfd2:	42ac      	cmp	r4, r5
 800dfd4:	d101      	bne.n	800dfda <__sfputs_r+0x12>
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	e007      	b.n	800dfea <__sfputs_r+0x22>
 800dfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfde:	463a      	mov	r2, r7
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	f7ff ffda 	bl	800df9a <__sfputc_r>
 800dfe6:	1c43      	adds	r3, r0, #1
 800dfe8:	d1f3      	bne.n	800dfd2 <__sfputs_r+0xa>
 800dfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dfec <_vfiprintf_r>:
 800dfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff0:	460d      	mov	r5, r1
 800dff2:	b09d      	sub	sp, #116	@ 0x74
 800dff4:	4614      	mov	r4, r2
 800dff6:	4698      	mov	r8, r3
 800dff8:	4606      	mov	r6, r0
 800dffa:	b118      	cbz	r0, 800e004 <_vfiprintf_r+0x18>
 800dffc:	6a03      	ldr	r3, [r0, #32]
 800dffe:	b90b      	cbnz	r3, 800e004 <_vfiprintf_r+0x18>
 800e000:	f7fd fc4e 	bl	800b8a0 <__sinit>
 800e004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e006:	07d9      	lsls	r1, r3, #31
 800e008:	d405      	bmi.n	800e016 <_vfiprintf_r+0x2a>
 800e00a:	89ab      	ldrh	r3, [r5, #12]
 800e00c:	059a      	lsls	r2, r3, #22
 800e00e:	d402      	bmi.n	800e016 <_vfiprintf_r+0x2a>
 800e010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e012:	f7fd fda2 	bl	800bb5a <__retarget_lock_acquire_recursive>
 800e016:	89ab      	ldrh	r3, [r5, #12]
 800e018:	071b      	lsls	r3, r3, #28
 800e01a:	d501      	bpl.n	800e020 <_vfiprintf_r+0x34>
 800e01c:	692b      	ldr	r3, [r5, #16]
 800e01e:	b99b      	cbnz	r3, 800e048 <_vfiprintf_r+0x5c>
 800e020:	4629      	mov	r1, r5
 800e022:	4630      	mov	r0, r6
 800e024:	f000 f938 	bl	800e298 <__swsetup_r>
 800e028:	b170      	cbz	r0, 800e048 <_vfiprintf_r+0x5c>
 800e02a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e02c:	07dc      	lsls	r4, r3, #31
 800e02e:	d504      	bpl.n	800e03a <_vfiprintf_r+0x4e>
 800e030:	f04f 30ff 	mov.w	r0, #4294967295
 800e034:	b01d      	add	sp, #116	@ 0x74
 800e036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03a:	89ab      	ldrh	r3, [r5, #12]
 800e03c:	0598      	lsls	r0, r3, #22
 800e03e:	d4f7      	bmi.n	800e030 <_vfiprintf_r+0x44>
 800e040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e042:	f7fd fd8b 	bl	800bb5c <__retarget_lock_release_recursive>
 800e046:	e7f3      	b.n	800e030 <_vfiprintf_r+0x44>
 800e048:	2300      	movs	r3, #0
 800e04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e04c:	2320      	movs	r3, #32
 800e04e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e052:	f8cd 800c 	str.w	r8, [sp, #12]
 800e056:	2330      	movs	r3, #48	@ 0x30
 800e058:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e208 <_vfiprintf_r+0x21c>
 800e05c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e060:	f04f 0901 	mov.w	r9, #1
 800e064:	4623      	mov	r3, r4
 800e066:	469a      	mov	sl, r3
 800e068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e06c:	b10a      	cbz	r2, 800e072 <_vfiprintf_r+0x86>
 800e06e:	2a25      	cmp	r2, #37	@ 0x25
 800e070:	d1f9      	bne.n	800e066 <_vfiprintf_r+0x7a>
 800e072:	ebba 0b04 	subs.w	fp, sl, r4
 800e076:	d00b      	beq.n	800e090 <_vfiprintf_r+0xa4>
 800e078:	465b      	mov	r3, fp
 800e07a:	4622      	mov	r2, r4
 800e07c:	4629      	mov	r1, r5
 800e07e:	4630      	mov	r0, r6
 800e080:	f7ff ffa2 	bl	800dfc8 <__sfputs_r>
 800e084:	3001      	adds	r0, #1
 800e086:	f000 80a7 	beq.w	800e1d8 <_vfiprintf_r+0x1ec>
 800e08a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e08c:	445a      	add	r2, fp
 800e08e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e090:	f89a 3000 	ldrb.w	r3, [sl]
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 809f 	beq.w	800e1d8 <_vfiprintf_r+0x1ec>
 800e09a:	2300      	movs	r3, #0
 800e09c:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0a4:	f10a 0a01 	add.w	sl, sl, #1
 800e0a8:	9304      	str	r3, [sp, #16]
 800e0aa:	9307      	str	r3, [sp, #28]
 800e0ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0b2:	4654      	mov	r4, sl
 800e0b4:	2205      	movs	r2, #5
 800e0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ba:	4853      	ldr	r0, [pc, #332]	@ (800e208 <_vfiprintf_r+0x21c>)
 800e0bc:	f7f2 f8a8 	bl	8000210 <memchr>
 800e0c0:	9a04      	ldr	r2, [sp, #16]
 800e0c2:	b9d8      	cbnz	r0, 800e0fc <_vfiprintf_r+0x110>
 800e0c4:	06d1      	lsls	r1, r2, #27
 800e0c6:	bf44      	itt	mi
 800e0c8:	2320      	movmi	r3, #32
 800e0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0ce:	0713      	lsls	r3, r2, #28
 800e0d0:	bf44      	itt	mi
 800e0d2:	232b      	movmi	r3, #43	@ 0x2b
 800e0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0de:	d015      	beq.n	800e10c <_vfiprintf_r+0x120>
 800e0e0:	9a07      	ldr	r2, [sp, #28]
 800e0e2:	4654      	mov	r4, sl
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	f04f 0c0a 	mov.w	ip, #10
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0f0:	3b30      	subs	r3, #48	@ 0x30
 800e0f2:	2b09      	cmp	r3, #9
 800e0f4:	d94b      	bls.n	800e18e <_vfiprintf_r+0x1a2>
 800e0f6:	b1b0      	cbz	r0, 800e126 <_vfiprintf_r+0x13a>
 800e0f8:	9207      	str	r2, [sp, #28]
 800e0fa:	e014      	b.n	800e126 <_vfiprintf_r+0x13a>
 800e0fc:	eba0 0308 	sub.w	r3, r0, r8
 800e100:	fa09 f303 	lsl.w	r3, r9, r3
 800e104:	4313      	orrs	r3, r2
 800e106:	9304      	str	r3, [sp, #16]
 800e108:	46a2      	mov	sl, r4
 800e10a:	e7d2      	b.n	800e0b2 <_vfiprintf_r+0xc6>
 800e10c:	9b03      	ldr	r3, [sp, #12]
 800e10e:	1d19      	adds	r1, r3, #4
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	9103      	str	r1, [sp, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	bfbb      	ittet	lt
 800e118:	425b      	neglt	r3, r3
 800e11a:	f042 0202 	orrlt.w	r2, r2, #2
 800e11e:	9307      	strge	r3, [sp, #28]
 800e120:	9307      	strlt	r3, [sp, #28]
 800e122:	bfb8      	it	lt
 800e124:	9204      	strlt	r2, [sp, #16]
 800e126:	7823      	ldrb	r3, [r4, #0]
 800e128:	2b2e      	cmp	r3, #46	@ 0x2e
 800e12a:	d10a      	bne.n	800e142 <_vfiprintf_r+0x156>
 800e12c:	7863      	ldrb	r3, [r4, #1]
 800e12e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e130:	d132      	bne.n	800e198 <_vfiprintf_r+0x1ac>
 800e132:	9b03      	ldr	r3, [sp, #12]
 800e134:	1d1a      	adds	r2, r3, #4
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	9203      	str	r2, [sp, #12]
 800e13a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e13e:	3402      	adds	r4, #2
 800e140:	9305      	str	r3, [sp, #20]
 800e142:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e218 <_vfiprintf_r+0x22c>
 800e146:	7821      	ldrb	r1, [r4, #0]
 800e148:	2203      	movs	r2, #3
 800e14a:	4650      	mov	r0, sl
 800e14c:	f7f2 f860 	bl	8000210 <memchr>
 800e150:	b138      	cbz	r0, 800e162 <_vfiprintf_r+0x176>
 800e152:	9b04      	ldr	r3, [sp, #16]
 800e154:	eba0 000a 	sub.w	r0, r0, sl
 800e158:	2240      	movs	r2, #64	@ 0x40
 800e15a:	4082      	lsls	r2, r0
 800e15c:	4313      	orrs	r3, r2
 800e15e:	3401      	adds	r4, #1
 800e160:	9304      	str	r3, [sp, #16]
 800e162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e166:	4829      	ldr	r0, [pc, #164]	@ (800e20c <_vfiprintf_r+0x220>)
 800e168:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e16c:	2206      	movs	r2, #6
 800e16e:	f7f2 f84f 	bl	8000210 <memchr>
 800e172:	2800      	cmp	r0, #0
 800e174:	d03f      	beq.n	800e1f6 <_vfiprintf_r+0x20a>
 800e176:	4b26      	ldr	r3, [pc, #152]	@ (800e210 <_vfiprintf_r+0x224>)
 800e178:	bb1b      	cbnz	r3, 800e1c2 <_vfiprintf_r+0x1d6>
 800e17a:	9b03      	ldr	r3, [sp, #12]
 800e17c:	3307      	adds	r3, #7
 800e17e:	f023 0307 	bic.w	r3, r3, #7
 800e182:	3308      	adds	r3, #8
 800e184:	9303      	str	r3, [sp, #12]
 800e186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e188:	443b      	add	r3, r7
 800e18a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e18c:	e76a      	b.n	800e064 <_vfiprintf_r+0x78>
 800e18e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e192:	460c      	mov	r4, r1
 800e194:	2001      	movs	r0, #1
 800e196:	e7a8      	b.n	800e0ea <_vfiprintf_r+0xfe>
 800e198:	2300      	movs	r3, #0
 800e19a:	3401      	adds	r4, #1
 800e19c:	9305      	str	r3, [sp, #20]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	f04f 0c0a 	mov.w	ip, #10
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1aa:	3a30      	subs	r2, #48	@ 0x30
 800e1ac:	2a09      	cmp	r2, #9
 800e1ae:	d903      	bls.n	800e1b8 <_vfiprintf_r+0x1cc>
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d0c6      	beq.n	800e142 <_vfiprintf_r+0x156>
 800e1b4:	9105      	str	r1, [sp, #20]
 800e1b6:	e7c4      	b.n	800e142 <_vfiprintf_r+0x156>
 800e1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1bc:	4604      	mov	r4, r0
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e7f0      	b.n	800e1a4 <_vfiprintf_r+0x1b8>
 800e1c2:	ab03      	add	r3, sp, #12
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	462a      	mov	r2, r5
 800e1c8:	4b12      	ldr	r3, [pc, #72]	@ (800e214 <_vfiprintf_r+0x228>)
 800e1ca:	a904      	add	r1, sp, #16
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f7fc ff23 	bl	800b018 <_printf_float>
 800e1d2:	4607      	mov	r7, r0
 800e1d4:	1c78      	adds	r0, r7, #1
 800e1d6:	d1d6      	bne.n	800e186 <_vfiprintf_r+0x19a>
 800e1d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1da:	07d9      	lsls	r1, r3, #31
 800e1dc:	d405      	bmi.n	800e1ea <_vfiprintf_r+0x1fe>
 800e1de:	89ab      	ldrh	r3, [r5, #12]
 800e1e0:	059a      	lsls	r2, r3, #22
 800e1e2:	d402      	bmi.n	800e1ea <_vfiprintf_r+0x1fe>
 800e1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1e6:	f7fd fcb9 	bl	800bb5c <__retarget_lock_release_recursive>
 800e1ea:	89ab      	ldrh	r3, [r5, #12]
 800e1ec:	065b      	lsls	r3, r3, #25
 800e1ee:	f53f af1f 	bmi.w	800e030 <_vfiprintf_r+0x44>
 800e1f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1f4:	e71e      	b.n	800e034 <_vfiprintf_r+0x48>
 800e1f6:	ab03      	add	r3, sp, #12
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	462a      	mov	r2, r5
 800e1fc:	4b05      	ldr	r3, [pc, #20]	@ (800e214 <_vfiprintf_r+0x228>)
 800e1fe:	a904      	add	r1, sp, #16
 800e200:	4630      	mov	r0, r6
 800e202:	f7fd f9a1 	bl	800b548 <_printf_i>
 800e206:	e7e4      	b.n	800e1d2 <_vfiprintf_r+0x1e6>
 800e208:	0800e9d0 	.word	0x0800e9d0
 800e20c:	0800e9da 	.word	0x0800e9da
 800e210:	0800b019 	.word	0x0800b019
 800e214:	0800dfc9 	.word	0x0800dfc9
 800e218:	0800e9d6 	.word	0x0800e9d6

0800e21c <__swbuf_r>:
 800e21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21e:	460e      	mov	r6, r1
 800e220:	4614      	mov	r4, r2
 800e222:	4605      	mov	r5, r0
 800e224:	b118      	cbz	r0, 800e22e <__swbuf_r+0x12>
 800e226:	6a03      	ldr	r3, [r0, #32]
 800e228:	b90b      	cbnz	r3, 800e22e <__swbuf_r+0x12>
 800e22a:	f7fd fb39 	bl	800b8a0 <__sinit>
 800e22e:	69a3      	ldr	r3, [r4, #24]
 800e230:	60a3      	str	r3, [r4, #8]
 800e232:	89a3      	ldrh	r3, [r4, #12]
 800e234:	071a      	lsls	r2, r3, #28
 800e236:	d501      	bpl.n	800e23c <__swbuf_r+0x20>
 800e238:	6923      	ldr	r3, [r4, #16]
 800e23a:	b943      	cbnz	r3, 800e24e <__swbuf_r+0x32>
 800e23c:	4621      	mov	r1, r4
 800e23e:	4628      	mov	r0, r5
 800e240:	f000 f82a 	bl	800e298 <__swsetup_r>
 800e244:	b118      	cbz	r0, 800e24e <__swbuf_r+0x32>
 800e246:	f04f 37ff 	mov.w	r7, #4294967295
 800e24a:	4638      	mov	r0, r7
 800e24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e24e:	6823      	ldr	r3, [r4, #0]
 800e250:	6922      	ldr	r2, [r4, #16]
 800e252:	1a98      	subs	r0, r3, r2
 800e254:	6963      	ldr	r3, [r4, #20]
 800e256:	b2f6      	uxtb	r6, r6
 800e258:	4283      	cmp	r3, r0
 800e25a:	4637      	mov	r7, r6
 800e25c:	dc05      	bgt.n	800e26a <__swbuf_r+0x4e>
 800e25e:	4621      	mov	r1, r4
 800e260:	4628      	mov	r0, r5
 800e262:	f7ff fdc7 	bl	800ddf4 <_fflush_r>
 800e266:	2800      	cmp	r0, #0
 800e268:	d1ed      	bne.n	800e246 <__swbuf_r+0x2a>
 800e26a:	68a3      	ldr	r3, [r4, #8]
 800e26c:	3b01      	subs	r3, #1
 800e26e:	60a3      	str	r3, [r4, #8]
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	1c5a      	adds	r2, r3, #1
 800e274:	6022      	str	r2, [r4, #0]
 800e276:	701e      	strb	r6, [r3, #0]
 800e278:	6962      	ldr	r2, [r4, #20]
 800e27a:	1c43      	adds	r3, r0, #1
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d004      	beq.n	800e28a <__swbuf_r+0x6e>
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	07db      	lsls	r3, r3, #31
 800e284:	d5e1      	bpl.n	800e24a <__swbuf_r+0x2e>
 800e286:	2e0a      	cmp	r6, #10
 800e288:	d1df      	bne.n	800e24a <__swbuf_r+0x2e>
 800e28a:	4621      	mov	r1, r4
 800e28c:	4628      	mov	r0, r5
 800e28e:	f7ff fdb1 	bl	800ddf4 <_fflush_r>
 800e292:	2800      	cmp	r0, #0
 800e294:	d0d9      	beq.n	800e24a <__swbuf_r+0x2e>
 800e296:	e7d6      	b.n	800e246 <__swbuf_r+0x2a>

0800e298 <__swsetup_r>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	4b29      	ldr	r3, [pc, #164]	@ (800e340 <__swsetup_r+0xa8>)
 800e29c:	4605      	mov	r5, r0
 800e29e:	6818      	ldr	r0, [r3, #0]
 800e2a0:	460c      	mov	r4, r1
 800e2a2:	b118      	cbz	r0, 800e2ac <__swsetup_r+0x14>
 800e2a4:	6a03      	ldr	r3, [r0, #32]
 800e2a6:	b90b      	cbnz	r3, 800e2ac <__swsetup_r+0x14>
 800e2a8:	f7fd fafa 	bl	800b8a0 <__sinit>
 800e2ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2b0:	0719      	lsls	r1, r3, #28
 800e2b2:	d422      	bmi.n	800e2fa <__swsetup_r+0x62>
 800e2b4:	06da      	lsls	r2, r3, #27
 800e2b6:	d407      	bmi.n	800e2c8 <__swsetup_r+0x30>
 800e2b8:	2209      	movs	r2, #9
 800e2ba:	602a      	str	r2, [r5, #0]
 800e2bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2c0:	81a3      	strh	r3, [r4, #12]
 800e2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c6:	e033      	b.n	800e330 <__swsetup_r+0x98>
 800e2c8:	0758      	lsls	r0, r3, #29
 800e2ca:	d512      	bpl.n	800e2f2 <__swsetup_r+0x5a>
 800e2cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2ce:	b141      	cbz	r1, 800e2e2 <__swsetup_r+0x4a>
 800e2d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2d4:	4299      	cmp	r1, r3
 800e2d6:	d002      	beq.n	800e2de <__swsetup_r+0x46>
 800e2d8:	4628      	mov	r0, r5
 800e2da:	f7fe faa5 	bl	800c828 <_free_r>
 800e2de:	2300      	movs	r3, #0
 800e2e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2e2:	89a3      	ldrh	r3, [r4, #12]
 800e2e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e2e8:	81a3      	strh	r3, [r4, #12]
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	6063      	str	r3, [r4, #4]
 800e2ee:	6923      	ldr	r3, [r4, #16]
 800e2f0:	6023      	str	r3, [r4, #0]
 800e2f2:	89a3      	ldrh	r3, [r4, #12]
 800e2f4:	f043 0308 	orr.w	r3, r3, #8
 800e2f8:	81a3      	strh	r3, [r4, #12]
 800e2fa:	6923      	ldr	r3, [r4, #16]
 800e2fc:	b94b      	cbnz	r3, 800e312 <__swsetup_r+0x7a>
 800e2fe:	89a3      	ldrh	r3, [r4, #12]
 800e300:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e308:	d003      	beq.n	800e312 <__swsetup_r+0x7a>
 800e30a:	4621      	mov	r1, r4
 800e30c:	4628      	mov	r0, r5
 800e30e:	f000 f883 	bl	800e418 <__smakebuf_r>
 800e312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e316:	f013 0201 	ands.w	r2, r3, #1
 800e31a:	d00a      	beq.n	800e332 <__swsetup_r+0x9a>
 800e31c:	2200      	movs	r2, #0
 800e31e:	60a2      	str	r2, [r4, #8]
 800e320:	6962      	ldr	r2, [r4, #20]
 800e322:	4252      	negs	r2, r2
 800e324:	61a2      	str	r2, [r4, #24]
 800e326:	6922      	ldr	r2, [r4, #16]
 800e328:	b942      	cbnz	r2, 800e33c <__swsetup_r+0xa4>
 800e32a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e32e:	d1c5      	bne.n	800e2bc <__swsetup_r+0x24>
 800e330:	bd38      	pop	{r3, r4, r5, pc}
 800e332:	0799      	lsls	r1, r3, #30
 800e334:	bf58      	it	pl
 800e336:	6962      	ldrpl	r2, [r4, #20]
 800e338:	60a2      	str	r2, [r4, #8]
 800e33a:	e7f4      	b.n	800e326 <__swsetup_r+0x8e>
 800e33c:	2000      	movs	r0, #0
 800e33e:	e7f7      	b.n	800e330 <__swsetup_r+0x98>
 800e340:	200001e4 	.word	0x200001e4

0800e344 <_raise_r>:
 800e344:	291f      	cmp	r1, #31
 800e346:	b538      	push	{r3, r4, r5, lr}
 800e348:	4605      	mov	r5, r0
 800e34a:	460c      	mov	r4, r1
 800e34c:	d904      	bls.n	800e358 <_raise_r+0x14>
 800e34e:	2316      	movs	r3, #22
 800e350:	6003      	str	r3, [r0, #0]
 800e352:	f04f 30ff 	mov.w	r0, #4294967295
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e35a:	b112      	cbz	r2, 800e362 <_raise_r+0x1e>
 800e35c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e360:	b94b      	cbnz	r3, 800e376 <_raise_r+0x32>
 800e362:	4628      	mov	r0, r5
 800e364:	f000 f830 	bl	800e3c8 <_getpid_r>
 800e368:	4622      	mov	r2, r4
 800e36a:	4601      	mov	r1, r0
 800e36c:	4628      	mov	r0, r5
 800e36e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e372:	f000 b817 	b.w	800e3a4 <_kill_r>
 800e376:	2b01      	cmp	r3, #1
 800e378:	d00a      	beq.n	800e390 <_raise_r+0x4c>
 800e37a:	1c59      	adds	r1, r3, #1
 800e37c:	d103      	bne.n	800e386 <_raise_r+0x42>
 800e37e:	2316      	movs	r3, #22
 800e380:	6003      	str	r3, [r0, #0]
 800e382:	2001      	movs	r0, #1
 800e384:	e7e7      	b.n	800e356 <_raise_r+0x12>
 800e386:	2100      	movs	r1, #0
 800e388:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e38c:	4620      	mov	r0, r4
 800e38e:	4798      	blx	r3
 800e390:	2000      	movs	r0, #0
 800e392:	e7e0      	b.n	800e356 <_raise_r+0x12>

0800e394 <raise>:
 800e394:	4b02      	ldr	r3, [pc, #8]	@ (800e3a0 <raise+0xc>)
 800e396:	4601      	mov	r1, r0
 800e398:	6818      	ldr	r0, [r3, #0]
 800e39a:	f7ff bfd3 	b.w	800e344 <_raise_r>
 800e39e:	bf00      	nop
 800e3a0:	200001e4 	.word	0x200001e4

0800e3a4 <_kill_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	4d07      	ldr	r5, [pc, #28]	@ (800e3c4 <_kill_r+0x20>)
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	602b      	str	r3, [r5, #0]
 800e3b2:	f7f4 ff4b 	bl	800324c <_kill>
 800e3b6:	1c43      	adds	r3, r0, #1
 800e3b8:	d102      	bne.n	800e3c0 <_kill_r+0x1c>
 800e3ba:	682b      	ldr	r3, [r5, #0]
 800e3bc:	b103      	cbz	r3, 800e3c0 <_kill_r+0x1c>
 800e3be:	6023      	str	r3, [r4, #0]
 800e3c0:	bd38      	pop	{r3, r4, r5, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20000ba0 	.word	0x20000ba0

0800e3c8 <_getpid_r>:
 800e3c8:	f7f4 bf38 	b.w	800323c <_getpid>

0800e3cc <__swhatbuf_r>:
 800e3cc:	b570      	push	{r4, r5, r6, lr}
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d4:	2900      	cmp	r1, #0
 800e3d6:	b096      	sub	sp, #88	@ 0x58
 800e3d8:	4615      	mov	r5, r2
 800e3da:	461e      	mov	r6, r3
 800e3dc:	da0d      	bge.n	800e3fa <__swhatbuf_r+0x2e>
 800e3de:	89a3      	ldrh	r3, [r4, #12]
 800e3e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e3e4:	f04f 0100 	mov.w	r1, #0
 800e3e8:	bf14      	ite	ne
 800e3ea:	2340      	movne	r3, #64	@ 0x40
 800e3ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	6031      	str	r1, [r6, #0]
 800e3f4:	602b      	str	r3, [r5, #0]
 800e3f6:	b016      	add	sp, #88	@ 0x58
 800e3f8:	bd70      	pop	{r4, r5, r6, pc}
 800e3fa:	466a      	mov	r2, sp
 800e3fc:	f000 f848 	bl	800e490 <_fstat_r>
 800e400:	2800      	cmp	r0, #0
 800e402:	dbec      	blt.n	800e3de <__swhatbuf_r+0x12>
 800e404:	9901      	ldr	r1, [sp, #4]
 800e406:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e40a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e40e:	4259      	negs	r1, r3
 800e410:	4159      	adcs	r1, r3
 800e412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e416:	e7eb      	b.n	800e3f0 <__swhatbuf_r+0x24>

0800e418 <__smakebuf_r>:
 800e418:	898b      	ldrh	r3, [r1, #12]
 800e41a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e41c:	079d      	lsls	r5, r3, #30
 800e41e:	4606      	mov	r6, r0
 800e420:	460c      	mov	r4, r1
 800e422:	d507      	bpl.n	800e434 <__smakebuf_r+0x1c>
 800e424:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e428:	6023      	str	r3, [r4, #0]
 800e42a:	6123      	str	r3, [r4, #16]
 800e42c:	2301      	movs	r3, #1
 800e42e:	6163      	str	r3, [r4, #20]
 800e430:	b003      	add	sp, #12
 800e432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e434:	ab01      	add	r3, sp, #4
 800e436:	466a      	mov	r2, sp
 800e438:	f7ff ffc8 	bl	800e3cc <__swhatbuf_r>
 800e43c:	9f00      	ldr	r7, [sp, #0]
 800e43e:	4605      	mov	r5, r0
 800e440:	4639      	mov	r1, r7
 800e442:	4630      	mov	r0, r6
 800e444:	f7fe fd9e 	bl	800cf84 <_malloc_r>
 800e448:	b948      	cbnz	r0, 800e45e <__smakebuf_r+0x46>
 800e44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e44e:	059a      	lsls	r2, r3, #22
 800e450:	d4ee      	bmi.n	800e430 <__smakebuf_r+0x18>
 800e452:	f023 0303 	bic.w	r3, r3, #3
 800e456:	f043 0302 	orr.w	r3, r3, #2
 800e45a:	81a3      	strh	r3, [r4, #12]
 800e45c:	e7e2      	b.n	800e424 <__smakebuf_r+0xc>
 800e45e:	89a3      	ldrh	r3, [r4, #12]
 800e460:	6020      	str	r0, [r4, #0]
 800e462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e466:	81a3      	strh	r3, [r4, #12]
 800e468:	9b01      	ldr	r3, [sp, #4]
 800e46a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e46e:	b15b      	cbz	r3, 800e488 <__smakebuf_r+0x70>
 800e470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e474:	4630      	mov	r0, r6
 800e476:	f000 f81d 	bl	800e4b4 <_isatty_r>
 800e47a:	b128      	cbz	r0, 800e488 <__smakebuf_r+0x70>
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	f023 0303 	bic.w	r3, r3, #3
 800e482:	f043 0301 	orr.w	r3, r3, #1
 800e486:	81a3      	strh	r3, [r4, #12]
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	431d      	orrs	r5, r3
 800e48c:	81a5      	strh	r5, [r4, #12]
 800e48e:	e7cf      	b.n	800e430 <__smakebuf_r+0x18>

0800e490 <_fstat_r>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	4d07      	ldr	r5, [pc, #28]	@ (800e4b0 <_fstat_r+0x20>)
 800e494:	2300      	movs	r3, #0
 800e496:	4604      	mov	r4, r0
 800e498:	4608      	mov	r0, r1
 800e49a:	4611      	mov	r1, r2
 800e49c:	602b      	str	r3, [r5, #0]
 800e49e:	f7f4 ff35 	bl	800330c <_fstat>
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	d102      	bne.n	800e4ac <_fstat_r+0x1c>
 800e4a6:	682b      	ldr	r3, [r5, #0]
 800e4a8:	b103      	cbz	r3, 800e4ac <_fstat_r+0x1c>
 800e4aa:	6023      	str	r3, [r4, #0]
 800e4ac:	bd38      	pop	{r3, r4, r5, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20000ba0 	.word	0x20000ba0

0800e4b4 <_isatty_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	4d06      	ldr	r5, [pc, #24]	@ (800e4d0 <_isatty_r+0x1c>)
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4608      	mov	r0, r1
 800e4be:	602b      	str	r3, [r5, #0]
 800e4c0:	f7f4 ff34 	bl	800332c <_isatty>
 800e4c4:	1c43      	adds	r3, r0, #1
 800e4c6:	d102      	bne.n	800e4ce <_isatty_r+0x1a>
 800e4c8:	682b      	ldr	r3, [r5, #0]
 800e4ca:	b103      	cbz	r3, 800e4ce <_isatty_r+0x1a>
 800e4cc:	6023      	str	r3, [r4, #0]
 800e4ce:	bd38      	pop	{r3, r4, r5, pc}
 800e4d0:	20000ba0 	.word	0x20000ba0

0800e4d4 <_init>:
 800e4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d6:	bf00      	nop
 800e4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4da:	bc08      	pop	{r3}
 800e4dc:	469e      	mov	lr, r3
 800e4de:	4770      	bx	lr

0800e4e0 <_fini>:
 800e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e2:	bf00      	nop
 800e4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4e6:	bc08      	pop	{r3}
 800e4e8:	469e      	mov	lr, r3
 800e4ea:	4770      	bx	lr
